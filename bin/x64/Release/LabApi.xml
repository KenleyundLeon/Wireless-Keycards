<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LabApi</name>
    </assembly>
    <members>
        <member name="T:LabApi.Events.Arguments.Interfaces.IAdminToyEvent">
            <summary>
            Represents an event that involves an admin toy.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IAdminToyEvent.AdminToy">
            <summary>
            The admin toy that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IInteractableEvent">
            <summary>
            Represents an event that involves an interactable toy.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IInteractableEvent.LabApi#Events#Arguments#Interfaces#IAdminToyEvent#AdminToy">
            <inheritdoc/>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IInteractableEvent.Interactable">
            <summary>
            The interactable toy that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IShootingTargetEvent">
            <summary>
            Represents an event that involves a shooting target.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IShootingTargetEvent.LabApi#Events#Arguments#Interfaces#IAdminToyEvent#AdminToy">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IShootingTargetEvent.ShootingTarget">
            <summary>
            The shooting target that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IDoorEvent">
            <summary>
            Represents an event that involves a door.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IDoorEvent.Door">
            <summary>
            The door that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IGateEvent">
            <summary>
            Represents an event that involves a gate.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IGateEvent.LabApi#Events#Arguments#Interfaces#IDoorEvent#Door">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IGateEvent.Gate">
            <summary>
            The gate that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IAmnesticCloudEvent">
            <summary>
            Represents an event that involves an amnestic cloud hazard.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IAmnesticCloudEvent.LabApi#Events#Arguments#Interfaces#IHazardEvent#Hazard">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IAmnesticCloudEvent.AmnesticCloud">
            <summary>
            The amnestic cloud hazard that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IHazardEvent">
            <summary>
            Represents an event that involves a hazard.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IHazardEvent.Hazard">
            <summary>
            Hazard that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.ITantrumEvent">
            <summary>
            Represents an event that involves a tantrum hazard.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.ITantrumEvent.LabApi#Events#Arguments#Interfaces#IHazardEvent#Hazard">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.ITantrumEvent.Tantrum">
            <summary>
            The tantrum hazard that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.ICameraEvent">
            <summary>
            Represents an event that involves a camera.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.ICameraEvent.Camera">
            <summary>
            The camera that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.ICancellableEvent">
            <summary>
            Represents an event that can be cancelled.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.ICancellableEvent.IsAllowed">
            <summary>
            Whether the event is allowed to run.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.ICommandSenderEvent">
            <summary>
            Represents an event that involves a <see cref="T:CommandSender"/>.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.ICommandSenderEvent.Sender">
            <summary>
            The <see cref="T:CommandSender"/> that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IElevatorEvent">
            <summary>
            Represents an event that involves an elevator.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IElevatorEvent.Elevator">
            <summary>
            The elevator that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IGroupEvent">
            <summary>
            Represents an event that involves a <see cref="T:UserGroup"/>.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IGroupEvent.Group">
            <summary>
            The <see cref="T:UserGroup"/> involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IObjectiveEvent">
            <summary>
            Represents an event that involves <see cref="T:Respawning.Objectives.FactionObjectiveBase"/>.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IObjectiveEvent.Player">
            <summary>
            Gets the player who triggered the objective completion.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IObjectiveEvent.Faction">
            <summary>
            Gets the <see cref="T:PlayerRoles.Faction"/> which will receive the <see cref="P:LabApi.Events.Arguments.Interfaces.IObjectiveEvent.InfluenceToGrant"/> and <see cref="P:LabApi.Events.Arguments.Interfaces.IObjectiveEvent.TimeToGrant"/> rewards.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IObjectiveEvent.InfluenceToGrant">
            <summary>
            Gets the amount of influence to grant to the <see cref="P:LabApi.Events.Arguments.Interfaces.IObjectiveEvent.Faction"/>.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IObjectiveEvent.TimeToGrant">
            <summary>
            Gets the amount of time to be reduced from the <see cref="P:LabApi.Events.Arguments.Interfaces.IObjectiveEvent.Faction"/>'s timer.
            </summary>
            <remarks>
            Negative values reduce the timer, positive extends it.
            </remarks>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IObjectiveEvent.SendToPlayers">
            <summary>
            Gets whether the objective completion should be sent to players and visible on their screen.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IPlayerEvent">
            <summary>
            Represents an event that is related to a player.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IPlayerEvent.Player">
            <summary>
            Gets the player that invoked the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IRagdollEvent">
            <summary>
            Represents an event that is related to a ragdoll.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IRagdollEvent.Ragdoll">
            <summary>
            Gets the ragdoll that is related to the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IRoomEvent">
            <summary>
            Represents an event that involves a room.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IRoomEvent.Room">
            <summary>
            The room that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IScp914Event">
            <summary>
            Represents an event that is related to SCP-914.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IScp914Event.KnobSetting">
            <summary>
            The current knob setting of SCP-914.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.ITargetEvent">
            <summary>
            Represents an event that is related to a target player.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.ITargetEvent.Target">
            <summary>
            Gets the player that was targeted in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IRevolverItemEvent">
            <summary>
            Represents an event that involves a revolver.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IRevolverItemEvent.LabApi#Events#Arguments#Interfaces#IItemEvent#Item">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IRevolverItemEvent.Revolver">
            <summary>
            The revolver that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IScp127ItemEvent">
            <summary>
            Represents an event that involves SCP-127.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IScp127ItemEvent.LabApi#Events#Arguments#Interfaces#IItemEvent#Item">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IScp127ItemEvent.Scp127Item">
            <summary>
            The SCP-127 item that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IBodyArmorItemEvent">
            <summary>
            Represents an event that involves a body armor item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IBodyArmorItemEvent.LabApi#Events#Arguments#Interfaces#IItemEvent#Item">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IBodyArmorItemEvent.BodyArmorItem">
            <summary>
            The body armor that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.ICandyItemEvent">
            <summary>
            Represents an event that involves a candy item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.ICandyItemEvent.LabApi#Events#Arguments#Interfaces#IItemEvent#Item">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.ICandyItemEvent.CandyItem">
            <summary>
            The candy that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.ICoinItemEvent">
            <summary>
            Represents an event that involves a coin item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.ICoinItemEvent.LabApi#Events#Arguments#Interfaces#IItemEvent#Item">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.ICoinItemEvent.CoinItem">
            <summary>
            The coin that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IFirearmItemEvent">
            <summary>
            Represents an event that involves a weapon.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IFirearmItemEvent.LabApi#Events#Arguments#Interfaces#IItemEvent#Item">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IFirearmItemEvent.FirearmItem">
            <summary>
            The weapon that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IItemEvent">
            <summary>
            Represents an event that involves an item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IItemEvent.Item">
            <summary>
            The item that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.Items.IJailbirdEvent">
            <summary>
            Represents an event that involves a jailbird item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.Items.IJailbirdEvent.LabApi#Events#Arguments#Interfaces#IItemEvent#Item">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.Items.IJailbirdEvent.JailbirdItem">
            <summary>
            The jailbird item that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IKeycardItemEvent">
            <summary>
            Represents an event that involves a keycard item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IKeycardItemEvent.LabApi#Events#Arguments#Interfaces#IItemEvent#Item">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IKeycardItemEvent.KeycardItem">
            <summary>
            The keycard item that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.ILightItemEvent">
            <summary>
            Represents an event that involves a light item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.ILightItemEvent.LabApi#Events#Arguments#Interfaces#IItemEvent#Item">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.ILightItemEvent.LightItem">
            <summary>
            The light item that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IRadioItemEvent">
            <summary>
            Represents an event that involves a radio item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IRadioItemEvent.LabApi#Events#Arguments#Interfaces#IItemEvent#Item">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IRadioItemEvent.RadioItem">
            <summary>
            The radio that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IThrowableItemEvent">
            <summary>
            Represents an event that involves a throwable item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IThrowableItemEvent.LabApi#Events#Arguments#Interfaces#IItemEvent#Item">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IThrowableItemEvent.ThrowableItem">
            <summary>
            The throwable item that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IUsableItemEvent">
            <summary>
            Represents an event that involves a usable item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IUsableItemEvent.LabApi#Events#Arguments#Interfaces#IItemEvent#Item">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IUsableItemEvent.UsableItem">
            <summary>
            The usable that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.ITeslaEvent">
            <summary>
            Represents an event that is related to a <see cref="T:LabApi.Features.Wrappers.Tesla"/>.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.ITeslaEvent.Tesla">
            <summary>
            Gets the <see cref="T:LabApi.Features.Wrappers.Tesla"/> associated with the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IVoiceMessageEvent">
            <summary>
            Represents an event that involves a voice message.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IVoiceMessageEvent.Message">
            <summary>
            The voice message that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IAmmoPickupEvent">
            <summary>
            Represents an event that involves an ammo pickup.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IAmmoPickupEvent.LabApi#Events#Arguments#Interfaces#IPickupEvent#Pickup">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IAmmoPickupEvent.AmmoPickup">
            <summary>
            The ammo pickup that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IBodyArmorPickupEvent">
            <summary>
            Represents an event that involves a body armor pickup.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IBodyArmorPickupEvent.LabApi#Events#Arguments#Interfaces#IPickupEvent#Pickup">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IBodyArmorPickupEvent.BodyArmorPickup">
            <summary>
            The body armor pickup that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.ICandyPickupEvent">
            <summary>
            Represents an event that involves a candy pickup.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.ICandyPickupEvent.LabApi#Events#Arguments#Interfaces#IPickupEvent#Pickup">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.ICandyPickupEvent.CandyPickup">
            <summary>
            The candy pickup that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IExplosionGrenadeEvent">
            <summary>
            Represents an event that involves an explosive grenade.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IExplosionGrenadeEvent.LabApi#Events#Arguments#Interfaces#IProjectileEvent#Projectile">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IExplosionGrenadeEvent.ExplosiveGrenade">
            <summary>
            The explosive grenade that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IPickupEvent">
            <summary>
            Represents an event that involves a pickup.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IPickupEvent.Pickup">
            <summary>
            The pickup that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IProjectileEvent">
            <summary>
            Represents an event that involves a projectile.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IProjectileEvent.LabApi#Events#Arguments#Interfaces#IPickupEvent#Pickup">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IProjectileEvent.Projectile">
            <summary>
            The projectile that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.ITimedGrenadeEvent">
            <summary>
            Represents an event that is related to a timed grenade.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.ITimedGrenadeEvent.LabApi#Events#Arguments#Interfaces#IProjectileEvent#Projectile">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.ITimedGrenadeEvent.TimedGrenade">
            <summary>
            Gets the timed grenade that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IGeneratorEvent">
            <summary>
            Represents an event that involves a generator structure.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IGeneratorEvent.LabApi#Events#Arguments#Interfaces#IStructureEvent#Structure">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IGeneratorEvent.Generator">
            <summary>
            The generator that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.ILockerEvent">
            <summary>
            Represents an event that involves a locker structure.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.ILockerEvent.LabApi#Events#Arguments#Interfaces#IStructureEvent#Structure">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.ILockerEvent.Locker">
            <summary>
            The locker that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Interfaces.IStructureEvent">
            <summary>
            Represents an event that involves a structure.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Interfaces.IStructureEvent.Structure">
            <summary>
            The structure that is involved in the event.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ObjectiveEvents.EnemyKilledObjectiveEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ObjectiveEvents.KilledEnemyCompleted"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ObjectiveEvents.EnemyKilledObjectiveEventArgs.#ctor(ReferenceHub,PlayerRoles.Faction,System.Single,System.Single,System.Boolean,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ObjectiveEvents.EnemyKilledObjectiveEventArgs"/> class.
            </summary>
            <param name="hub">The player hub who triggered the objective.</param>
            <param name="faction">The Faction to grant the influence to.</param>
            <param name="influenceToGrant">The influence points to grant to the <paramref name="faction"/>.</param>
            <param name="timeToGrant">The time to reduce from the <paramref name="faction"/>.</param>
            <param name="sendToPlayers">Whether the objective completion has been sent to players.</param>
            <param name="targetHub">The player that has been killed.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ObjectiveEvents.EnemyKilledObjectiveEventArgs.Target">
            <summary>
            Gets the player that has been killed.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ObjectiveEvents.EnemyKillingObjectiveEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ObjectiveEvents.KillingEnemyCompleting"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ObjectiveEvents.EnemyKillingObjectiveEventArgs.#ctor(ReferenceHub,PlayerRoles.Faction,System.Single,System.Single,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ObjectiveEvents.EnemyKillingObjectiveEventArgs"/> class.
            </summary>
            <param name="hub">The player hub who triggered the objective.</param>
            <param name="faction">The Faction to grant the influence to.</param>
            <param name="influenceToGrant">The influence points to grant to the <paramref name="faction"/>.</param>
            <param name="timeToGrant">The time to reduce from the <paramref name="faction"/>.</param>
            <param name="targetHub">The player that has been killed.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ObjectiveEvents.EnemyKillingObjectiveEventArgs.Target">
            <summary>
            Gets the player that has been killed.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ObjectiveEvents.EscapedObjectiveEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ObjectiveEvents.EscapedCompleted"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ObjectiveEvents.EscapedObjectiveEventArgs.#ctor(ReferenceHub,PlayerRoles.Faction,System.Single,System.Single,System.Boolean,PlayerRoles.RoleTypeId,PlayerRoles.RoleTypeId)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ObjectiveEvents.EscapedObjectiveEventArgs"/> class.
            </summary>
            <param name="hub">The player hub who triggered the objective.</param>
            <param name="faction">The Faction to grant the influence to.</param>
            <param name="influenceToGrant">The influence points to grant to the <paramref name="faction"/>.</param>
            <param name="timeToGrant">The time to reduce from the <paramref name="faction"/>.</param>
            <param name="newRole">The new role the player gets after escaping.</param>
            <param name="sendToPlayers">Whether the objective completion has been sent to players.</param>
            <param name="oldRole">The old role of the player.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ObjectiveEvents.EscapedObjectiveEventArgs.OldRole">
            <summary>
            Gets the old role of the player.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ObjectiveEvents.EscapedObjectiveEventArgs.NewRole">
            <summary>
            Gets the new role the player is getting.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ObjectiveEvents.EscapingObjectiveEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ObjectiveEvents.EscapingCompleting"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ObjectiveEvents.EscapingObjectiveEventArgs.#ctor(ReferenceHub,PlayerRoles.Faction,System.Single,System.Single,PlayerRoles.RoleTypeId,PlayerRoles.RoleTypeId)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ObjectiveEvents.EscapingObjectiveEventArgs"/> class.
            </summary>
            <param name="hub">The player hub who triggered the objective.</param>
            <param name="faction">The Faction to grant the influence to.</param>
            <param name="influenceToGrant">The influence points to grant to the <paramref name="faction"/>.</param>
            <param name="timeToGrant">The time to reduce from the <paramref name="faction"/>.</param>
            <param name="newRole">The new role the player gets after escaping.</param>
            <param name="oldRole">The old role of the player.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ObjectiveEvents.EscapingObjectiveEventArgs.OldRole">
            <summary>
            Gets the old role of the player.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ObjectiveEvents.EscapingObjectiveEventArgs.NewRole">
            <summary>
            Gets the new role the player is getting.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ObjectiveEvents.GeneratorActivatedObjectiveEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ObjectiveEvents.ActivatedGeneratorCompleted"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ObjectiveEvents.GeneratorActivatedObjectiveEventArgs.#ctor(ReferenceHub,PlayerRoles.Faction,System.Single,System.Single,System.Boolean,MapGeneration.Distributors.Scp079Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ObjectiveEvents.GeneratorActivatedObjectiveEventArgs"/> class.
            </summary>
            <param name="hub">The player hub who triggered the objective.</param>
            <param name="faction">The Faction to grant the influence to.</param>
            <param name="influenceToGrant">The influence points to grant to the <paramref name="faction"/>.</param>
            <param name="timeToGrant">The time to reduce from the <paramref name="faction"/>.</param>
            <param name="sendToPlayers">Whether the objective completion has been sent to players.</param>
            <param name="generator">The generator that has been activated.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ObjectiveEvents.GeneratorActivatedObjectiveEventArgs.Generator">
            <summary>
            Gets the generator that has been activated.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ObjectiveEvents.GeneratorActivatingObjectiveEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ObjectiveEvents.ActivatingGeneratorCompleting"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ObjectiveEvents.GeneratorActivatingObjectiveEventArgs.#ctor(ReferenceHub,PlayerRoles.Faction,System.Single,System.Single,MapGeneration.Distributors.Scp079Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ObjectiveEvents.GeneratorActivatingObjectiveEventArgs"/> class.
            </summary>
            <param name="hub">The player hub who triggered the objective.</param>
            <param name="faction">The Faction to grant the influence to.</param>
            <param name="influenceToGrant">The influence points to grant to the <paramref name="faction"/>.</param>
            <param name="timeToGrant">The time to reduce from the <paramref name="faction"/>.</param>
            <param name="generator">The generator that has been activated.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ObjectiveEvents.GeneratorActivatingObjectiveEventArgs.Generator">
            <summary>
            Gets the generator that has been activated.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletedBaseEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ObjectiveEvents.Completed"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletedBaseEventArgs.#ctor(ReferenceHub,PlayerRoles.Faction,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletingBaseEventArgs"/> class.
            </summary>
            <param name="hub">The player hub who triggered the objective.</param>
            <param name="faction">The Faction to grant the influence to.</param>
            <param name="influenceToGrant">The influence points granted to the <paramref name="faction"/>.</param>
            <param name="timeToGrant">The time reduced from the <paramref name="faction"/>.</param>
            <param name="sendToPlayers">Whether the objective completion has been sent to players.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletedBaseEventArgs.Player">
            <inheritdoc/>
        </member>
        <member name="P:LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletedBaseEventArgs.Faction">
            <inheritdoc/>
        </member>
        <member name="P:LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletedBaseEventArgs.InfluenceToGrant">
            <inheritdoc/>
        </member>
        <member name="P:LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletedBaseEventArgs.TimeToGrant">
            <inheritdoc/>
        </member>
        <member name="P:LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletedBaseEventArgs.SendToPlayers">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletingBaseEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ObjectiveEvents.Completing"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletingBaseEventArgs.#ctor(ReferenceHub,PlayerRoles.Faction,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletingBaseEventArgs"/> class.
            </summary>
            <param name="hub">The player hub who triggered the objective.</param>
            <param name="faction">The Faction to grant the influence to.</param>
            <param name="influenceToGrant">The influence points to grant to the <paramref name="faction"/>.</param>
            <param name="timeToGrant">The time to reduce from the <paramref name="faction"/>.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletingBaseEventArgs.Player">
            <summary>
            Gets or sets the player who triggered the objective completion.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletingBaseEventArgs.Faction">
            <summary>
            Gets or sets the <see cref="T:PlayerRoles.Faction"/> which receives the <see cref="P:LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletingBaseEventArgs.InfluenceToGrant"/> and <see cref="P:LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletingBaseEventArgs.TimeToGrant"/> rewards.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletingBaseEventArgs.InfluenceToGrant">
            <summary>
            Gets or sets the amount of influence granted to the <see cref="P:LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletingBaseEventArgs.Faction"/>.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletingBaseEventArgs.TimeToGrant">
            <summary>
            Gets or sets the amount of time reduced from the <see cref="P:LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletingBaseEventArgs.Faction"/>'s timer.
            </summary>
            <remarks>
            Negative values reduce the timer, positive extends it.
            </remarks>
        </member>
        <member name="P:LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletingBaseEventArgs.SendToPlayers">
            <summary>
            Gets or sets whether the objective completion has been sent to players and is visible on their screen.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletingBaseEventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Events.Arguments.ObjectiveEvents.ScpDamagedObjectiveEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ObjectiveEvents.DamagedScpCompleted"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ObjectiveEvents.ScpDamagedObjectiveEventArgs.#ctor(ReferenceHub,PlayerRoles.Faction,System.Single,System.Single,System.Boolean,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ObjectiveEvents.ScpDamagedObjectiveEventArgs"/> class.
            </summary>
            <param name="hub">The player hub who triggered the objective.</param>
            <param name="faction">The Faction to grant the influence to.</param>
            <param name="influenceToGrant">The influence points to grant to the <paramref name="faction"/>.</param>
            <param name="timeToGrant">The time to reduce from the <paramref name="faction"/>.</param>
            <param name="sendToPlayers">Whether the objective completion has been sent to players.</param>
            <param name="targetHub">The hub of the player SCP that has been damaged.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ObjectiveEvents.ScpDamagedObjectiveEventArgs.Target">
            <summary>
            Gets the SCP player that has been damaged.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ObjectiveEvents.ScpDamagingObjectiveEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ObjectiveEvents.DamagingScpCompleting"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ObjectiveEvents.ScpDamagingObjectiveEventArgs.#ctor(ReferenceHub,PlayerRoles.Faction,System.Single,System.Single,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ObjectiveEvents.ScpDamagingObjectiveEventArgs"/> class.
            </summary>
            <param name="hub">The player hub who triggered the objective.</param>
            <param name="faction">The Faction to grant the influence to.</param>
            <param name="influenceToGrant">The influence points to grant to the <paramref name="faction"/>.</param>
            <param name="timeToGrant">The time to reduce from the <paramref name="faction"/>.</param>
            <param name="targetHub">The hub of the player SCP that has been damaged.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ObjectiveEvents.ScpDamagingObjectiveEventArgs.Target">
            <summary>
            Gets the SCP player that has been damaged.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ObjectiveEvents.ScpItemPickedObjectiveEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ObjectiveEvents.PickedScpItemCompleted"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ObjectiveEvents.ScpItemPickedObjectiveEventArgs.#ctor(ReferenceHub,PlayerRoles.Faction,System.Single,System.Single,System.Boolean,InventorySystem.Items.ItemBase)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ObjectiveEvents.ScpItemPickedObjectiveEventArgs"/> class.
            </summary>
            <param name="hub">The player hub who triggered the objective.</param>
            <param name="faction">The Faction to grant the influence to.</param>
            <param name="influenceToGrant">The influence points to grant to the <paramref name="faction"/>.</param>
            <param name="timeToGrant">The time to reduce from the <paramref name="faction"/>.</param>
            <param name="sendToPlayers">Whether the objective completion has been sent to players.</param>
            <param name="item">The item that has been picked up.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ObjectiveEvents.ScpItemPickedObjectiveEventArgs.Item">
            <summary>
            Gets the item that has been picked up.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ObjectiveEvents.ScpItemPickingObjectiveEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ObjectiveEvents.PickingScpItemCompleting"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ObjectiveEvents.ScpItemPickingObjectiveEventArgs.#ctor(ReferenceHub,PlayerRoles.Faction,System.Single,System.Single,InventorySystem.Items.ItemBase)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletingBaseEventArgs"/> class.
            </summary>
            <param name="hub">The player hub who triggered the objective.</param>
            <param name="faction">The Faction to grant the influence to.</param>
            <param name="influenceToGrant">The influence points to grant to the <paramref name="faction"/>.</param>
            <param name="timeToGrant">The time to reduce from the <paramref name="faction"/>.</param>
            <param name="item">The item that has been picked up.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ObjectiveEvents.ScpItemPickingObjectiveEventArgs.Item">
            <summary>
            Gets the item that has been picked up.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerActivatedGeneratorEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ActivatedGenerator"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerActivatedGeneratorEventArgs.#ctor(ReferenceHub,MapGeneration.Distributors.Scp079Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerActivatedGeneratorEventArgs"/> class.
            </summary>
            <param name="hub">The player who activated the generator.</param>
            <param name="generator">The generator that the player has activated.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerActivatedGeneratorEventArgs.Player">
            <summary>
            Gets the player who activated the generator.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerActivatedGeneratorEventArgs.Generator">
            <summary>
            Gets the generator activated.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerActivatingGeneratorEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ActivatingGenerator"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerActivatingGeneratorEventArgs.#ctor(ReferenceHub,MapGeneration.Distributors.Scp079Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerActivatingGeneratorEventArgs"/> class.
            </summary>
            <param name="hub">The player who is activating the generator.</param>
            <param name="generator">The generator that the player is activating.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerActivatingGeneratorEventArgs.Player">
            <summary>
            Gets the player who is activating the generator.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerActivatingGeneratorEventArgs.Generator">
            <summary>
            Gets the generator activating.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerActivatingGeneratorEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerAimedWeaponEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.AimedWeapon"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerAimedWeaponEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Firearms.Firearm,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerAimedWeaponEventArgs"/> class.
            </summary>
            <param name="hub">The player who aimed the weapon.</param>
            <param name="weapon">The weapon that the player aimed.</param>
            <param name="aiming">Whether the player was aiming or unaiming their weapon.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerAimedWeaponEventArgs.Player">
            <summary>
            Gets the player who aimed the weapon.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerAimedWeaponEventArgs.Aiming">
            <summary>
            Whether the player is aiming or unaiming.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerAimedWeaponEventArgs.FirearmItem">
            <summary>
            Gets the weapon being aimed.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerAimedWeaponEventArgs.Weapon">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerAimedWeaponEventArgs.FirearmItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerBannedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Banned"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerBannedEventArgs.#ctor(ReferenceHub,System.String,ReferenceHub,System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerBannedEventArgs"/> class.
            </summary>
            <param name="hub">The player who is getting the ban.</param>
            <param name="playerId">The ID of the player who is getting the ban.</param>
            <param name="issuer">The player who issued the ban.</param>
            <param name="reason">The reason of the ban.</param>
            <param name="duration">The duration of the ban.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerBannedEventArgs.Player">
            <summary>
            Gets the player who is being banned.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerBannedEventArgs.PlayerId">
            <summary>
            Gets the ID of the player who is being banned.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerBannedEventArgs.Issuer">
            <summary>
            Gets the player who issued the ban.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerBannedEventArgs.Reason">
            <summary>
            Gets the reason of the ban.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerBannedEventArgs.Duration">
            <summary>
            Gets the duration of the ban.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerBanningEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Banning"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerBanningEventArgs.#ctor(ReferenceHub,System.String,ReferenceHub,System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerBanningEventArgs"/> class.
            </summary>
            <param name="hub">The player who is getting the ban.</param>
            <param name="playerId">The ID of the player who is getting the ban.</param>
            <param name="issuer">The player who issued the ban.</param>
            <param name="reason">The reason of the ban.</param>
            <param name="duration">The duration of the ban.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerBanningEventArgs.Player">
            <summary>
            Gets the player who is being banned.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerBanningEventArgs.PlayerId">
            <summary>
            Gets the ID of the player who is being banned.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerBanningEventArgs.Issuer">
            <summary>
            Gets the player who issued the ban.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerBanningEventArgs.Reason">
            <summary>
            Gets or sets the reason of the ban.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerBanningEventArgs.Duration">
            <summary>
            Gets or sets the duration of the ban.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerBanningEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerCancelledUsingItemEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.CancelledUsingItem"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerCancelledUsingItemEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Usables.UsableItem)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerCancelledUsingItemEventArgs"/> class.
            </summary>
            <param name="hub">The player who cancelled using the item.</param>
            <param name="item">The item which the player cancelled using.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerCancelledUsingItemEventArgs.Player">
            <summary>
            Gets the player who cancelled using the item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerCancelledUsingItemEventArgs.UsableItem">
            <summary>
            Gets the item which the player cancelled using.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerCancelledUsingItemEventArgs.Item">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerCancelledUsingItemEventArgs.UsableItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerCancellingUsingItemEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.CancellingUsingItem"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerCancellingUsingItemEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Usables.UsableItem)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerCancellingUsingItemEventArgs"/> class.
            </summary>
            <param name="hub">The player who is cancelling using the item.</param>
            <param name="item">The item which the player cancels using.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerCancellingUsingItemEventArgs.Player">
            <summary>
            Gets the player who is cancelling using the item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerCancellingUsingItemEventArgs.UsableItem">
            <summary>
            Gets the item which the player cancels using.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerCancellingUsingItemEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerCancellingUsingItemEventArgs.Item">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerCancellingUsingItemEventArgs.UsableItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangedAttachmentsEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ChangedAttachments"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerChangedAttachmentsEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Firearms.Firearm,System.UInt32,System.UInt32)">
            <summary>
            Initialized a new instance of <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangedAttachmentsEventArgs"/>.
            </summary>
            <param name="player">The player who is changing the firearm attachments.</param>
            <param name="firearm">The firearm whose attachments are being changed.</param>
            <param name="oldAttachments">The old attachments code.</param>
            <param name="newAttachments">The new attachments code.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangedAttachmentsEventArgs.Player">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangedAttachmentsEventArgs.FirearmItem">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangedAttachmentsEventArgs.OldAttachments">
            <summary>
            Gets previous attachments code.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangedAttachmentsEventArgs.NewAttachments">
            <summary>
            Gets the new attachments code.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangedBadgeVisibilityEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ChangedBadgeVisibility"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerChangedBadgeVisibilityEventArgs.#ctor(ReferenceHub,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangedBadgeVisibilityEventArgs"/> class.
            </summary>
            <param name="hub">The <see cref="T:ReferenceHub"/> component of the player that changed their badge visibility.</param>
            <param name="isGlobal">Whether the badge is a global badge.</param>
            <param name="newVisibility">The new visibility state.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangedBadgeVisibilityEventArgs.Player">
            <summary>
            The player that changed their badge visibility.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangedBadgeVisibilityEventArgs.IsGlobalBadge">
            <summary>
            <see langword="true"/> if the badge is a global badge, otherwise it is a local badge.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangedBadgeVisibilityEventArgs.NewVisibility">
            <summary>
            Whether the badge is now visible.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangedItemEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ChangedItem"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerChangedItemEventArgs.#ctor(ReferenceHub,InventorySystem.Items.ItemBase,InventorySystem.Items.ItemBase)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangedItemEventArgs"/> class.
            </summary>
            <param name="hub">The player who changed current item.</param>
            <param name="oldItem">The old item which player changed to.</param>
            <param name="newItem">The new item which player changed to.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangedItemEventArgs.Player">
            <summary>
            Gets the player who changed current item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangedItemEventArgs.OldItem">
            <summary>
            Gets the old item which player changed.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangedItemEventArgs.NewItem">
            <summary>
            Gets the new item which player changed to.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangedNicknameEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ChangedNickname"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerChangedNicknameEventArgs.#ctor(ReferenceHub,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangedNicknameEventArgs"/> class.
            </summary>
            <param name="hub">The player whose nickname has changed.</param>
            <param name="oldNickname">The old nickname of the player.</param>
            <param name="newNickname">The new nickname of the player.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangedNicknameEventArgs.Player">
            <summary>
            Gets the player whose nickname has changed.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangedNicknameEventArgs.OldNickname">
            <summary>
            Gets the old nickname of the player.
            </summary>
            <remarks>Null means they did not have a custom display-name before.</remarks>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangedNicknameEventArgs.NewNickname">
            <summary>
            Gets the new nickname of the player.
            </summary>
            <remarks>Null means their regular name will be used.</remarks>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangedRadioRangeEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ChangedRadioRange"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerChangedRadioRangeEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Radio.RadioItem,InventorySystem.Items.Radio.RadioMessages.RadioRangeLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangedRadioRangeEventArgs"/> class.
            </summary>
            <param name="hub">The player who changed radio range.</param>
            <param name="radio">The radio item.</param>
            <param name="range">The new range level.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangedRadioRangeEventArgs.Player">
            <summary>
            Gets the player who changed radio range.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangedRadioRangeEventArgs.RadioItem">
            <summary>
            Gets the radio item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangedRadioRangeEventArgs.Range">
            <summary>
            Gets the new range level.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangedRadioRangeEventArgs.Radio">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangedRadioRangeEventArgs.RadioItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangedRoleEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ChangedRole"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerChangedRoleEventArgs.#ctor(ReferenceHub,PlayerRoles.RoleTypeId,PlayerRoles.PlayerRoleBase,PlayerRoles.RoleChangeReason,PlayerRoles.RoleSpawnFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangedRoleEventArgs"/> class.
            </summary>
            <param name="hub">The player whose role changed.</param>
            <param name="oldRole">The old role type.</param>
            <param name="newRole">The new role object of the player.</param>
            <param name="changeReason">The reason of role changed.</param>
            <param name="spawnFlags">The spawn flags used for this role change.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangedRoleEventArgs.Player">
            <summary>
            Gets the player whose role changed.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangedRoleEventArgs.OldRole">
            <summary>
            Gets the old role type.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangedRoleEventArgs.NewRole">
            <summary>
            Gets the new role object of the player.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangedRoleEventArgs.ChangeReason">
            <summary>
            Gets the reason of role changed.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangedRoleEventArgs.SpawnFlags">
            <summary>
            Gets the spawn flags used for this role change.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangedSpectatorEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ChangedSpectator"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerChangedSpectatorEventArgs.#ctor(ReferenceHub,ReferenceHub,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangedSpectatorEventArgs"/> class.
            </summary>
            <param name="hub">The player who changed spectator.</param>
            <param name="oldTarget">Old target that was spectated previously.</param>
            <param name="newTarget">New target that was spectating changed to.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangedSpectatorEventArgs.Player">
            <summary>
            Gets the player who changed spectator.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangedSpectatorEventArgs.OldTarget">
            <summary>
            Gets old target that was spectated previously.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangedSpectatorEventArgs.NewTarget">
            <summary>
            Gets the new target that was spectating changed to.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangingAttachmentsEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ChangingAttachments"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerChangingAttachmentsEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Firearms.Firearm,System.UInt32,System.UInt32)">
            <summary>
            Initialized a new instance of <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangingAttachmentsEventArgs"/>.
            </summary>
            <param name="player">The player who is changing the firearm attachments.</param>
            <param name="firearm">The firearm whose attachments are being changed.</param>
            <param name="oldAttachments">The old attachments code.</param>
            <param name="newAttachments">The new attachments code requested by the player.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingAttachmentsEventArgs.Player">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingAttachmentsEventArgs.FirearmItem">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingAttachmentsEventArgs.OldAttachments">
            <summary>
            Gets previous attachments code.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingAttachmentsEventArgs.NewAttachments">
            <summary>
            Gets or sets new attachments code.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingAttachmentsEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangingBadgeVisibilityEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ChangingBadgeVisibility"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerChangingBadgeVisibilityEventArgs.#ctor(ReferenceHub,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangingBadgeVisibilityEventArgs"/> class.
            </summary>
            <param name="hub">The <see cref="T:ReferenceHub"/> component of the player that is changing their badge visibility.</param>
            <param name="isGlobal">Whether the badge is a global badge.</param>
            <param name="newVisibility">The new visibility state.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingBadgeVisibilityEventArgs.Player">
            <summary>
            The player that is changing their badge visibility.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingBadgeVisibilityEventArgs.IsGlobalBadge">
            <summary>
            <see langword="true"/> if the badge is a global badge, otherwise it is a local badge.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingBadgeVisibilityEventArgs.NewVisibility">
            <summary>
            Whether the badge will be visible.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingBadgeVisibilityEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangingItemEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ChangingItem"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerChangingItemEventArgs.#ctor(ReferenceHub,InventorySystem.Items.ItemBase,InventorySystem.Items.ItemBase)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangingItemEventArgs"/> class.
            </summary>
            <param name="hub">The player who is changing item.</param>
            <param name="oldItem">The old item.</param>
            <param name="newItem">The new item that is being equipped.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingItemEventArgs.Player">
            <summary>
            Gets the player who is changing item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingItemEventArgs.OldItem">
            <summary>
            Gets the old item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingItemEventArgs.NewItem">
            <summary>
            Gets the new item that is being equipped.
            <para>Item is null if player is equipping nothing.</para>
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingItemEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangingNicknameEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ChangingNickname"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerChangingNicknameEventArgs.#ctor(ReferenceHub,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangingNicknameEventArgs"/> class.
            </summary>
            <param name="hub">The player whose nickname is changing.</param>
            <param name="oldNickname">The old nickname of the player.</param>
            <param name="newNickname">The new nickname of the player.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingNicknameEventArgs.Player">
            <summary>
            Gets the player whose role is changing.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingNicknameEventArgs.OldNickname">
            <summary>
            Gets the old nickname of the player.
            </summary>
            <remarks>Null means they did not have a custom display-name before.</remarks>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingNicknameEventArgs.NewNickname">
            <summary>
            Gets or sets the new nickname of the player.
            </summary>
            <remarks>Null means their regular name will be used.</remarks>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingNicknameEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangingRadioRangeEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ChangingRadioRange"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerChangingRadioRangeEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Radio.RadioItem,InventorySystem.Items.Radio.RadioMessages.RadioRangeLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangingRadioRangeEventArgs"/> class.
            </summary>
            <param name="hub">The player who is changing radio range.</param>
            <param name="radio">The radio item.</param>
            <param name="range">The range level that is radio being changed to.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingRadioRangeEventArgs.Player">
            <summary>
            Gets the player who is changing radio range.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingRadioRangeEventArgs.RadioItem">
            <summary>
            Gets the radio item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingRadioRangeEventArgs.Range">
            <summary>
            Gets the range level that is radio being changed to.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingRadioRangeEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingRadioRangeEventArgs.Radio">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingRadioRangeEventArgs.RadioItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangingRoleEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ChangingRole"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerChangingRoleEventArgs.#ctor(ReferenceHub,PlayerRoles.PlayerRoleBase,PlayerRoles.RoleTypeId,PlayerRoles.RoleChangeReason,PlayerRoles.RoleSpawnFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangingRoleEventArgs"/> class.
            </summary>
            <param name="hub">The player whose role is changing.</param>
            <param name="oldRole">The old role object of the player.</param>
            <param name="newRole">The new role type.</param>
            <param name="changeReason">The reason of role changing.</param>
            <param name="spawnFlags">The spawn flags for this role change.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingRoleEventArgs.Player">
            <summary>
            Gets the player whose role is changing.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingRoleEventArgs.OldRole">
            <summary>
            Gets the old role object of the player.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingRoleEventArgs.NewRole">
            <summary>
            Gets the new role type.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingRoleEventArgs.ChangeReason">
            <summary>
            Gets the reason of role change.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingRoleEventArgs.SpawnFlags">
            <summary>
            Gets or sets the spawn flags for this role change.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerChangingRoleEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerClosedGeneratorEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ClosedGenerator"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerClosedGeneratorEventArgs.#ctor(ReferenceHub,MapGeneration.Distributors.Scp079Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerClosedGeneratorEventArgs"/> class.
            </summary>
            <param name="hub">The player who closed the generator.</param>
            <param name="generator">The generator.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerClosedGeneratorEventArgs.Player">
            <summary>
            Gets the player who closed the generator.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerClosedGeneratorEventArgs.Generator">
            <summary>
            Gets the generator.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerClosingGeneratorEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ClosedGenerator"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerClosingGeneratorEventArgs.#ctor(ReferenceHub,MapGeneration.Distributors.Scp079Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerClosingGeneratorEventArgs"/> class.
            </summary>
            <param name="hub">The player who is closing the generator.</param>
            <param name="generator">The generator.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerClosingGeneratorEventArgs.Player">
            <summary>
            Gets the player who is closing the generator.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerClosingGeneratorEventArgs.Generator">
            <summary>
            Gets the generator.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerClosingGeneratorEventArgs.PlayDeniedAnimation">
            <summary>
            Gets or sets whether to play the denied permissions sound.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerClosingGeneratorEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerCuffedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Cuffed"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerCuffedEventArgs.#ctor(ReferenceHub,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerCuffedEventArgs"/> class.
            </summary>
            <param name="hub">The player who detained another one.</param>
            <param name="target">The player who was detained.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerCuffedEventArgs.Player">
            <summary>
            Gets the player who detained another one.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerCuffedEventArgs.Target">
            <summary>
            Gets the player who was detained.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerCuffingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Cuffing"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerCuffingEventArgs.#ctor(ReferenceHub,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerCuffingEventArgs"/> class.
            </summary>
            <param name="hub">The player who is detaining another one.</param>
            <param name="target">The player who is being detained.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerCuffingEventArgs.Player">
            <summary>
            Gets the player who is detaining another one.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerCuffingEventArgs.Target">
            <summary>
            Gets the player who is being detained.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerCuffingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerDamagedShootingTargetEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.DamagedShootingTarget"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerDamagedShootingTargetEventArgs.#ctor(ReferenceHub,AdminToys.ShootingTarget,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDamagedShootingTargetEventArgs"/> class.
            </summary>
            <param name="hub">The player who damaged the shooting target.</param>
            <param name="target">The shooting target.</param>
            <param name="damageHandler">The damage handler.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDamagedShootingTargetEventArgs.Player">
            <summary>
            Gets the player who damaged the shooting target.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDamagedShootingTargetEventArgs.ShootingTarget">
            <summary>
            Gets the shooting target.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDamagedShootingTargetEventArgs.DamageHandler">
            <summary>
            Gets the damage handler.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDamagedShootingTargetEventArgs.Target">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerDamagedShootingTargetEventArgs.ShootingTarget"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerDamagedWindowEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.DamagedWindow"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerDamagedWindowEventArgs.#ctor(ReferenceHub,BreakableWindow,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDamagedWindowEventArgs"/> class.
            </summary>
            <param name="hub">The player who damaged the window.</param>
            <param name="window">The window.</param>
            <param name="damageHandler">The damage handler.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDamagedWindowEventArgs.Player">
            <summary>
            Gets the player who damaged the window.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDamagedWindowEventArgs.Window">
            <summary>
            Gets the window.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDamagedWindowEventArgs.DamageHandler">
            <summary>
            Gets the damage handler.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerDamagingShootingTargetEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.DamagingShootingTarget"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerDamagingShootingTargetEventArgs.#ctor(ReferenceHub,AdminToys.ShootingTarget,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDamagingShootingTargetEventArgs"/> class.
            </summary>
            <param name="hub">The player who is damaging the shooting target.</param>
            <param name="target">The shooting target.</param>
            <param name="damageHandler">The damage handler.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDamagingShootingTargetEventArgs.Player">
            <summary>
            Gets the player who is damaging the shooting target.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDamagingShootingTargetEventArgs.ShootingTarget">
            <summary>
            Gets the shooting target.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDamagingShootingTargetEventArgs.DamageHandler">
            <summary>
            Gets the damage handler.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDamagingShootingTargetEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDamagingShootingTargetEventArgs.Target">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerDamagingShootingTargetEventArgs.ShootingTarget"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerDamagingWindowEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.DamagingWindow"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerDamagingWindowEventArgs.#ctor(ReferenceHub,BreakableWindow,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDamagingWindowEventArgs"/> class.
            </summary>
            <param name="hub">The player who is damaging the window.</param>
            <param name="window">The window.</param>
            <param name="damageHandler">The damage handler.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDamagingWindowEventArgs.Player">
            <summary>
            Gets the player who is damaging the window.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDamagingWindowEventArgs.Window">
            <summary>
            Gets the window.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDamagingWindowEventArgs.DamageHandler">
            <summary>
            Gets the damage handler.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDamagingWindowEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerDeactivatedGeneratorEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.DeactivatedGenerator"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerDeactivatedGeneratorEventArgs.#ctor(ReferenceHub,MapGeneration.Distributors.Scp079Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDeactivatedGeneratorEventArgs"/> class.
            </summary>
            <param name="hub">The player who deactivated the generator.</param>
            <param name="generator">The generator.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDeactivatedGeneratorEventArgs.Player">
            <summary>
            Gets the player who deactivated the generator.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDeactivatedGeneratorEventArgs.Generator">
            <summary>
            Gets the generator.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerDeactivatingGeneratorEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.DeactivatingGenerator"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerDeactivatingGeneratorEventArgs.#ctor(ReferenceHub,MapGeneration.Distributors.Scp079Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDeactivatingGeneratorEventArgs"/> class.
            </summary>
            <param name="hub">The player who is deactivating the generator.</param>
            <param name="generator">The generator.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDeactivatingGeneratorEventArgs.Player">
            <summary>
            Gets the player who is deactivating the generator.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDeactivatingGeneratorEventArgs.Generator">
            <summary>
            Gets the generator.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDeactivatingGeneratorEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerDeathEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Death"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerDeathEventArgs.#ctor(ReferenceHub,ReferenceHub,PlayerStatsSystem.DamageHandlerBase,PlayerRoles.RoleTypeId,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDeathEventArgs"/> class.
            </summary>
            <param name="hub">The player who died.</param>
            <param name="attacker">The player who caused the death.</param>
            <param name="damageHandler">The damage that caused the death.</param>
            <param name="oldRole">The previous role of the player before death.</param>
            <param name="oldPosition">The previous world position of the player before death.</param>
            <param name="oldVelocity">The previous velocity of the player before death.</param>
            <param name="oldCameraRotation">The previous world rotation of the players camera before death.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDeathEventArgs.Player">
            <summary>
            Gets the player who died.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDeathEventArgs.Attacker">
            <summary>
            Gets the player who caused the death.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDeathEventArgs.DamageHandler">
            <summary>
            Gets the damage that caused the death.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDeathEventArgs.OldRole">
            <summary>
            Gets the role of the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerDeathEventArgs.Player"/> before they had died.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDeathEventArgs.OldPosition">
            <summary>
            Gets the player's position before they died.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDeathEventArgs.OldVelocity">
            <summary>
            Gets the player's velocity before they died.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDeathEventArgs.OldCameraRotation">
            <summary>
            Gets the player's camera rotation before they died.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerDetectedByScp1344EventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.DetectedByScp1344"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerDetectedByScp1344EventArgs.#ctor(ReferenceHub,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDetectedByScp1344EventArgs"/> class.
            </summary>
            <param name="player">The player who has SCP-1344.</param>
            <param name="target">The player who has been detected.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDetectedByScp1344EventArgs.Player">
            <inheritdoc/>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDetectedByScp1344EventArgs.Target">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerDroppedAmmoEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.DroppedAmmo"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerDroppedAmmoEventArgs.#ctor(ReferenceHub,ItemType,System.Int32,InventorySystem.Items.Firearms.Ammo.AmmoPickup)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDroppedAmmoEventArgs"/> class.
            </summary>
            <param name="hub">The player who is dropping the ammo.</param>
            <param name="type">The type of ammo being dropped.</param>
            <param name="amount">The amount of ammo being dropped.</param>
            <param name="pickup">The ammo pickup.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDroppedAmmoEventArgs.Player">
            <summary>
            Gets the player who is dropping the ammo.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDroppedAmmoEventArgs.Type">
            <summary>
            Gets the type of ammo being dropped.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDroppedAmmoEventArgs.Amount">
            <summary>
            Gets the amount of ammo being dropped.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDroppedAmmoEventArgs.AmmoPickup">
            <summary>
            Gets the ammo pickup.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDroppedAmmoEventArgs.Pickup">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerDroppedAmmoEventArgs.AmmoPickup"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerDroppedItemEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.DroppedItem"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerDroppedItemEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Pickups.ItemPickupBase,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDroppedItemEventArgs"/> class.
            </summary>
            <param name="hub">The player who dropped the item.</param>
            <param name="pickup">The item pickup.</param>
            <param name="isThrowing">Whether the item will be thrown.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDroppedItemEventArgs.Player">
            <summary>
            Gets the player who dropped the item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDroppedItemEventArgs.Pickup">
            <summary>
            Gets the item pickup.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDroppedItemEventArgs.Throw">
            <summary>
            Gets or sets whether the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerDroppedItemEventArgs.Pickup"/> will be thrown by the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerDroppedItemEventArgs.Player"/>.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerDroppingAmmoEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.DroppingAmmo"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerDroppingAmmoEventArgs.#ctor(ReferenceHub,ItemType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDroppingAmmoEventArgs"/> class.
            </summary>
            <param name="hub">The player who is dropping the ammo.</param>
            <param name="type">The type of ammo being dropped.</param>
            <param name="amount">The amount of ammo being dropped.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDroppingAmmoEventArgs.Player">
            <summary>
            Gets or sets the player who is dropping the ammo.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDroppingAmmoEventArgs.Type">
            <summary>
            Gets or sets the type of ammo being dropped.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDroppingAmmoEventArgs.Amount">
            <summary>
            Gets or sets the amount of ammo being dropped.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDroppingAmmoEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerDroppingItemEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.DroppingItem"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerDroppingItemEventArgs.#ctor(ReferenceHub,InventorySystem.Items.ItemBase,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDroppingItemEventArgs"/> class.
            </summary>
            <param name="hub">The player who is dropping the item.</param>
            <param name="item">The item being dropped.</param>
            <param name="isThrowing">Whether the item will be thrown.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDroppingItemEventArgs.Player">
            <summary>
            Gets the player who is dropping the item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDroppingItemEventArgs.Item">
            <summary>
            Gets the item being dropped.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDroppingItemEventArgs.Throw">
            <summary>
            Gets or sets whether the <see cref="T:LabApi.Features.Wrappers.Pickup"/> will be thrown by the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerDroppingItemEventArgs.Player"/>.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDroppingItemEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerDryFiredWeaponEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.DryFiredWeapon"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerDryFiredWeaponEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Firearms.Firearm)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDryFiredWeaponEventArgs"/> class.
            </summary>
            <param name="hub">The player who dry fired.</param>
            <param name="weapon">The weapon item.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDryFiredWeaponEventArgs.Player">
            <summary>
            Gets the player who dry fired.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDryFiredWeaponEventArgs.FirearmItem">
            <summary>
            Gets the weapon item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDryFiredWeaponEventArgs.Weapon">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerDryFiredWeaponEventArgs.FirearmItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerDryFiringWeaponEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.DryFiringWeapon"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerDryFiringWeaponEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Firearms.Firearm)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDryFiringWeaponEventArgs"/> class.
            </summary>
            <param name="hub">The player who is dry firing.</param>
            <param name="weapon">The weapon item.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDryFiringWeaponEventArgs.Player">
            <summary>
            Gets the player who is dry firing.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDryFiringWeaponEventArgs.FirearmItem">
            <summary>
            Gets the weapon item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDryFiringWeaponEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDryFiringWeaponEventArgs.Weapon">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerDryFiringWeaponEventArgs.FirearmItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerDyingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Dying"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerDyingEventArgs.#ctor(ReferenceHub,ReferenceHub,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDyingEventArgs"/> class.
            </summary>
            <param name="hub">The player who is dying.</param>
            <param name="attacker">The player who attacked.</param>
            <param name="damageHandler">The damage handler who is causing death.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDyingEventArgs.Player">
            <summary>
            Gets the player who is dying.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDyingEventArgs.Attacker">
            <summary>
            Gets the player who attacked.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDyingEventArgs.DamageHandler">
            <summary>
            Gets the damage handler who is causing death.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerDyingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerEffectUpdatedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.UpdatedEffect"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerEffectUpdatedEventArgs.#ctor(ReferenceHub,CustomPlayerEffects.StatusEffectBase,System.Byte,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerReceivingLoadoutEventArgs"/> class.
            </summary>
            <param name="hub">The player whose effect has been updated.</param>
            <param name="effect">The effect that is being updated.</param>
            <param name="intensity">Intensity of the effect.</param>
            <param name="duration">Duration of the effect in seconds.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerEffectUpdatedEventArgs.Player">
            <summary>
            Gets the player whose effect has been updated.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerEffectUpdatedEventArgs.Effect">
            <summary>
            Gets the effect that is being updated.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerEffectUpdatedEventArgs.Intensity">
            <summary>
            Gets the new intensity of the effect.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerEffectUpdatedEventArgs.Duration">
            <summary>
            Gets the new duration of the effect in seconds.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerEffectUpdatingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.UpdatingEffect"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerEffectUpdatingEventArgs.#ctor(ReferenceHub,CustomPlayerEffects.StatusEffectBase,System.Byte,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerEffectUpdatingEventArgs"/> class.
            </summary>
            <param name="hub">The player whose effect is being updated.</param>
            <param name="effect">The effect that is being updated.</param>
            <param name="intensity">Intensity of the effect.</param>
            <param name="duration">Duration of the effect in seconds.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerEffectUpdatingEventArgs.Player">
            <summary>
            Gets the player whose effect is being updated.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerEffectUpdatingEventArgs.Effect">
            <summary>
            Gets the effect that is being updated.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerEffectUpdatingEventArgs.Intensity">
            <summary>
            Gets or sets the new intensity of the effect.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerEffectUpdatingEventArgs.Duration">
            <summary>
            Gets or sets the new duration of the effect in seconds.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerEffectUpdatingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerEnteredHazardEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.EnteredHazard"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerEnteredHazardEventArgs.#ctor(ReferenceHub,Hazards.EnvironmentalHazard)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerEnteringPocketDimensionEventArgs"/> class.
            </summary>
            <param name="hub">The player who entered the hazard.</param>
            <param name="hazard">The hazard.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerEnteredHazardEventArgs.Player">
            <summary>
            The player which entered the hazard.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerEnteredHazardEventArgs.Hazard">
            <summary>
            The target hazard.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerEnteredPocketDimensionEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.EnteredPocketDimension"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerEnteredPocketDimensionEventArgs.#ctor(ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerEnteredPocketDimensionEventArgs"/> class.
            </summary>
            <param name="hub">The player who entered the pocket dimension.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerEnteredPocketDimensionEventArgs.Player">
            <summary>
            Gets the player who entered the pocket dimension.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerEnteringHazardEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.EnteringHazard"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerEnteringHazardEventArgs.#ctor(ReferenceHub,Hazards.EnvironmentalHazard)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerEnteringPocketDimensionEventArgs"/> class.
            </summary>
            <param name="hub">The player who entered the hazard.</param>
            <param name="hazard">The hazard.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerEnteringHazardEventArgs.Player">
            <summary>
            The player which is entering the hazard.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerEnteringHazardEventArgs.Hazard">
            <summary>
            The target hazard.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerEnteringHazardEventArgs.IsAllowed">
            <summary>
            Gets or sets whether the event is allowed. Not allowing this event will cause the player to not be affected by the hazard.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerEnteringPocketDimensionEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.EnteringPocketDimension"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerEnteringPocketDimensionEventArgs.#ctor(ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerEnteringPocketDimensionEventArgs"/> class.
            </summary>
            <param name="hub">The player who is entering the pocket dimension.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerEnteringPocketDimensionEventArgs.Player">
            <summary>
            Gets the player who is entering the pocket dimension.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerEnteringPocketDimensionEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerEscapedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Escaped"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerEscapedEventArgs.#ctor(ReferenceHub,PlayerRoles.RoleTypeId,PlayerRoles.RoleTypeId,Escape.EscapeScenarioType,UnityEngine.Bounds)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerEscapedEventArgs"/> class.
            </summary>
            <param name="hub">The player who escaped.</param>
            <param name="newRole">The new role.</param>
            <param name="escapeScenarioType">The scenario of the escape.</param>
            <param name="oldRole">The old role of the player.</param>
            <param name="escapeZone">The bounds of the escape zone that was triggered.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerEscapedEventArgs.Player">
            <summary>
            Gets the player who escaped.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerEscapedEventArgs.OldRole">
            <summary>
            Gets the old role of the player.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerEscapedEventArgs.NewRole">
            <summary>
            Gets the new role.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerEscapedEventArgs.EscapeScenarioType">
            <summary>
            Escape scenario of the player.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerEscapedEventArgs.EscapeZone">
            <summary>
            The bounds of the escape zone that was triggered.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerEscapingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Escaping"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerEscapingEventArgs.#ctor(ReferenceHub,PlayerRoles.RoleTypeId,PlayerRoles.RoleTypeId,Escape.EscapeScenarioType,UnityEngine.Bounds)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerEscapingEventArgs"/> class.
            </summary>
            <param name="hub">The player who is escaping.</param>
            <param name="newRole">The new role that is set after escape.</param>
            <param name="escapeScenario">The scenario of the escape.</param>
            <param name="oldRole">The old role of the player.</param>
            <param name="escapeZone">The bounds of the escape zone that was triggered.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerEscapingEventArgs.Player">
            <summary>
            Gets the player who is escaping.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerEscapingEventArgs.OldRole">
            <summary>
            Gets the old role of the player.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerEscapingEventArgs.NewRole">
            <summary>
            Gets or sets the new role that is set after escape.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerEscapingEventArgs.EscapeScenario">
            <summary>
            Gets or sets the escape scenario.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerEscapingEventArgs.EscapeZone">
            <summary>
            The bounds of the escape zone that was triggered.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerEscapingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerFlippedCoinEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.FlippedCoin"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerFlippedCoinEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Coin.Coin,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerFlippingCoinEventArgs"/> class.
            </summary>
            <param name="hub">The player who flipped the coin.</param>
            <param name="coin">The coin that was flipped.</param>
            <param name="isTails">Whenever the coin flip is tails.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerFlippedCoinEventArgs.Player">
            <summary>
            The player who flipped the coin.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerFlippedCoinEventArgs.CoinItem">
            <summary>
            Gets the coin item which was flipped.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerFlippedCoinEventArgs.IsTails">
            <summary>
            Whenever the coin flip is tails.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerFlippedCoinEventArgs.Item">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerFlippedCoinEventArgs.CoinItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerFlippingCoinEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.FlippingCoin"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerFlippingCoinEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Coin.Coin,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerFlippingCoinEventArgs"/> class.
            </summary>
            <param name="hub">The player who is flipping the coin.</param>
            <param name="coin">The coin that is being flipped.</param>
            <param name="isTails">Whenever the coin flip is tails.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerFlippingCoinEventArgs.Player">
            <summary>
            Gets the player who is flipping the coin.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerFlippingCoinEventArgs.CoinItem">
            <summary>
            Gets the coin item that is going to be flipped.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerFlippingCoinEventArgs.IsTails">
            <summary>
            Gets whenever the coin flip is tails.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerFlippingCoinEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerFlippingCoinEventArgs.Item">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerFlippingCoinEventArgs.CoinItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerGroupChangedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.GroupChanged"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerGroupChangedEventArgs.#ctor(ReferenceHub,UserGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerGroupChangedEventArgs"/> class.
            </summary>
            <param name="hub">The player whose group changed.</param>
            <param name="group">The new group.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerGroupChangedEventArgs.Player">
            <summary>
            Gets the player whose group changed.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerGroupChangedEventArgs.Group">
            <inheritdoc cref="P:LabApi.Events.Arguments.Interfaces.IGroupEvent.Group"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerGroupChangingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.GroupChanging"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerGroupChangingEventArgs.#ctor(ReferenceHub,UserGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerGroupChangingEventArgs"/> class.
            </summary>
            <param name="hub">The player whose group is changing.</param>
            <param name="group">The new group.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerGroupChangingEventArgs.Player">
            <summary>
            Gets the player whose group is changing.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerGroupChangingEventArgs.Group">
            <summary>
            Gets or sets the new group.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerGroupChangingEventArgs.IsAllowed">
            <inheritdoc cref="P:LabApi.Events.Arguments.Interfaces.ICancellableEvent.IsAllowed"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerHurtEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Hurt"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerHurtEventArgs.#ctor(ReferenceHub,ReferenceHub,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerHurtEventArgs"/> class.
            </summary>
            <param name="attacker">The player who attacked.</param>
            <param name="victim">The player who was hurt.</param>
            <param name="damageHandler">The damage handler.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerHurtEventArgs.Player">
            <summary>
            Gets the player who was hurt.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerHurtEventArgs.Attacker">
            <summary>
            Gets the player who attacked.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerHurtEventArgs.DamageHandler">
            <summary>
            Gets the damage handler.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerHurtingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Hurting"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerHurtingEventArgs.#ctor(ReferenceHub,ReferenceHub,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerHurtingEventArgs"/> class.
            </summary>
            <param name="attacker">The player who is attacking.</param>
            <param name="victim">The player who is being attacked.</param>
            <param name="damageHandler">The damage handler.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerHurtingEventArgs.Player">
            <summary>
            Gets the player who is being hurt.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerHurtingEventArgs.Attacker">
            <summary>
            Gets the player who is attacking.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerHurtingEventArgs.DamageHandler">
            <summary>
            Gets the damage handler.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerHurtingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerIdledTeslaEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.IdledTesla"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerIdledTeslaEventArgs.#ctor(ReferenceHub,TeslaGate)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerIdledTeslaEventArgs"/> class.
            </summary>
            <param name="hub">The player who caused the tesla gate to idle.</param>
            <param name="gate">The tesla gate that is Idled.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerIdledTeslaEventArgs.Player">
            <summary>
            Gets the player who is causing a tesla gate to idle.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerIdledTeslaEventArgs.Tesla">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerIdlingTeslaEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.IdlingTesla"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerIdlingTeslaEventArgs.#ctor(ReferenceHub,TeslaGate)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerIdlingTeslaEventArgs"/> class.
            </summary>
            <param name="hub">The player who is causing a tesla gate to idle.</param>
            <param name="gate">The tesla gate that is idling.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerIdlingTeslaEventArgs.Player">
            <summary>
            Gets the player who is causing a tesla gate to idle.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerIdlingTeslaEventArgs.Tesla">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerIdlingTeslaEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerInspectedKeycardEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InspectedKeycard"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerInspectedKeycardEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Keycards.KeycardItem)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInspectingKeycardEventArgs"/> class.
            </summary>
            <param name="hub">The player who inspected the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerInspectedKeycardEventArgs.KeycardItem"/>.</param>
            <param name="keycardItem">The keycard item.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInspectedKeycardEventArgs.Player">
            <summary>
            Gets the player who inspected the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerInspectedKeycardEventArgs.KeycardItem"/>.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInspectedKeycardEventArgs.KeycardItem">
            <summary>
            Gets the keycard item.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerInspectingKeycardEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InspectingKeycard"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerInspectingKeycardEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Keycards.KeycardItem)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInspectingKeycardEventArgs"/> class.
            </summary>
            <param name="hub">The player who wants to inspect the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerInspectingKeycardEventArgs.KeycardItem"/>.</param>
            <param name="keycardItem">The keycard item.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInspectingKeycardEventArgs.Player">
            <summary>
            Gets the player who wants to inspect <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerInspectingKeycardEventArgs.KeycardItem"/>.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInspectingKeycardEventArgs.KeycardItem">
            <summary>
            Gets the keycard item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInspectingKeycardEventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedDoorEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractedDoor"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedDoorEventArgs.#ctor(ReferenceHub,Interactables.Interobjects.DoorUtils.DoorVariant,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedDoorEventArgs"/> class.
            </summary>
            <param name="hub">The player who is interacting with the door.</param>
            <param name="door">The door that is being interacted with.</param>
            <param name="canOpen">Whenever player can open the door.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedDoorEventArgs.Player">
            <summary>
            Gets the player who is interacting with the door.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedDoorEventArgs.Door">
            <summary>
            Gets the door that is being interacted with.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedDoorEventArgs.CanOpen">
            <summary>
            Gets boolean whether player can open the door.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedElevatorEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractedDoor"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedElevatorEventArgs.#ctor(ReferenceHub,Interactables.Interobjects.ElevatorChamber,Interactables.Interobjects.ElevatorPanel)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedElevatorEventArgs"/> class.
            </summary>
            <param name="hub">The player who interacted with elevator panel.</param>
            <param name="elevator">The elevator chamber.</param>
            <param name="panel">The elevator panel that was interaction done with.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedElevatorEventArgs.Player">
            <summary>
            Gets the player who interacted with elevator panel.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedElevatorEventArgs.Elevator">
            <summary>
            Gets the elevator chamber.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedElevatorEventArgs.Panel">
            <summary>
            Gets the elevator panel that was interaction done with.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedGeneratorEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractedGenerator"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedGeneratorEventArgs.#ctor(ReferenceHub,MapGeneration.Distributors.Scp079Generator,MapGeneration.Distributors.Scp079Generator.GeneratorColliderId)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedGeneratorEventArgs"/> class.
            </summary>
            <param name="hub">The player who interacted with the generator.</param>
            <param name="generator">The generator object.</param>
            <param name="colliderId">The collider ID.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedGeneratorEventArgs.Player">
            <summary>
            Gets the player who interacted with the generator.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedGeneratorEventArgs.Generator">
            <summary>
            Gets the generator object.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedGeneratorEventArgs.ColliderId">
            <summary>
            Gets the collider ID.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedLockerEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractedLocker"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedLockerEventArgs.#ctor(ReferenceHub,MapGeneration.Distributors.Locker,MapGeneration.Distributors.LockerChamber,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedLockerEventArgs"/> class.
            </summary>
            <param name="hub">The player who is interacted with the locker.</param>
            <param name="locker">The locker that was interacted with.</param>
            <param name="chamber">The chamber that was targeted.</param>
            <param name="canOpen">Whether the player was allowed to open it.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedLockerEventArgs.Player">
            <summary>
            Gets the player who is interacted with the locker.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedLockerEventArgs.Locker">
            <summary>
            Gets the locker that was interacted with.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedLockerEventArgs.Chamber">
            <summary>
            Gets the chamber that was targeted.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedLockerEventArgs.CanOpen">
            <summary>
            Gets the boolean whether the player was allowed to open it.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedScp330EventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractedScp330"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedScp330EventArgs.#ctor(ReferenceHub,System.Int32,System.Boolean,System.Boolean,InventorySystem.Items.Usables.Scp330.CandyKindID)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedScp330EventArgs"/> class.
            </summary>
            <param name="hub">The player who interacted with SCP-330.</param>
            <param name="uses">The amount of uses that target player did.</param>
            <param name="playSound">Whenever pickup sound should have been.</param>
            <param name="allowPunishment">Whenever the <see cref="T:CustomPlayerEffects.SeveredHands"/> effect was applied.</param>
            <param name="type">Type of the candy which was given to the player.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedScp330EventArgs.Player">
            <summary>
            Gets the player who interacted with SCP-330.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedScp330EventArgs.Uses">
            <summary>
            Gets the amount of uses that target player did.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedScp330EventArgs.PlaySound">
            <summary>
            Gets the boolean whenever pickup sound has been played.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedScp330EventArgs.AllowPunishment">
            <summary>
            Gets the bool value whether the <see cref="T:CustomPlayerEffects.SeveredHands"/> effect was applied.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedScp330EventArgs.CandyType">
            <summary>
            Gets the type of the candy that has been given to the player.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedShootingTargetEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractedShootingTarget"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedShootingTargetEventArgs.#ctor(ReferenceHub,AdminToys.ShootingTarget)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedShootingTargetEventArgs"/> class.
            </summary>
            <param name="hub">The player who interacted with the target.</param>
            <param name="target">The shooting target.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedShootingTargetEventArgs.Player">
            <summary>
            Gets the player who interacted with the target.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedShootingTargetEventArgs.ShootingTarget">
            <summary>
            Gets the shooting target.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedShootingTargetEventArgs.Target">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedShootingTargetEventArgs.ShootingTarget"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedToyEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractedToy"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedToyEventArgs.#ctor(ReferenceHub,AdminToys.InvisibleInteractableToy)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedToyEventArgs"/> class.
            </summary>
            <param name="hub">The player who interacted with the toy.</param>
            <param name="toy">The toy instance that was interacted with.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedToyEventArgs.Player">
            <summary>
            Gets the player that interacted with the toy.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedToyEventArgs.Interactable">
            <summary>
            Gets the toy the player interacted with.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedWarheadLeverEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractedWarheadLever"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedWarheadLeverEventArgs.#ctor(ReferenceHub,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedWarheadLeverEventArgs"/> class.
            </summary>
            <param name="player">The player who interacted with the lever.</param>
            <param name="enabled">Bool whether the warhead is enabled and can be started.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedWarheadLeverEventArgs.Player">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedWarheadLeverEventArgs.Enabled">
            <summary>
            Gets whether the warhead is now enabled.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingDoorEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractingDoor"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingDoorEventArgs.#ctor(ReferenceHub,Interactables.Interobjects.DoorUtils.DoorVariant,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingDoorEventArgs"/> class.
            </summary>
            <param name="hub">The player who is interacting with the door.</param>
            <param name="door">The door that is being interacted with.</param>
            <param name="canOpen">Whenever player can open the door.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingDoorEventArgs.Player">
            <summary>
            Gets the player who is interacting with the door.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingDoorEventArgs.Door">
            <summary>
            Gets the door that is being interacted with.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingDoorEventArgs.CanOpen">
            <summary>
            Gets whether player can open the door.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingDoorEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingElevatorEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractingElevator"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingElevatorEventArgs.#ctor(ReferenceHub,Interactables.Interobjects.ElevatorChamber,Interactables.Interobjects.ElevatorPanel)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingElevatorEventArgs"/> class.
            </summary>
            <param name="hub">The player who is interacting with the elevator.</param>
            <param name="elevator">The elevator.</param>
            <param name="panel">The elevator panel.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingElevatorEventArgs.Player">
            <summary>
            Gets the player who is interacting with the elevator.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingElevatorEventArgs.Elevator">
            <summary>
            Gets the elevator.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingElevatorEventArgs.Panel">
            <summary>
            Gets the elevator panel.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingElevatorEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingGeneratorEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractingGenerator"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingGeneratorEventArgs.#ctor(ReferenceHub,MapGeneration.Distributors.Scp079Generator,MapGeneration.Distributors.Scp079Generator.GeneratorColliderId)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingGeneratorEventArgs"/> class.
            </summary>
            <param name="hub">The player who is interacting with the generator.</param>
            <param name="generator">The generator object.</param>
            <param name="colliderId">The collider ID.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingGeneratorEventArgs.Player">
            <summary>
            Gets the player who is interacting with the generator.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingGeneratorEventArgs.Generator">
            <summary>
            Gets the generator object.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingGeneratorEventArgs.ColliderId">
            <summary>
            Gets the collider ID.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingGeneratorEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingLockerEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractingLocker"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingLockerEventArgs.#ctor(ReferenceHub,MapGeneration.Distributors.Locker,MapGeneration.Distributors.LockerChamber,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingLockerEventArgs"/> class.
            </summary>
            <param name="hub">The player who is interacting with the locker.</param>
            <param name="locker">The locker that is being interacted with.</param>
            <param name="chamber">The chamber that is being targeted.</param>
            <param name="canOpen">Whether the player is allowed to open it.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingLockerEventArgs.Player">
            <summary>
            Gets the player who is interacting with the locker.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingLockerEventArgs.Locker">
            <summary>
            Gets the locker that is being interacted with.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingLockerEventArgs.Chamber">
            <summary>
            Gets the chamber that is being targeted.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingLockerEventArgs.CanOpen">
            <summary>
            Gets whether the player is allowed to open it.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingLockerEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingScp330EventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractingScp330"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingScp330EventArgs.#ctor(ReferenceHub,System.Int32,System.Boolean,System.Boolean,InventorySystem.Items.Usables.Scp330.CandyKindID)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingScp330EventArgs"/> class.
            </summary>
            <param name="hub">The player who is interacting with SCP-330.</param>
            <param name="uses">The amount of uses that target player did.</param>
            <param name="playSound">Whenever the sound should be played of pickup up candy.</param>
            <param name="allowPunishment">Whenever the <see cref="T:CustomPlayerEffects.SeveredHands"/> effect should be applied.</param>
            <param name="type">Type of the candy which will be given to the player.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingScp330EventArgs.Player">
            <summary>
            Gets the player who is interacting with SCP-330.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingScp330EventArgs.Uses">
            <summary>
            Gets or sets the amount of uses that target player did.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingScp330EventArgs.PlaySound">
            <summary>
            Gets or sets whether the sound should be played of pickup up candy.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingScp330EventArgs.AllowPunishment">
            <summary>
            Gets whether the <see cref="T:CustomPlayerEffects.SeveredHands"/> effect should be applied.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingScp330EventArgs.CandyType">
            <summary>
            Gets or sets the type of the candy that is given to the player.
            <para>
            Set <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingScp330EventArgs.IsAllowed"/> or this to <see cref="F:InventorySystem.Items.Usables.Scp330.CandyKindID.None"/> if you don't want to give candy to the player.
            </para>
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingScp330EventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingShootingTargetEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractingShootingTarget"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingShootingTargetEventArgs.#ctor(ReferenceHub,AdminToys.ShootingTarget)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingShootingTargetEventArgs"/> class.
            </summary>
            <param name="hub">The player who is interacting with the target.</param>
            <param name="target">The shooting target.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingShootingTargetEventArgs.Player">
            <summary>
            Gets the player who is interacting with the target.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingShootingTargetEventArgs.ShootingTarget">
            <summary>
            Gets the shooting target.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingShootingTargetEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingShootingTargetEventArgs.Target">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingShootingTargetEventArgs.ShootingTarget"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingWarheadLeverEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractingWarheadLever"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingWarheadLeverEventArgs.#ctor(ReferenceHub,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedWarheadLeverEventArgs"/> class.
            </summary>
            <param name="player">The player who is interacting with the lever.</param>
            <param name="enabled">Bool whether the warhead should be enabled and can be started.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingWarheadLeverEventArgs.Player">
            <inheritdoc/>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingWarheadLeverEventArgs.Enabled">
            <summary>
            Gets or sets whether the warhead should be enabled.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingWarheadLeverEventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerItemUsageEffectsApplyingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ItemUsageEffectsApplying"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerItemUsageEffectsApplyingEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Usables.UsableItem)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerItemUsageEffectsApplyingEventArgs"/> class.
            </summary>
            <param name="hub">The <see cref="T:ReferenceHub"/> component of the player using the item.</param>
            <param name="item">The item that is being used.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerItemUsageEffectsApplyingEventArgs.Player">
            <summary>
            Gets the player using the item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerItemUsageEffectsApplyingEventArgs.UsableItem">
            <summary>
            Gets the item that is being used.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerItemUsageEffectsApplyingEventArgs.ContinueProcess">
            <summary>
            Get or sets whether or not to continue the using item process when the event is canceled.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerItemUsageEffectsApplyingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerJoinedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Joined"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerJoinedEventArgs.#ctor(ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerJoinedEventArgs"/> class.
            </summary>
            <param name="hub">The player who joined.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerJoinedEventArgs.Player">
            <summary>
            Gets the player who joined.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerJumpedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Jumped"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerJumpedEventArgs.#ctor(ReferenceHub,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerJumpedEventArgs"/> class.
            </summary>
            <param name="hub">The player who jumped.</param>
            <param name="jumpStrength">Strength of the jump.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerJumpedEventArgs.Player">
            <inheritdoc/>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerJumpedEventArgs.JumpStrength">
            <summary>
            Gets the strength of the jump.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerKickedEventArgs">
            <summary>
            Represents the arguments for the <see cref="M:LabApi.Events.Handlers.PlayerEvents.OnKicked(LabApi.Events.Arguments.PlayerEvents.PlayerKickedEventArgs)"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerKickedEventArgs.#ctor(ReferenceHub,ReferenceHub,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerKickedEventArgs"/> class.
            </summary>
            <param name="hub">The player who was kicked.</param>
            <param name="issuer">The player who issued the kick.</param>
            <param name="reason">The reason for which is player being kicked.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerKickedEventArgs.Player">
            <summary>
            Gets the player who was kicked.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerKickedEventArgs.Issuer">
            <summary>
            Gets the player who issued the kick.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerKickedEventArgs.Reason">
            <summary>
            Gets the reason for which is player being kicked.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerKickingEventArgs">
            <summary>
            Represents the arguments for the <see cref="M:LabApi.Events.Handlers.PlayerEvents.OnKicking(LabApi.Events.Arguments.PlayerEvents.PlayerKickingEventArgs)"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerKickingEventArgs.#ctor(ReferenceHub,ReferenceHub,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerKickingEventArgs"/> class.
            </summary>
            <param name="hub">The player who is being kicked.</param>
            <param name="issuer">The player who is issuing the kick.</param>
            <param name="reason">The reason for which is player being kicked.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerKickingEventArgs.Player">
            <summary>
            Gets the player who is being kicked.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerKickingEventArgs.Issuer">
            <summary>
            Gets the player who is issuing the kick.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerKickingEventArgs.Reason">
            <summary>
            Gets the reason for which is player being kicked.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerKickingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerLeavingHazardEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.LeavingHazard"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerLeavingHazardEventArgs.#ctor(ReferenceHub,Hazards.EnvironmentalHazard)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerLeavingHazardEventArgs"/> class.
            </summary>
            <param name="hub">The player who is leaving.</param>
            <param name="hazard">The hazard that the player is leaving.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerLeavingHazardEventArgs.Player">
            <summary>
            Gets the player who is attempting to leave the hazard.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerLeavingHazardEventArgs.Hazard">
            <summary>
            Gets the hazard the player is attempting to leave.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerLeavingHazardEventArgs.IsAllowed">
            <summary>
            Gets or sets whether the player is allowed to leave the hazard.
            Setting this to false will result in player keeping the hazard effects and the event will be fired again until it is allowed or the player is back within the hazard's range.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerLeavingPocketDimensionEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.LeavingPocketDimension"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerLeavingPocketDimensionEventArgs.#ctor(ReferenceHub,PocketDimensionTeleport,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerLeavingPocketDimensionEventArgs"/> class.
            </summary>
            <param name="hub">The player who is trying to leave from pocket dimension.</param>
            <param name="teleport">The teleport the player collided with.</param>
            <param name="isSuccessful">Whether it is gonna be success.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerLeavingPocketDimensionEventArgs.Player">
            <summary>
            Gets the player who is trying to leave from pocket dimension.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerLeavingPocketDimensionEventArgs.Teleport">
            <summary>
            Gets the teleport the player collided with.
            </summary>
            <remarks>
            Can be null if exit was forced by a plugin.
            </remarks>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerLeavingPocketDimensionEventArgs.IsSuccessful">
            <summary>
            Gets or sets whether it is going to be success.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerLeavingPocketDimensionEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerLeftEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Left"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerLeftEventArgs.#ctor(ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerLeftEventArgs"/> class.
            </summary>
            <param name="hub">The player who left.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerLeftEventArgs.Player">
            <summary>
            Gets the player who left.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerLeftHazardEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.LeftHazard"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerLeftHazardEventArgs.#ctor(ReferenceHub,Hazards.EnvironmentalHazard)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerLeftHazardEventArgs"/> class.
            </summary>
            <param name="hub">The player who left the hazard.</param>
            <param name="hazard">The hazard that the player left.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerLeftHazardEventArgs.Player">
            <summary>
            Gets the player who left the hazard.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerLeftHazardEventArgs.Hazard">
            <summary>
            Gets the hazard that the player has left.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerLeftPocketDimensionEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.LeftPocketDimension"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerLeftPocketDimensionEventArgs.#ctor(ReferenceHub,PocketDimensionTeleport,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerLeftPocketDimensionEventArgs"/> class.
            </summary>
            <param name="hub">The player who tried to left pocket dimension.</param>
            <param name="teleport">The teleport the player collided with.</param>
            <param name="isSuccessful">Whether the escape was successful.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerLeftPocketDimensionEventArgs.Player">
            <summary>
            Gets the player who tried to left pocket dimension.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerLeftPocketDimensionEventArgs.Teleport">
            <summary>
            Gets the teleport the player collided with.
            </summary>
            <remarks>
            Can be null if exit was forced by a plugin.
            </remarks>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerLeftPocketDimensionEventArgs.IsSuccessful">
            <summary>
            Gets whether the escape was successful.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerMovementStateChangedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.MovementStateChanged"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerMovementStateChangedEventArgs.#ctor(ReferenceHub,PlayerRoles.FirstPersonControl.PlayerMovementState,PlayerRoles.FirstPersonControl.PlayerMovementState)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerMovementStateChangedEventArgs"/> class.
            </summary>
            <param name="hub">The player whose movement state has changed.</param>
            <param name="oldState">Old movement state of the player.</param>
            <param name="newState">New movement state of the player.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerMovementStateChangedEventArgs.Player">
            <inheritdoc/>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerMovementStateChangedEventArgs.OldState">
            <summary>
            Gets the old movement state.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerMovementStateChangedEventArgs.NewState">
            <summary>
            Gets the new movement state.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerMutedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Muted"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerMutedEventArgs.#ctor(ReferenceHub,ReferenceHub,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerMutedEventArgs"/> class.
            </summary>
            <param name="hub">The player who was muted.</param>
            <param name="issuer">The player who issued the mute.</param>
            <param name="isIntercom">Whenever mute was applied to intercom.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerMutedEventArgs.Player">
            <summary>
            Gets the player who was muted.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerMutedEventArgs.Issuer">
            <summary>
            Gets the player who issued the mute.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerMutedEventArgs.IsIntercom">
            <summary>
            Gets whether mute was applied to intercom.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerMutingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Muting"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerMutingEventArgs.#ctor(ReferenceHub,ReferenceHub,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerMutingEventArgs"/> class.
            </summary>
            <param name="hub">The player who is being muted.</param>
            <param name="issuer">The player who is issuing the mute.</param>
            <param name="isIntercom">Whenever mute is being applied to intercom.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerMutingEventArgs.Player">
            <summary>
            Gets the player who is being muted.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerMutingEventArgs.Issuer">
            <summary>
            Gets the player who is issuing the mute.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerMutingEventArgs.IsIntercom">
            <summary>
            Gets whether mute is being applied to intercom.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerMutingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerOpenedGeneratorEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.OpenedGenerator"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerOpenedGeneratorEventArgs.#ctor(ReferenceHub,MapGeneration.Distributors.Scp079Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerOpenedGeneratorEventArgs"/> class.
            </summary>
            <param name="hub">The player who opened the generator.</param>
            <param name="generator">The generator that was opened.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerOpenedGeneratorEventArgs.Player">
            <summary>
            Gets the player who opened the generator.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerOpenedGeneratorEventArgs.Generator">
            <summary>
            Gets the generator that was opened.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerOpeningGeneratorEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.OpeningGenerator"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerOpeningGeneratorEventArgs.#ctor(ReferenceHub,MapGeneration.Distributors.Scp079Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerOpeningGeneratorEventArgs"/> class.
            </summary>
            <param name="hub">The player who is opening the generator.</param>
            <param name="generator">The generator.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerOpeningGeneratorEventArgs.Player">
            <summary>
            Gets the player who is opening the generator.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerOpeningGeneratorEventArgs.Generator">
            <summary>
            Gets the generator.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerOpeningGeneratorEventArgs.PlayDeniedAnimation">
            <summary>
            Gets or sets whether to play the denied permissions sound.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerOpeningGeneratorEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpAmmoEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.PickedUpAmmo"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpAmmoEventArgs.#ctor(ReferenceHub,ItemType,System.UInt16,InventorySystem.Items.Firearms.Ammo.AmmoPickup)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpAmmoEventArgs"/> class.
            </summary>
            <param name="hub">The player that picked up the ammo.</param>
            <param name="ammoType">Type of the ammo.</param>
            <param name="ammoAmount">The amount that is was picked up.</param>
            <param name="pickup">The pickup object.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpAmmoEventArgs.Player">
            <summary>
            Gets the player that picked up the ammo.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpAmmoEventArgs.AmmoType">
            <summary>
            Gets type of the ammo.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpAmmoEventArgs.AmmoAmount">
            <summary>
            Gets the amount that is was picked up.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpAmmoEventArgs.AmmoPickup">
            <summary>
            Gets the ammo pickup object.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpAmmoEventArgs.Pickup">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpAmmoEventArgs.AmmoPickup"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpArmorEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.PickedUpArmor"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpArmorEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Armor.BodyArmor)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpArmorEventArgs"/> class.
            </summary>
            <param name="hub">The player who picked up armor.</param>
            <param name="armor">The armor that was picked up.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpArmorEventArgs.Player">
            <summary>
            Gets the player who picked up armor.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpArmorEventArgs.BodyArmorItem">
            <summary>
            Gets the armor that was picked up.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpArmorEventArgs.Item">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpArmorEventArgs.BodyArmorItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpItemEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.PickedUpItem"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpItemEventArgs.#ctor(ReferenceHub,InventorySystem.Items.ItemBase)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpItemEventArgs"/> class.
            </summary>
            <param name="hub">The player who picked up the item.</param>
            <param name="item">The item that was picked up.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpItemEventArgs.Player">
            <summary>
            Gets the player who picked up the item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpItemEventArgs.Item">
            <summary>
            Gets the item that was picked up.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpScp330EventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.PickedUpScp330"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpScp330EventArgs.#ctor(ReferenceHub,InventorySystem.Items.Usables.Scp330.Scp330Pickup,InventorySystem.Items.Usables.Scp330.Scp330Bag)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpScp330EventArgs"/> class.
            </summary>
            <param name="hub">The player who picked up SCP-330.</param>
            <param name="pickup">The pickup item.</param>
            <param name="item">SCP-330 bag item of the player.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpScp330EventArgs.Player">
            <summary>
            Gets the player who picked up SCP-330.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpScp330EventArgs.CandyPickup">
            <summary>
            Gets the SCP-330 pickup.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpScp330EventArgs.CandyItem">
            <summary>
            Gets the SCP-330 bag item of the player.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpScp330EventArgs.Pickup">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpScp330EventArgs.CandyPickup"/>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpScp330EventArgs.Item">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpScp330EventArgs.CandyItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpAmmoEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.PickingUpAmmo"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpAmmoEventArgs.#ctor(ReferenceHub,ItemType,System.UInt16,InventorySystem.Items.Firearms.Ammo.AmmoPickup)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpAmmoEventArgs"/> class.
            </summary>
            <param name="hub">The player who is pickup the ammo pickup.</param>
            <param name="ammoType">Type of the ammo.</param>
            <param name="ammoAmount">Amount of ammo that is being picked up.</param>
            <param name="pickup">Ammo pickup.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpAmmoEventArgs.Player">
            <summary>
            Gets the player who is picking up the ammo pickup.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpAmmoEventArgs.AmmoType">
            <summary>
            Gets type of the ammo.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpAmmoEventArgs.AmmoAmount">
            <summary>
            Gets the amount of ammo that is being picked up.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpAmmoEventArgs.AmmoPickup">
            <summary>
            Gets the ammo pickup.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpAmmoEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpAmmoEventArgs.Pickup">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpAmmoEventArgs.AmmoPickup"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpArmorEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.PickingUpArmor"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpArmorEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Armor.BodyArmorPickup)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpArmorEventArgs"/> class.
            </summary>
            <param name="hub">The player who picked up the armor.</param>
            <param name="pickup">The armor pickup.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpArmorEventArgs.Player">
            <summary>
            Gets the player who picked up the armor.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpArmorEventArgs.BodyArmorPickup">
            <summary>
            Gets the armor pickup.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpArmorEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpArmorEventArgs.Pickup">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpArmorEventArgs.BodyArmorPickup"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpItemEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.PickingUpItem"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpItemEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Pickups.ItemPickupBase)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpItemEventArgs"/> class.
            </summary>
            <param name="hub">The player who picked up the item.</param>
            <param name="pickup">The item pickup.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpItemEventArgs.Player">
            <summary>
            Gets the player who picked up the item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpItemEventArgs.Pickup">
            <summary>
            Gets the item pickup.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpItemEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpScp330EventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.PickingUpScp330"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpScp330EventArgs.#ctor(ReferenceHub,InventorySystem.Items.Usables.Scp330.Scp330Pickup)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpScp330EventArgs"/> class.
            </summary>
            <param name="hub">The player who is picking up SCP-330.</param>
            <param name="pickup">The SCP-330 pickup.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpScp330EventArgs.Player">
            <summary>
            Gets the player who is picking up SCP-330.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpScp330EventArgs.CandyPickup">
            <summary>
            Gets the SCP-330 pickup.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpScp330EventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpScp330EventArgs.Pickup">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpScp330EventArgs.CandyPickup"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerPlacedBloodEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.PlacedBlood"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerPlacedBloodEventArgs.#ctor(ReferenceHub,ReferenceHub,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerPlacedBloodEventArgs"/> class.
            </summary>
            <param name="hub">The player whose blood it is.</param>
            <param name="attacker">The player that attacked.</param>
            <param name="hitPosition">Position at which blood has been spawned.</param>
            <param name="startRaycast">Position where the blood decal raycast will start for it to be properly attached to surface.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPlacedBloodEventArgs.Player">
            <summary>
            Gets the player whose blood it is.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPlacedBloodEventArgs.Attacker">
            <summary>
            Gets the player that attacked the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerPlacedBloodEventArgs.Player"/>.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPlacedBloodEventArgs.HitPosition">
            <summary>
            Gets the position at which blood has been spawned.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPlacedBloodEventArgs.RaycastStart">
            <summary>
            Gets or sets the position where the blood decal raycast will start for it to be properly attached to surface.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerPlacedBulletHoleEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.PlacedBulletHole"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerPlacedBulletHoleEventArgs.#ctor(ReferenceHub,Decals.DecalPoolType,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerPlacedBulletHoleEventArgs"/> class.
            </summary>
            <param name="hub">The player who caused this bullet hole.</param>
            <param name="type">Decal type which has spawned.</param>
            <param name="hitPosition">Position at which bullet hole has spawned.</param>
            <param name="startRaycast">Position where the bullet hole raycast has started for it to be properly attached to surface.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPlacedBulletHoleEventArgs.Player">
            <summary>
            Gets the player who caused this bullet hole.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPlacedBulletHoleEventArgs.DecalType">
            <summary>
            Gets or sets the decal type to be spawned.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPlacedBulletHoleEventArgs.HitPosition">
            <summary>
            Gets the position at which bullet hole has spawned.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPlacedBulletHoleEventArgs.RaycastStart">
            <summary>
            Gets or sets the position where the bullet hole raycast will start for it to be properly attached to surface.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerPlacingBloodEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.PlacingBlood"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerPlacingBloodEventArgs.#ctor(ReferenceHub,ReferenceHub,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerPlacingBloodEventArgs"/> class.
            </summary>
            <param name="hub">The player whose blood it is.</param>
            <param name="attacker">The player that attacked.</param>
            <param name="hitPosition">Position at which is blood being placed.</param>
            <param name="startRaycast">Position where the blood decal raycast will start for it to be properly attached to surface.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPlacingBloodEventArgs.Player">
            <summary>
            Gets the player whose blood it is.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPlacingBloodEventArgs.Attacker">
            <summary>
            Gets the player that attacked the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerPlacingBloodEventArgs.Player"/>.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPlacingBloodEventArgs.HitPosition">
            <summary>
            Gets the position at which is blood being placed.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPlacingBloodEventArgs.RaycastStart">
            <summary>
            Gets or sets the position where the blood decal raycast will start for it to be properly attached to surface.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPlacingBloodEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerPlacingBulletHoleEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.PlacingBulletHole"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerPlacingBulletHoleEventArgs.#ctor(ReferenceHub,Decals.DecalPoolType,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerPlacingBulletHoleEventArgs"/> class.
            </summary>
            <param name="hub">The player who caused it.</param>
            <param name="type">Decal type to be spawned.</param>
            <param name="hitPosition">Position at which is bullet hole being placed.</param>
            <param name="startRaycast">Position where the bullet hole raycast will start for it to be properly attached to surface.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPlacingBulletHoleEventArgs.Player">
            <summary>
            Gets the player who caused it.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPlacingBulletHoleEventArgs.DecalType">
            <summary>
            Gets or sets the decal type to be spawned.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPlacingBulletHoleEventArgs.HitPosition">
            <summary>
            Gets the position at which is bullet hole being placed.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPlacingBulletHoleEventArgs.RaycastStart">
            <summary>
            Gets or sets the position where the bullet hole raycast will start for it to be properly attached to surface.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPlacingBulletHoleEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.PreAuthenticated"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatedEventArgs.#ctor(System.String,System.String,System.Int64,CentralAuthPreauthFlags,System.String,System.Byte[],LiteNetLib.ConnectionRequest,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatedEventArgs"/> class.
            </summary>
            <param name="userId">User ID of the player.</param>
            <param name="ipAddress">IP Address the of player.</param>
            <param name="expiration">Expiration of the authentication.</param>
            <param name="flags">Pre-authentication flags.</param>
            <param name="region">Region of the origin.</param>
            <param name="signature">Signature of auth.</param>
            <param name="connectionRequest">Connection request to server.</param>
            <param name="readerStartPosition">Start position of stream.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatedEventArgs.UserId">
            <summary>
            Gets the user ID of the player.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatedEventArgs.IpAddress">
            <summary>
            Gets the IP Address of the player.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatedEventArgs.Expiration">
            <summary>
            Gets the expiration of the authentication.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatedEventArgs.Flags">
            <summary>
            Gets the pre-authentication flags.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatedEventArgs.Region">
            <summary>
            Gets the region of the origin.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatedEventArgs.Signature">
            <summary>
            Gets the signature of auth.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatedEventArgs.ConnectionRequest">
            <summary>
            Gets the connection request to server.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatedEventArgs.ReaderStartPosition">
            <summary>
            Gets the start position of stream.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.PreAuthenticating"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatingEventArgs.#ctor(System.Boolean,System.String,System.String,System.Int64,CentralAuthPreauthFlags,System.String,System.Byte[],LiteNetLib.ConnectionRequest,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatingEventArgs"/> class.
            </summary>
            <param name="canJoin">Whether the player can join.</param>
            <param name="userId">User ID of the player.</param>
            <param name="ipAddress">IP Address the of player.</param>
            <param name="expiration">Expiration of the authentication.</param>
            <param name="flags">Pre-authentication flags.</param>
            <param name="region">Region of the origin.</param>
            <param name="signature">Signature of auth.</param>
            <param name="connectionRequest">Connection request to server.</param>
            <param name="readerStartPosition">Start position of stream.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatingEventArgs.CanJoin">
            <summary>
            Gets or sets whether the player should be able to join server (this value can be false if server is full).
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatingEventArgs.UserId">
            <summary>
            Gets the user ID of the player.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatingEventArgs.IpAddress">
            <summary>
            Gets the IP Address the of player.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatingEventArgs.Expiration">
            <summary>
            Gets the expiration of the authentication.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatingEventArgs.Flags">
            <summary>
            Gets the pre-authentication flags.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatingEventArgs.Region">
            <summary>
            Gets the region of the origin.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatingEventArgs.Signature">
            <summary>
            Gets the signature of auth.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatingEventArgs.ConnectionRequest">
            <summary>
            Gets the connection request to server.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatingEventArgs.ReaderStartPosition">
            <summary>
            Gets the start position of stream.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatingEventArgs.ForceReject">
            <summary>
            Gets or sets whether the connection should be rejected.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatingEventArgs.CustomReject">
            <summary>
            Gets or sets the custom rejection writer.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatingEventArgs.Reject(LiteNetLib.Utils.NetDataWriter,System.Boolean)">
            <summary>
            Rejects connection.
            </summary>
            <param name="writer">The writer.</param>
            <param name="isForce">If connection is force rejected.</param>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatingEventArgs.RejectBanned(System.String,System.Int64)">
            <summary>
            Rejects connection with banned reason.
            </summary>
            <param name="reason">The reason of ban.</param>
            <param name="expires">The time when ban expires.</param>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatingEventArgs.RejectCustom(System.String)">
            <summary>
            Rejects connection with custom reason.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatingEventArgs.RejectDelay(System.Byte)">
            <summary>
            Rejects connection with delayed reconnection attempt.
            </summary>
            <param name="seconds">The time in seconds when reconnection attempt happens.</param>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatingEventArgs.RejectRedirect(System.UInt16)">
            <summary>
            Rejects connection with reconnection attempt to specific server port.
            </summary>
            <param name="port">The server port of target server.</param>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerProcessedJailbirdMessageEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ProcessedJailbirdMessage"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerProcessedJailbirdMessageEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Jailbird.JailbirdItem,InventorySystem.Items.Jailbird.JailbirdMessageType)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerProcessedJailbirdMessageEventArgs"/> class.
            </summary>
            <param name="hub">The <see cref="T:ReferenceHub"/> component of the player that owns the jailbird.</param>
            <param name="jailbird">Jailbird the message is for.</param>
            <param name="msg">The message sent by the player for the jailbird.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerProcessedJailbirdMessageEventArgs.Player">
            <summary>
            The owner of the jailbird.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerProcessedJailbirdMessageEventArgs.JailbirdItem">
            <summary>
            The jailbird item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerProcessedJailbirdMessageEventArgs.Message">
            <summary>
            The <see cref="T:InventorySystem.Items.Jailbird.JailbirdMessageType"/> processed.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerProcessingJailbirdMessageEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ProcessingJailbirdMessage"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerProcessingJailbirdMessageEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Jailbird.JailbirdItem,InventorySystem.Items.Jailbird.JailbirdMessageType,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerProcessingJailbirdMessageEventArgs"/> class.
            </summary>
            <param name="hub">The <see cref="T:ReferenceHub"/> component of the player that owns the jailbird.</param>
            <param name="jailbird">Jailbird the message is for.</param>
            <param name="msg">The message sent by the player for the jailbird.</param>
            <param name="allowAttack">Whether an attack is allowed to start.</param>
            <param name="allowInspect">Whether an inspect is allowed to start.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerProcessingJailbirdMessageEventArgs.Player">
            <summary>
            The owner of the jailbird.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerProcessingJailbirdMessageEventArgs.JailbirdItem">
            <summary>
            The jailbird item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerProcessingJailbirdMessageEventArgs.Message">
            <summary>
            Gets or sets the <see cref="T:InventorySystem.Items.Jailbird.JailbirdMessageType"/> sent by the player.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerProcessingJailbirdMessageEventArgs.AllowAttack">
            <summary>
            Gets or sets whether starting an attack is allowed.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerProcessingJailbirdMessageEventArgs.AllowInspect">
            <summary>
            Gets or sets whether starting an inspect is allowed.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerProcessingJailbirdMessageEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddedPlayerEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.RaPlayerListAddedPlayer"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddedPlayerEventArgs.#ctor(CommandSender,ReferenceHub,System.Text.StringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddedPlayerEventArgs"/> class.
            </summary>
            <param name="requesterHub">The <see cref="T:CommandSender"/> instance of the player that made the request for the RA player list.</param>
            <param name="targetHub">The <see cref="T:ReferenceHub"/> component of the player that is being added to the RA player list.</param>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> used to build the RA player list item.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddedPlayerEventArgs.Player">
            <summary>
            The player that requested the RA player list.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddedPlayerEventArgs.Target">
            <summary>
            The player that was added to the RA player list.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddedPlayerEventArgs.TargetBuilder">
            <summary>
            The <see cref="T:System.Text.StringBuilder"/> used to construct the RA player list item for the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddedPlayerEventArgs.Target"/>.
            </summary>
            <remarks>
            String builder is not empty in this event and contains the RA list item for the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddedPlayerEventArgs.Target"/>.
            </remarks>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddingPlayerEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.RaPlayerListAddingPlayer"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddingPlayerEventArgs.#ctor(CommandSender,ReferenceHub,System.Text.StringBuilder,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddingPlayerEventArgs"/> class.
            </summary>
            <param name="commandSender">The <see cref="T:CommandSender"/> instance of the player that made the request for the RA player list.</param>
            <param name="targetHub">The <see cref="T:ReferenceHub"/> component of the player that is being added to the RA player list.</param>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> used to build the RA player list item.</param>
            <param name="prefix">The prefix string for the RA list item.</param>
            <param name="inOverwatch">Whether to include the overwatch icon in the list item.</param>
            <param name="isMuted">Whether to include the is muted icon and link in the list item.</param>
            <param name="body">The body string for the Ra list item.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddingPlayerEventArgs.Player">
            <summary>
            The player that requested the RA player list.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddingPlayerEventArgs.Target">
            <summary>
            The player being added to the RA player list.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddingPlayerEventArgs.TargetBuilder">
            <summary>
            The <see cref="T:System.Text.StringBuilder"/> used to construct the RA player list item for the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddingPlayerEventArgs.Target"/>.
            </summary>
            <remarks>
            String builder is empty in this event.
            </remarks>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddingPlayerEventArgs.Prefix">
            <summary>
            Gets or sets the RA player list item prefix.
            Can contain a RA badge and/or link for whether the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddingPlayerEventArgs.Target"/> is one of either a Dummy, has RemoteAdminGlobalAccess, is NorthwoodStaff, or has RemoteAdmin.
            Otherwise this is <see cref="F:System.String.Empty"/>.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddingPlayerEventArgs.InOverwatch">
            <summary>
            Gets or sets whether the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddingPlayerEventArgs.Target"/> appears to be in overwatch on the RA player list.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddingPlayerEventArgs.IsMuted">
            <summary>
            Gets or sets whether the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddingPlayerEventArgs.Target"/> appears to be muted on the RA player list.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddingPlayerEventArgs.Body">
            <summary>
            Gets or sets the RA player list item body.
            Contains the color tags, identifier as the <see cref="P:LabApi.Features.Wrappers.Player.PlayerId"/> and <see cref="P:NicknameSync.CombinedName"/> of the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddingPlayerEventArgs.Target"/>.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddingPlayerEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerReceivedAchievementEventArgs">
            <summary>
            Represents the argument for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ReceivedAchievement"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerReceivedAchievementEventArgs.#ctor(Mirror.NetworkIdentity,Achievements.AchievementName)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerReceivedAchievementEventArgs"/> class.
            </summary>
            <param name="identity">The <see cref="T:Mirror.NetworkIdentity"/> component of the player.</param>
            <param name="name">The <see cref="T:Achievements.AchievementName"/> being granted.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReceivedAchievementEventArgs.Player">
            <summary>
            The player that getting the achievement.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReceivedAchievementEventArgs.Achievement">
            <summary>
            The <see cref="T:Achievements.AchievementName"/> of the achievement.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerReceivedLoadoutEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ReceivedLoadout"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerReceivedLoadoutEventArgs.#ctor(ReferenceHub,System.Collections.Generic.List{ItemType},System.Collections.Generic.Dictionary{ItemType,System.UInt16},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerReceivedLoadoutEventArgs"/> class.
            </summary>
            <param name="hub">The player instance.</param>
            <param name="items">The items which player received.</param>
            <param name="ammo">The ammo which player received.</param>
            <param name="inventoryReset">If players inventory did reset.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReceivedLoadoutEventArgs.Player">
            <summary>
            Gets the gets player which received this loadout.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReceivedLoadoutEventArgs.Items">
            <summary>
            Gets the items which player received.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReceivedLoadoutEventArgs.Ammo">
            <summary>
            Gets ammo which player received.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReceivedLoadoutEventArgs.InventoryReset">
            <summary>
            Gets whether the player's inventory did reset before getting loadout.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerReceivingLoadoutEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ReceivingLoadout"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerReceivingLoadoutEventArgs.#ctor(ReferenceHub,System.Collections.Generic.List{ItemType},System.Collections.Generic.Dictionary{ItemType,System.UInt16},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerReceivingLoadoutEventArgs"/> class.
            </summary>
            <param name="hub">The player instance.</param>
            <param name="items">The items which player received.</param>
            <param name="ammo">The ammo which player received.</param>
            <param name="inventoryReset">If players inventory will be cleared.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReceivingLoadoutEventArgs.Player">
            <summary>
            Gets player which receives this loadout.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReceivingLoadoutEventArgs.Items">
            <summary>
            Gets items which player will receive.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReceivingLoadoutEventArgs.Ammo">
            <summary>
            Gets ammo which player will receive.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReceivingLoadoutEventArgs.InventoryReset">
            <summary>
            Gets or sets whether players inventory should be cleared before getting loadout.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReceivingLoadoutEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerReceivingLoadoutEventArgs.AddItem(ItemType)">
            <summary>
            Adds item of specific type to this loadout.
            </summary>
            <param name="type">The type of item.</param>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerReceivingLoadoutEventArgs.AddAmmo(ItemType,System.UInt16)">
            <summary>
            Adds ammo to this loadout.
            </summary>
            <param name="ammoType">The type of ammo.</param>
            <param name="ammoAmount">The amount of ammo.</param>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerReceivingLoadoutEventArgs.SetAmmo(ItemType,System.UInt16)">
            <summary>
            Sets ammo for this loadout.
            </summary>
            <param name="ammoType">The type of ammo.</param>
            <param name="ammoAmount">The amount of ammo.</param>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerReceivingLoadoutEventArgs.ClearAmmo">
            <summary>
            Clears ammo specified in this loadout.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerReceivingLoadoutEventArgs.ClearItems">
            <summary>
            Clears items specified in this loadout.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerReceivingVoiceMessageEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ReceivingVoiceMessage"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerReceivingVoiceMessageEventArgs.#ctor(ReferenceHub,VoiceChat.Networking.VoiceMessage@)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerReceivingVoiceMessageEventArgs"/> class.
            </summary>
            <param name="listener">The <see cref="T:ReferenceHub" /> who is going to receive the voice message.</param>
            <param name="message">The <see cref="T:VoiceChat.Networking.VoiceMessage" /> being received.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReceivingVoiceMessageEventArgs.Player">
            <summary>
            Gets the player who is going to receive the voice message.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReceivingVoiceMessageEventArgs.Sender">
            <summary>
            Gets the player that is sending the voice message.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReceivingVoiceMessageEventArgs.Message">
            <summary>
            Gets the <see cref="T:VoiceChat.Networking.VoiceMessage" /> being received.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReceivingVoiceMessageEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the voice message is allowed to be received.
            </summary>
            <remarks>
            If this is <see langword="true" /> but the <see cref="T:VoiceChat.VoiceChatChannel" /> is
            <see cref="F:VoiceChat.VoiceChatChannel.None" /> this will be ignored.
            </remarks>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerReloadedWeaponEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ReloadedWeapon"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerReloadedWeaponEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Firearms.Firearm)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerReloadedWeaponEventArgs"/> class.
            </summary>
            <param name="hub">The player who reloaded the weapon.</param>
            <param name="weapon">The weapon that was reloaded.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReloadedWeaponEventArgs.Player">
            <summary>
            Gets the player who reloaded the weapon.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReloadedWeaponEventArgs.FirearmItem">
            <summary>
            Gets the weapon that was reloaded.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReloadedWeaponEventArgs.Weapon">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerReloadedWeaponEventArgs.FirearmItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerReloadingWeaponEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ReloadingWeapon"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerReloadingWeaponEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Firearms.Firearm)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerReloadingWeaponEventArgs"/> class.
            </summary>
            <param name="hub">The player who is reloading the weapon.</param>
            <param name="weapon">The weapon that is being reloaded.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReloadingWeaponEventArgs.Player">
            <summary>
            Gets the player who is reloading the weapon.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReloadingWeaponEventArgs.FirearmItem">
            <summary>
            Gets the weapon that is being reloaded.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReloadingWeaponEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReloadingWeaponEventArgs.Weapon">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerReloadingWeaponEventArgs.FirearmItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerReportedCheaterEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ReportedCheater"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerReportedCheaterEventArgs.#ctor(ReferenceHub,ReferenceHub,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerReportedCheaterEventArgs"/> class.
            </summary>
            <param name="hub">The player who sent the report.</param>
            <param name="target">The reported player.</param>
            <param name="reason">The reason why is the player being reported.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReportedCheaterEventArgs.Player">
            <summary>
            Gets the player who sent the report.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReportedCheaterEventArgs.Target">
            <summary>
            Gets the reported player.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReportedCheaterEventArgs.Reason">
            <summary>
            Gets the reason why is the player being reported.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerReportedPlayerEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ReportedPlayer"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerReportedPlayerEventArgs.#ctor(ReferenceHub,ReferenceHub,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerReportedPlayerEventArgs"/> class.
            </summary>
            <param name="hub">The player who sent reported.</param>
            <param name="target">The player who was reported.</param>
            <param name="reason">The reason why was the player reported.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReportedPlayerEventArgs.Player">
            <summary>
            Gets the player who sent reported.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReportedPlayerEventArgs.Target">
            <summary>
            Gets the player who was reported.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReportedPlayerEventArgs.Reason">
            <summary>
            Gets the reason why was the player reported.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerReportingCheaterEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ReportingCheater"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerReportingCheaterEventArgs.#ctor(ReferenceHub,ReferenceHub,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerReportingCheaterEventArgs"/> class.
            </summary>
            <param name="hub">The player who is reporting.</param>
            <param name="target">The reported player.</param>
            <param name="reason">The reason why is the player being reported.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReportingCheaterEventArgs.Player">
            <summary>
            Gets the player who is reporting.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReportingCheaterEventArgs.Target">
            <summary>
            Gets the reported player.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReportingCheaterEventArgs.Reason">
            <summary>
            Gets the reason why is player being reported.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReportingCheaterEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerReportingPlayerEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ReportingPlayer"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerReportingPlayerEventArgs.#ctor(ReferenceHub,ReferenceHub,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerReportingPlayerEventArgs"/> class.
            </summary>
            <param name="hub">The player who is reporting.</param>
            <param name="target">The player who is being reported.</param>
            <param name="reason">The reason why was player reported.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReportingPlayerEventArgs.Player">
            <summary>
            Gets the player who is reporting.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReportingPlayerEventArgs.Target">
            <summary>
            Gets the player who is being reported.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReportingPlayerEventArgs.Reason">
            <summary>
            Gets the reason why was player reported.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerReportingPlayerEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedCustomRaInfoEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.RequestedCustomRaInfo"/> event.
            </summary>
        </member>
        <member name="F:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedCustomRaInfoEventArgs.MaxClipboardCount">
            <summary>
            Max number of clipboard links that can be created with <see cref="M:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedCustomRaInfoEventArgs.SetClipboardText(System.String,System.String,System.Byte)"/>.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedCustomRaInfoEventArgs.#ctor(CommandSender,System.ArraySegment{System.String},System.Boolean,System.Text.StringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedCustomRaInfoEventArgs"/> class.
            </summary>
            <param name="commandSender">The <see cref="T:CommandSender"/> instance of the player making the request.</param>
            <param name="selectionArgs">The request arguments.</param>
            <param name="isSensitiveInfo">Whether the info being requested is sensitive.</param>
            <param name="infoBuilder">The <see cref="T:System.Text.StringBuilder"/> use to build the response.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedCustomRaInfoEventArgs.Player">
            <summary>
            The player that made the request.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedCustomRaInfoEventArgs.SelectedIdentifiers">
            <summary>
            Array of identifiers selected by the player.
            Identifiers come from items in the RA player list that have been placed by plugins <see cref="E:LabApi.Events.Handlers.PlayerEvents.RequestingRaPlayerList"/>.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedCustomRaInfoEventArgs.IsSensitiveInfo">
            <summary>
            Gets whether the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedCustomRaInfoEventArgs.Player"/> requested sensitive info.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedCustomRaInfoEventArgs.InfoBuilder">
            <summary>
            Gets the <see cref="T:System.Text.StringBuilder"/> used to construct the response message.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedCustomRaInfoEventArgs.SetClipboardText(System.String,System.String,System.Byte)">
            <summary>
            Creates a clipboard link for the RA.
            </summary>
            <remarks>
            Usage <c>ev.InfoBuilder.Append(ev.SetClipboardText("Click Me", "Text to copy to clipboard on click", 0));</c>.
            </remarks>
            <param name="linkText">Text to display as the link.</param>
            <param name="clipboardText">Text to copy to the clipboard when clicking on the link.</param>
            <param name="id">The id of the clipboard, must be between 0 and <see cref="F:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedCustomRaInfoEventArgs.MaxClipboardCount"/>.</param>
            <returns>The formated clipboard link text.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thown when id is not between 0 and <see cref="F:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedCustomRaInfoEventArgs.MaxClipboardCount"/>.</exception>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedCustomRaInfoEventArgs.TryGetClipboardText(System.Byte,System.String@)">
            <summary>
            Tries to get clipboard text for the specific id.
            </summary>
            <param name="id">The id associated with the clipboard text.</param>
            <param name="text">The found text, otherwise <see langword="null"/>.</param>
            <returns><see langword="true"/> if set and not empty, otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thown when id is not between 0 and <see cref="F:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedCustomRaInfoEventArgs.MaxClipboardCount"/>.</exception>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayerInfoEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.RequestedRaPlayerInfo"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayerInfoEventArgs.#ctor(CommandSender,ReferenceHub,System.Boolean,System.Boolean,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayerInfoEventArgs"/> class.
            </summary>
            <param name="commandSender">The <see cref="T:CommandSender"/> instance of the player making the request.</param>
            <param name="targetHub">The <see cref="T:ReferenceHub"/> component of the selected target.</param>
            <param name="isSensitiveInfo">Whether the info being requested is sensitive.</param>
            <param name="hasUserIdPerms">Whether the player has perms to view the user id of the target.</param>
            <param name="infoBuilder">The <see cref="T:System.Text.StringBuilder"/> used to construct the response message.</param>
            <param name="idBuilder">The <see cref="T:System.Text.StringBuilder"/> used to construct the clipboard text of the targets player id.</param>
            <param name="ipBuilder">The <see cref="T:System.Text.StringBuilder"/> used to construct the clipboard text of the targets ip address.</param>
            <param name="userIdBuilder">The <see cref="T:System.Text.StringBuilder"/> used to construct the clipboard text of the targets user id.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayerInfoEventArgs.Player">
            <summary>
            The player that made the request.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayerInfoEventArgs.Target">
            <summary>
            The target player selected.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayerInfoEventArgs.IsSensitiveInfo">
            <summary>
            Whether the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayerInfoEventArgs.Player"/> requested sensitive info.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayerInfoEventArgs.HasUserIdPerms">
            <summary>
            Whether the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayerInfoEventArgs.Player"/> has permission to view the user id of the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayerInfoEventArgs.Target"/>.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayerInfoEventArgs.InfoBuilder">
            <summary>
            The <see cref="T:System.Text.StringBuilder"/> used to construct the response message.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayerInfoEventArgs.PlayerIdBuilder">
            <summary>
            The <see cref="T:System.Text.StringBuilder"/> used to construct the clipboard text of the targets player id.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayerInfoEventArgs.IpBuilder">
            <summary>
            The <see cref="T:System.Text.StringBuilder"/> used to construct the clipboard text of the targets ip address.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayerInfoEventArgs.UserIdBuilder">
            <summary>
            The <see cref="T:System.Text.StringBuilder"/> used to construct the clipboard text of the targets user id.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayerListEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.RequestedRaPlayerList"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayerListEventArgs.#ctor(CommandSender,System.Text.StringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayerListEventArgs"/> class.
            </summary>
            <param name="commandSender">The <see cref="T:CommandSender"/> instance of the player that made the request for the RA player list.</param>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> used to build the RA player list.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayerListEventArgs.Player">
            <summary>
            The player that requested the RA player list.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayerListEventArgs.ListBuilder">
            <summary>
            The <see cref="T:System.Text.StringBuilder"/> used to construct the RA player list.
            </summary>
            <remarks>
            String builder is not empty in this event and contains the RA list.
            </remarks>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayersInfoEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.RequestedRaPlayersInfo"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayersInfoEventArgs.#ctor(CommandSender,System.Collections.Generic.IEnumerable{ReferenceHub},System.Boolean,System.Boolean,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayersInfoEventArgs"/> class.
            </summary>
            <param name="commandSender">The <see cref="T:CommandSender"/> instance of the player making the request.</param>
            <param name="targets">The reference hub components of the targets selected in the request.</param>
            <param name="isSensitiveInfo">Whether the info being requested is sensitive.</param>
            <param name="hasUserIdPerms">Whether the player has perms to view the user ids of the targets.</param>
            <param name="infoBuilder">The <see cref="T:System.Text.StringBuilder"/> used to build the response.</param>
            <param name="idBuilder">The <see cref="T:System.Text.StringBuilder"/> used to build the clipboard text for the targets ids.</param>
            <param name="ipBuilder">The <see cref="T:System.Text.StringBuilder"/> used to build the clipboard text for the targets IPs.</param>
            <param name="userIdBuilder">The <see cref="T:System.Text.StringBuilder"/> used to build the clipboard text for the targets user ids.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayersInfoEventArgs.Player">
            <summary>
            The player that made the request.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayersInfoEventArgs.Targets">
            <summary>
            The target players selected.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayersInfoEventArgs.IsSensitiveInfo">
            <summary>
            Gets whether the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayersInfoEventArgs.Player"/> requested sensitive info.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayersInfoEventArgs.HasUserIdPerms">
            <summary>
            Gets whether the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayersInfoEventArgs.Player"/> has perms to view the <see cref="P:LabApi.Features.Wrappers.Player.UserId"/> of the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayersInfoEventArgs.Targets"/>.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayersInfoEventArgs.InfoBuilder">
            <summary>
            Gets the <see cref="T:System.Text.StringBuilder"/> used to construct the response message.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayersInfoEventArgs.PlayerIdBuilder">
            <summary>
            Gets the <see cref="T:System.Text.StringBuilder"/> used to construct the clipboard text for the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayersInfoEventArgs.Targets"/> <see cref="P:LabApi.Features.Wrappers.Player.PlayerId"/>.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayersInfoEventArgs.IpBuilder">
            <summary>
            Gets the <see cref="T:System.Text.StringBuilder"/> used to construct the clipboard text for the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayersInfoEventArgs.Targets"/> <see cref="P:LabApi.Features.Wrappers.Player.IpAddress"/>.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayersInfoEventArgs.UserIdBuilder">
            <summary>
            Gets the <see cref="T:System.Text.StringBuilder"/> used to construct the clipboard text for the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayersInfoEventArgs.Targets"/> <see cref="P:LabApi.Features.Wrappers.Player.UserId"/>.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerInfoEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.RequestingRaPlayerInfo"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerInfoEventArgs.#ctor(CommandSender,ReferenceHub,System.Boolean,System.Boolean,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerInfoEventArgs"/> class.
            </summary>
            <param name="commandSender">THe <see cref="T:CommandSender"/> instance of the player making the request.</param>
            <param name="targetHub">The <see cref="T:ReferenceHub"/> component of the target player.</param>
            <param name="isSensitiveInfo">Whether the info being requested is sensitive.</param>
            <param name="hasSensitiveInfoPerms">Whether the player has perms to view sensitive info.</param>
            <param name="hasUserIdPerms">Whether the player has perms to view the targets user id.</param>
            <param name="infoBuilder">The <see cref="T:System.Text.StringBuilder"/> used to construct the response message.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerInfoEventArgs.Player">
            <summary>
            The player than made the request.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerInfoEventArgs.Target">
            <summary>
            The target player selected.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerInfoEventArgs.IsSensitiveInfo">
            <summary>
            Gets or sets whether the player is requesting sensitive info.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerInfoEventArgs.HasSensitiveInfoPerms">
            <summary>
            Gets or sets whether the player has permissions to view sensitive info.
            </summary>
            <remarks>
            If <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerInfoEventArgs.IsSensitiveInfo"/> is <see langword="true"/> and this is <see langword="false"/> no response is sent.
            </remarks>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerInfoEventArgs.HasUserIdPerms">
            <summary>
            Gets or sets whether the player has permission to view the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerInfoEventArgs.Target"/> <see cref="P:LabApi.Features.Wrappers.Player.UserId"/>.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerInfoEventArgs.InfoBuilder">
            <summary>
            The <see cref="T:System.Text.StringBuilder"/> used to construct the response message.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerInfoEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerListEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.RequestingRaPlayerList"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerListEventArgs.#ctor(CommandSender,System.Text.StringBuilder,System.Boolean,RemoteAdmin.Communication.RaPlayerList.PlayerSorting,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerListEventArgs"/> class.
            </summary>
            <param name="commandSender">The <see cref="T:CommandSender"/> instance of the player that made the request for the RA player list.</param>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> used to build the RA player list.</param>
            <param name="isDescending">Whether to sort players by descending order.</param>
            <param name="sorting">The <see cref="T:RemoteAdmin.Communication.RaPlayerList.PlayerSorting"/> mode to use.</param>
            <param name="viewHiddenLocalBadges">Whether the requester can view hidden local RA badges or not.</param>
            <param name="viewHiddenGlobalBadges">Whether the requester can view hidden global RA badges or not.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerListEventArgs.Player">
            <summary>
            The player that requested the RA player list.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerListEventArgs.ListBuilder">
            <summary>
            The <see cref="T:System.Text.StringBuilder"/> used to construct the RA player list.
            </summary>
            <remarks>
            String builder is empty in this event.
            </remarks>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerListEventArgs.IsDescending">
            <summary>
            Gets or set whether to sort players by descending order.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerListEventArgs.Sorting">
            <summary>
            Gets or sets the <see cref="T:RemoteAdmin.Communication.RaPlayerList.PlayerSorting"/> used.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerListEventArgs.ViewHiddenLocalBadges">
            <summary>
            Gets or sets whether the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerListEventArgs.Player"/> can view hidden local RA badges.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerListEventArgs.ViewHiddenGlobalBadges">
            <summary>
            Gets or sets whether the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerListEventArgs.Player"/> can view hidden global RA badges.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerListEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayersInfoEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.RequestingRaPlayersInfo"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayersInfoEventArgs.#ctor(CommandSender,System.Collections.Generic.IEnumerable{ReferenceHub},System.Boolean,System.Boolean,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayersInfoEventArgs"/> class.
            </summary>
            <param name="commandSender">The <see cref="T:CommandSender"/> instance of the player making the request.</param>
            <param name="targets">The reference hub components of the targets selected by the player.</param>
            <param name="isSensitiveInfo">Whether the player requested sensitive info.</param>
            <param name="hasSensitiveInfoPerms">Whether the player has perms to view sensitive info.</param>
            <param name="hasUserIdPerms">Whether the player has perms to view the user ids of the targets.</param>
            <param name="infoBuilder">The <see cref="T:System.Text.StringBuilder"/> used to construct the response message.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayersInfoEventArgs.Player">
            <summary>
            The player that made the request.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayersInfoEventArgs.Targets">
            <summary>
            The target players selected.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayersInfoEventArgs.IsSensitiveInfo">
            <summary>
            Gets or sets whether the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayersInfoEventArgs.Player"/> requested sensitive info.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayersInfoEventArgs.HasSensitiveInfoPerms">
            <summary>
            Gets or sets whether the player has permissions to view sensitive info.
            </summary>
            <remarks>
            If <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayersInfoEventArgs.IsSensitiveInfo"/> is <see langword="true"/> and this is <see langword="false"/> no response is sent.
            </remarks>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayersInfoEventArgs.HasUserIdPerms">
            <summary>
            Gets or sets whether the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayersInfoEventArgs.Player"/> has permission to view the <see cref="P:LabApi.Features.Wrappers.Player.UserId"/> of the <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayersInfoEventArgs.Targets"/>.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayersInfoEventArgs.InfoBuilder">
            <summary>
            Gets the <see cref="T:System.Text.StringBuilder"/> used to construct the response message.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayersInfoEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerRoomChangedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.RoomChanged"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerRoomChangedEventArgs.#ctor(ReferenceHub,MapGeneration.RoomIdentifier,MapGeneration.RoomIdentifier)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerRoomChangedEventArgs"/> class.
            </summary>
            <param name="player">The player whose room changed.</param>
            <param name="oldRoom">The old room.</param>
            <param name="newRoom">The new room.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRoomChangedEventArgs.Player">
            <summary>
            Gets the player whose last known room changed.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRoomChangedEventArgs.OldRoom">
            <summary>
            Gets the old room. May be null if the player just spawned, went through void and such.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerRoomChangedEventArgs.NewRoom">
            <summary>
            Gets the new room. May be null if the player went into void, died and such.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerSearchedAmmoEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SearchedAmmo"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerSearchedAmmoEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Firearms.Ammo.AmmoPickup)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSearchedAmmoEventArgs"/> class.
            </summary>
            <param name="hub">The player who searched for ammo pickup.</param>
            <param name="pickup">The ammo pickup.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchedAmmoEventArgs.Player">
            <summary>
            Gets the player who searched for ammo pickup.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchedAmmoEventArgs.AmmoPickup">
            <summary>
            Gets the ammo pickup.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchedAmmoEventArgs.Pickup">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchedAmmoEventArgs.AmmoPickup"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerSearchedArmorEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SearchedArmor"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerSearchedArmorEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Armor.BodyArmorPickup)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSearchedArmorEventArgs"/> class.
            </summary>
            <param name="hub">The player who searched for armor pickup.</param>
            <param name="pickup">The armor pickup.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchedArmorEventArgs.Player">
            <summary>
            Gets the player who searched for armor pickup.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchedArmorEventArgs.BodyArmorPickup">
            <summary>
            Gets the armor pickup.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchedArmorEventArgs.Pickup">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchedArmorEventArgs.BodyArmorPickup"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerSearchedPickupEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SearchedPickup"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerSearchedPickupEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Pickups.ItemPickupBase)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSearchedPickupEventArgs"/> class.
            </summary>
            <param name="hub">The player who searched for pickup.</param>
            <param name="pickup">The item pickup.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchedPickupEventArgs.Player">
            <summary>
            Gets the player who searched for pickup.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchedPickupEventArgs.Pickup">
            <summary>
            Gets the item pickup.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerSearchedToyEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SearchedToy"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerSearchedToyEventArgs.#ctor(ReferenceHub,AdminToys.InvisibleInteractableToy)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSearchedToyEventArgs"/> class.
            </summary>
            <param name="hub">The player who searched the toy.</param>
            <param name="toy">The toy that was searched.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchedToyEventArgs.Player">
            <summary>
            Gets the player who searched the toy.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchedToyEventArgs.Interactable">
            <summary>
            Gets the toy that was searched.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingAmmoEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SearchingAmmo"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingAmmoEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Firearms.Ammo.AmmoPickup)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingAmmoEventArgs"/> class.
            </summary>
            <param name="hub">The player searching for ammo pickup.</param>
            <param name="pickup">The ammo pickup.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingAmmoEventArgs.Player">
            <summary>
            Gets the player searching for ammo pickup.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingAmmoEventArgs.AmmoPickup">
            <summary>
            Gets the ammo pickup.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingAmmoEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingAmmoEventArgs.Pickup">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingAmmoEventArgs.AmmoPickup"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingArmorEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SearchingArmor"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingArmorEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Armor.BodyArmorPickup)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingArmorEventArgs"/> class.
            </summary>
            <param name="hub">The player searching for armor.</param>
            <param name="pickup">The armor pickup.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingArmorEventArgs.Player">
            <summary>
            Gets the player searching for armor.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingArmorEventArgs.BodyArmorPickup">
            <summary>
            Gets the armor pickup.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingArmorEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingArmorEventArgs.Pickup">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingArmorEventArgs.BodyArmorPickup"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingPickupEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SearchingPickup"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingPickupEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Pickups.ItemPickupBase)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingPickupEventArgs"/> class.
            </summary>
            <param name="hub">The player who is searching for the pickup.</param>
            <param name="pickup">The pickup being searched.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingPickupEventArgs.Player">
            <summary>
            Gets the player who is searching for the pickup.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingPickupEventArgs.Pickup">
            <summary>
            Gets the pickup being searched.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingPickupEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingToyEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SearchingToy"/>.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingToyEventArgs.#ctor(ReferenceHub,AdminToys.InvisibleInteractableToy)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingToyEventArgs"/> class.
            </summary>
            <param name="hub">The player who is searching the toy.</param>
            <param name="toy">The toy that is going to be searched.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingToyEventArgs.Player">
            <summary>
            Gets the player that is searching the toy.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingToyEventArgs.Interactable">
            <summary>
            Gets the toy the player is searching.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingToyEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerSearchToyAbortedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SearchToyAborted"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerSearchToyAbortedEventArgs.#ctor(ReferenceHub,AdminToys.InvisibleInteractableToy)">
            <summary>
            Initializes a new instance for the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSearchToyAbortedEventArgs"/> class.
            </summary>
            <param name="hub">The player that canceled the search on the toy.</param>
            <param name="toy">The toy that was being searched.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchToyAbortedEventArgs.Player">
            <summary>
            Gets the player that canceled the search on the toy.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSearchToyAbortedEventArgs.Interactable">
            <summary>
            Gets the toy that was being searched.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerSendingAttachmentsPrefsEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SendingAttachmentsPrefs"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerSendingAttachmentsPrefsEventArgs.#ctor(ReferenceHub,ItemType,System.UInt32,System.UInt32)">
            <summary>
            Initialized a new instance of <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSendingAttachmentsPrefsEventArgs"/>.
            </summary>
            <param name="player">The player who is changing the firearm attachments.</param>
            <param name="firearm">The firearm type whose attachments preferences are being changed.</param>
            <param name="oldAttachments">The old attachments code.</param>
            <param name="newAttachments">The new attachments code requested by the player.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSendingAttachmentsPrefsEventArgs.Player">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSendingAttachmentsPrefsEventArgs.FirearmType">
            <summary>
            Gets the <see cref="T:ItemType"/> of the firearm.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSendingAttachmentsPrefsEventArgs.OldAttachments">
            <summary>
            Gets previous attachments code stored on the server.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSendingAttachmentsPrefsEventArgs.NewAttachments">
            <summary>
            Gets or sets new attachments code. <b>Edited values are NOT propagated back to the client and are stored on the server for on-spawn purposes.</b>
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSendingAttachmentsPrefsEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerSendingVoiceMessageEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SendingVoiceMessage"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerSendingVoiceMessageEventArgs.#ctor(VoiceChat.Networking.VoiceMessage@)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSendingVoiceMessageEventArgs"/> class.
            </summary>
            <param name="message">The <see cref="T:VoiceChat.Networking.VoiceMessage" /> being sent.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSendingVoiceMessageEventArgs.Player">
            <summary>
            Gets the player who is going to send the voice message.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSendingVoiceMessageEventArgs.Message">
            <summary>
            Gets the <see cref="T:VoiceChat.Networking.VoiceMessage" /> being sent.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSendingVoiceMessageEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the voice message is allowed to be sent.
            </summary>
            <remarks>
            If this is <see langword="true" /> but the <see cref="T:VoiceChat.VoiceChatChannel" /> is
            <see cref="F:VoiceChat.VoiceChatChannel.None" /> this will be ignored.
            </remarks>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerSentAttachmentsPrefsEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SentAttachmentsPrefs"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerSentAttachmentsPrefsEventArgs.#ctor(ReferenceHub,ItemType,System.UInt32,System.UInt32)">
            <summary>
            Initialized a new instance of <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSentAttachmentsPrefsEventArgs"/>.
            </summary>
            <param name="player">The player who is changing the firearm attachments.</param>
            <param name="firearm">The firearm type whose attachments preferences are being changed.</param>
            <param name="oldAttachments">The old attachments code.</param>
            <param name="newAttachments">The new attachments code.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSentAttachmentsPrefsEventArgs.Player">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSentAttachmentsPrefsEventArgs.FirearmType">
            <summary>
            The <see cref="T:ItemType"/> of the firearm.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSentAttachmentsPrefsEventArgs.OldAttachments">
            <summary>
            Gets previous attachments code stored on the server.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSentAttachmentsPrefsEventArgs.NewAttachments">
            <summary>
            Gets the new attachments code stored on the server.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerShootingWeaponEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ShootingWeapon"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerShootingWeaponEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Firearms.Firearm)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerShootingWeaponEventArgs"/> class.
            </summary>
            <param name="hub">The player who is shooting.</param>
            <param name="weapon">The firearm that the player shooting from.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerShootingWeaponEventArgs.Player">
            <summary>
            Gets the player who is shooting.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerShootingWeaponEventArgs.FirearmItem">
            <summary>
            Gets the firearm that the player shooting from.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerShootingWeaponEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerShootingWeaponEventArgs.Weapon">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerShootingWeaponEventArgs.FirearmItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerShotWeaponEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ShotWeapon"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerShotWeaponEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Firearms.Firearm)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerShotWeaponEventArgs"/> class.
            </summary>
            <param name="hub">The player who shot.</param>
            <param name="weapon">The firearm that the player shot from.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerShotWeaponEventArgs.Player">
            <summary>
            Gets the player who shot.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerShotWeaponEventArgs.FirearmItem">
            <summary>
            Gets the firearm that the player shot from.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerShotWeaponEventArgs.Weapon">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerShotWeaponEventArgs.FirearmItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerSpawnedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Spawned"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerSpawnedEventArgs.#ctor(ReferenceHub,PlayerRoles.PlayerRoleBase,System.Boolean,UnityEngine.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSpawnedEventArgs"/> class.
            </summary>
            <param name="hub">The player who is being spawned.</param>
            <param name="role">The role that is being applied.</param>
            <param name="useSpawnPoint">If spawnpoint should be used.</param>
            <param name="spawnLocation">The default spawn location.</param>
            <param name="horizontalRotation">The default spawn horizontal rotation.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSpawnedEventArgs.Player">
            <summary>
            Gets the player who spawned.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSpawnedEventArgs.Role">
            <summary>
            Gets the role that was applied.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSpawnedEventArgs.UseSpawnPoint">
            <summary>
            Gets or sets if spawn point should be used.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSpawnedEventArgs.SpawnLocation">
            <summary>
            Gets spawn location.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSpawnedEventArgs.HorizontalRotation">
            <summary>
            Gets horizontal rotation of spawn.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerSpawnedRagdollEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SpawnedRagdoll"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerSpawnedRagdollEventArgs.#ctor(ReferenceHub,PlayerRoles.Ragdolls.BasicRagdoll,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSpawnedRagdollEventArgs"/> class.
            </summary>
            <param name="hub">The player from who is ragdoll from.</param>
            <param name="ragdoll">The spawned ragdoll.</param>
            <param name="damageHandler">The damage handler that caused the death of the player.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSpawnedRagdollEventArgs.Player">
            <summary>
            Gets the player from who is ragdoll from.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSpawnedRagdollEventArgs.Ragdoll">
            <summary>
            Gets the spawned ragdoll.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSpawnedRagdollEventArgs.DamageHandler">
            <summary>
            Gets the damage handler that caused the death of the player.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerSpawningEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Spawning"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerSpawningEventArgs.#ctor(ReferenceHub,PlayerRoles.PlayerRoleBase,System.Boolean,UnityEngine.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSpawningEventArgs"/> class.
            </summary>
            <param name="hub">The player who is being spawned.</param>
            <param name="role">The role that is being applied.</param>
            <param name="useSpawnPoint">If spawnpoint should be used.</param>
            <param name="spawnLocation">The default spawn location.</param>
            <param name="horizontalRotation">The default spawn horizontal rotation.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSpawningEventArgs.Player">
            <summary>
            Gets the player who is being spawned.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSpawningEventArgs.Role">
            <summary>
            Gets the role that is being applied.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSpawningEventArgs.UseSpawnPoint">
            <summary>
            Gets or sets if spawn point should be used.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSpawningEventArgs.SpawnLocation">
            <summary>
            Gets or sets spawn location.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSpawningEventArgs.HorizontalRotation">
            <summary>
            Gets or sets horizontal rotation of spawn.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSpawningEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerSpawningEventArgs.SetSpawnpoint(UnityEngine.Vector3,System.Single)">
            <summary>
            Sets custom spawnpoint where player should spawn.
            </summary>
            <param name="position">The location of spawnpoint.</param>
            <param name="horizontalRotation">The rotation of spawn.</param>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerSpawningRagdollEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SpawningRagdoll"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerSpawningRagdollEventArgs.#ctor(ReferenceHub,PlayerRoles.Ragdolls.BasicRagdoll,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSpawningRagdollEventArgs"/> class.
            </summary>
            <param name="hub">The player from who is ragdoll from.</param>
            <param name="ragdoll">The ragdoll which being spawned.</param>
            <param name="damageHandler">The damage handler that caused the death of the player.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSpawningRagdollEventArgs.Player">
            <summary>
            Gets the player from who is ragdoll from.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSpawningRagdollEventArgs.Ragdoll">
            <summary>
            Gets the ragdoll prefab which will be used to instantiate the ragdoll.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSpawningRagdollEventArgs.RagdollPrefab">
            <summary>
            Gets the ragdoll prefab which will be used to instantiate the ragdoll.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSpawningRagdollEventArgs.DamageHandler">
            <summary>
            Gets the damage handler that caused the death of the player.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSpawningRagdollEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerSpinnedRevolverEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SpinnedRevolver"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerSpinnedRevolverEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Firearms.Firearm)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSpinnedRevolverEventArgs"/> class.
            </summary>
            <param name="hub">The player who spinned the revolver.</param>
            <param name="weapon">The revolver firearm.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSpinnedRevolverEventArgs.Player">
            <summary>
            Gets the player who spinned the revolver.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSpinnedRevolverEventArgs.Revolver">
            <summary>
            Gets the revolver item.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerSpinningRevolverEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SpinningRevolver"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerSpinningRevolverEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Firearms.Firearm)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSpinningRevolverEventArgs"/> class.
            </summary>
            <param name="hub">The player who is attempting to spin the revolver.</param>
            <param name="weapon">The revolver firearm.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSpinningRevolverEventArgs.Player">
            <summary>
            Gets the player who is attempting to spin the revolver.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSpinningRevolverEventArgs.Revolver">
            <summary>
            Gets the revolver item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerSpinningRevolverEventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayersStayingInHazardEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.StayingInHazard"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayersStayingInHazardEventArgs.#ctor(System.Collections.Generic.List{ReferenceHub},Hazards.EnvironmentalHazard)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayersStayingInHazardEventArgs"/> class.
            </summary>
            <param name="affectedPlayers">The list of affected players.</param>
            <param name="hazard">The hazard they are affected with.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayersStayingInHazardEventArgs.AffectedPlayers">
            <summary>
            The affected players. Note that this list is pooled. Please copy the contents if you wish to do anything with it after the event finishes.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayersStayingInHazardEventArgs.Hazard">
            <summary>
            The hazard they are affected with.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerThrewItemEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ThrewItem"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerThrewItemEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Pickups.ItemPickupBase,UnityEngine.Rigidbody)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerThrewItemEventArgs"/> class.
            </summary>
            <param name="hub">The player who threw the item.</param>
            <param name="item">The item that was thrown.</param>
            <param name="rigidbody">The rigidbody of the item.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerThrewItemEventArgs.Player">
            <summary>
            Gets the player who threw the item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerThrewItemEventArgs.Pickup">
            <summary>
            Gets the Pickup that was thrown.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerThrewItemEventArgs.Rigidbody">
            <summary>
            Gets the rigidbody of the item.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerThrewProjectileEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ThrewProjectile"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerThrewProjectileEventArgs.#ctor(ReferenceHub,InventorySystem.Items.ThrowableProjectiles.ThrowableItem,InventorySystem.Items.ThrowableProjectiles.ThrownProjectile,InventorySystem.Items.ThrowableProjectiles.ThrowableItem.ProjectileSettings,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerThrewProjectileEventArgs"/> class.
            </summary>
            <param name="hub">The player who threw the throwable item.</param>
            <param name="item">The original item that was thrown.</param>
            <param name="projectile">The new projectile object created.</param>
            <param name="projectileSettings">Projectile settings at which throwable was thrown.</param>
            <param name="fullForce">Value whenever the throwable was thrown at full force (overhand).</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerThrewProjectileEventArgs.Player">
            <summary>
            Gets the player who threw the throwable item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerThrewProjectileEventArgs.ThrowableItem">
            <summary>
            Gets the original item that was thrown.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerThrewProjectileEventArgs.Projectile">
            <summary>
            Gets the projectile object.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerThrewProjectileEventArgs.ProjectileSettings">
            <summary>
            Gets the projectile settings at which throwable was thrown.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerThrewProjectileEventArgs.FullForce">
            <summary>
            Gets the value whenever the throwable was thrown at full force (overhand).
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerThrewProjectileEventArgs.Item">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerThrewProjectileEventArgs.ThrowableItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerThrowingItemEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ThrowingItem"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerThrowingItemEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Pickups.ItemPickupBase,UnityEngine.Rigidbody)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerThrowingItemEventArgs"/> class.
            </summary>
            <param name="hub">The player who is throwing the item.</param>
            <param name="item">The item that is being thrown.</param>
            <param name="rigidbody">The rigidbody of the item.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerThrowingItemEventArgs.Player">
            <summary>
            Gets the player who is throwing the item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerThrowingItemEventArgs.Pickup">
            <summary>
            Gets the Pickup that is being thrown.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerThrowingItemEventArgs.Rigidbody">
            <summary>
            Gets the rigidbody of the item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerThrowingItemEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerThrowingProjectileEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ThrowingProjectile"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerThrowingProjectileEventArgs.#ctor(ReferenceHub,InventorySystem.Items.ThrowableProjectiles.ThrowableItem,InventorySystem.Items.ThrowableProjectiles.ThrowableItem.ProjectileSettings,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerThrowingProjectileEventArgs"/> class.
            </summary>
            <param name="hub">The player who threw the projectile.</param>
            <param name="item">The original throwable item.</param>
            <param name="projectileSettings">Projectile settings at which is throwable being thrown.</param>
            <param name="fullForce">Value whenever the throwable is being thrown at full force (overhand).</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerThrowingProjectileEventArgs.Player">
            <summary>
            Gets the player who threw the projectile.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerThrowingProjectileEventArgs.ThrowableItem">
            <summary>
            Gets the original throwable item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerThrowingProjectileEventArgs.ProjectileSettings">
            <summary>
            Gets or sets the projectile settings at which is throwable being thrown.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerThrowingProjectileEventArgs.FullForce">
            <summary>
            Gets or sets the value whenever the throwable was thrown at full force (overhand).
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerThrowingProjectileEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerThrowingProjectileEventArgs.Item">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerThrowingProjectileEventArgs.ThrowableItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerToggledDisruptorFiringModeEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ToggledDisruptorFiringMode"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerToggledDisruptorFiringModeEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Firearms.Firearm,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerToggledDisruptorFiringModeEventArgs"/> class.
            </summary>
            <param name="hub">The player who toggled the firing mode.</param>
            <param name="weapon">The weapon that the player toggled.</param>
            <param name="singleShot">Whether the mode is now single shot.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerToggledDisruptorFiringModeEventArgs.Player">
            <summary>
            Gets the player who toggled the firing mode.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerToggledDisruptorFiringModeEventArgs.FirearmItem">
            <summary>
            Gets the weapon that the player toggled.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerToggledDisruptorFiringModeEventArgs.SingleShotMode">
            <summary>
            Gets whether the disruptor is in single shot mode.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerToggledFlashlightEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ToggledFlashlight"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerToggledFlashlightEventArgs.#ctor(ReferenceHub,InventorySystem.Items.ToggleableLights.ToggleableLightItemBase,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerToggledFlashlightEventArgs"/> class.
            </summary>
            <param name="hub">The player who toggled the flashlight.</param>
            <param name="item">The flashlight item.</param>
            <param name="newState">New state of the flashlight.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerToggledFlashlightEventArgs.Player">
            <summary>
            Gets the player who toggled the flashlight.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerToggledFlashlightEventArgs.LightItem">
            <summary>
            Gets the flashlight item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerToggledFlashlightEventArgs.NewState">
            <summary>
            Gets the new state of the flashlight.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerToggledFlashlightEventArgs.Item">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerToggledFlashlightEventArgs.LightItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerToggledNoclipEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ToggledNoclip"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerToggledNoclipEventArgs.#ctor(ReferenceHub,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerToggledNoclipEventArgs"/> class.
            </summary>
            <param name="hub">The player who has toggled the noclip.</param>
            <param name="isNoclipping">The new state of the noclip.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerToggledNoclipEventArgs.Player">
            <summary>
            Gets the player who toggled noclip.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerToggledNoclipEventArgs.IsNoclipping">
            <summary>
            Gets whether the player now has noclip enabled or not.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerToggledRadioEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ToggledRadio"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerToggledRadioEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Radio.RadioItem,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerToggledRadioEventArgs"/> class.
            </summary>
            <param name="hub">The player who toggled the radio.</param>
            <param name="radio">The radio item.</param>
            <param name="newState">New state of the radio.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerToggledRadioEventArgs.Player">
            <summary>
            Gets the player who toggled the radio.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerToggledRadioEventArgs.RadioItem">
            <summary>
            Gets the radio item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerToggledRadioEventArgs.NewState">
            <summary>
            Gets the new state of the radio.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerToggledRadioEventArgs.Radio">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerToggledRadioEventArgs.RadioItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerToggledWeaponFlashlightEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ToggledWeaponFlashlight"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerToggledWeaponFlashlightEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Firearms.Firearm,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerToggledWeaponFlashlightEventArgs"/> class.
            </summary>
            <param name="hub">The player who toggled the flashlight.</param>
            <param name="item">The flashlight item.</param>
            <param name="newState">The new state of the flashlight.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerToggledWeaponFlashlightEventArgs.Player">
            <summary>
            Gets the player who toggled the flashlight.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerToggledWeaponFlashlightEventArgs.FirearmItem">
            <summary>
            Gets the flashlight item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerToggledWeaponFlashlightEventArgs.NewState">
            <summary>
            Gets the new state of the flashlight.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerToggledWeaponFlashlightEventArgs.Item">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerToggledWeaponFlashlightEventArgs.FirearmItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingFlashlightEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.TogglingFlashlight"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingFlashlightEventArgs.#ctor(ReferenceHub,InventorySystem.Items.ToggleableLights.ToggleableLightItemBase,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingFlashlightEventArgs"/> class.
            </summary>
            <param name="hub">The player who is toggling the flashlight.</param>
            <param name="item">The flashlight that is being toggled.</param>
            <param name="newState">Whenever the flashlight is being toggled to on or off state.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingFlashlightEventArgs.Player">
            <summary>
            Gets the player who is toggling the flashlight.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingFlashlightEventArgs.LightItem">
            <summary>
            Gets the flashlight that is being toggled.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingFlashlightEventArgs.NewState">
            <summary>
            Gets whether the flashlight is being toggled to on or off state.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingFlashlightEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingFlashlightEventArgs.Item">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingFlashlightEventArgs.LightItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingNoclipEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.TogglingNoclip"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingNoclipEventArgs.#ctor(ReferenceHub,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingNoclipEventArgs"/> class.
            </summary>
            <param name="hub">The player who is attempting to toggle noclip.</param>
            <param name="newState">Whether the noclip state will be enabled or disabled.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingNoclipEventArgs.Player">
            <summary>
            Gets the player who is attempting to toggle noclip.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingNoclipEventArgs.NewNoclipState">
            <summary>
            Gets or sets the new state that will be applied to the noclip flag.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingNoclipEventArgs.IsAllowed">
            <summary>
            Whether the event is allowed to run.
            </summary>
            <remarks>This value is assigned on based on whether the player has noclip permitted. So it may not be allowed by default for some players.</remarks>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingRadioEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.TogglingRadio"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingRadioEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Radio.RadioItem,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingRadioEventArgs"/> class.
            </summary>
            <param name="hub">The player who is toggling a radio.</param>
            <param name="radio">The radio item.</param>
            <param name="newState">New state of the radio being turned off or on.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingRadioEventArgs.Player">
            <summary>
            Gets the player who is toggling a radio.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingRadioEventArgs.RadioItem">
            <summary>
            Gets the radio item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingRadioEventArgs.NewState">
            <summary>
            Gets the new state of the radio being turned off or on.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingRadioEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingRadioEventArgs.Radio">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingRadioEventArgs.RadioItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingWeaponFlashlightEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.TogglingWeaponFlashlight"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingWeaponFlashlightEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Firearms.Firearm,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingWeaponFlashlightEventArgs"/> class.
            </summary>
            <param name="hub">The player who is toggling the flashlight.</param>
            <param name="item">The flashlight item.</param>
            <param name="newState">The new state of the flashlight.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingWeaponFlashlightEventArgs.Player">
            <summary>
            Gets the player who is toggling the flashlight.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingWeaponFlashlightEventArgs.FirearmItem">
            <summary>
            Gets the flashlight item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingWeaponFlashlightEventArgs.NewState">
            <summary>
            Gets the new state of the flashlight.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingWeaponFlashlightEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingWeaponFlashlightEventArgs.Item">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingWeaponFlashlightEventArgs.FirearmItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerTriggeredTeslaEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.TriggeredTesla"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerTriggeredTeslaEventArgs.#ctor(ReferenceHub,TeslaGate)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerTriggeredTeslaEventArgs"/> class.
            </summary>
            <param name="hub">The player who caused the tesla gate to trigger.</param>
            <param name="gate">The tesla gate that is triggered.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerTriggeredTeslaEventArgs.Player">
            <summary>
            Gets the player who is causing a tesla gate to trigger.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerTriggeredTeslaEventArgs.Tesla">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerTriggeringTeslaEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.TriggeringTesla"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerTriggeringTeslaEventArgs.#ctor(ReferenceHub,TeslaGate)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerTriggeringTeslaEventArgs"/> class.
            </summary>
            <param name="hub">The player who is causing a tesla gate to trigger.</param>
            <param name="gate">The tesla gate that is triggering.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerTriggeringTeslaEventArgs.Player">
            <summary>
            Gets the player who is causing a tesla gate to trigger.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerTriggeringTeslaEventArgs.Tesla">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerTriggeringTeslaEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerUncuffedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Uncuffed"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerUncuffedEventArgs.#ctor(ReferenceHub,ReferenceHub,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUncuffedEventArgs"/> class.
            </summary>
            <param name="hub">The player who uncuffed target player.</param>
            <param name="target">The player who was uncuffed.</param>
            <param name="canUnDetainAsScp">Whenever the player can undetain as SCP player.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUncuffedEventArgs.Player">
            <summary>
            Gets the player who uncuffed target player.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUncuffedEventArgs.Target">
            <summary>
            Gets the player who was uncuffed.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUncuffedEventArgs.CanUnDetainAsScp">
            <summary>
            Gets whether the player can undetain as SCP player.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerUncuffingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Uncuffing"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerUncuffingEventArgs.#ctor(ReferenceHub,ReferenceHub,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUncuffingEventArgs"/> class.
            </summary>
            <param name="hub">The player who is uncuffing another player.</param>
            <param name="target">The player who is being uncuffed.</param>
            <param name="canUnDetainAsScp">Whenever the player can undetain as SCP player.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUncuffingEventArgs.Player">
            <summary>
            Gets the player who is uncuffing another player.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUncuffingEventArgs.Target">
            <summary>
            Gets the player who is being uncuffed.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUncuffingEventArgs.CanUnDetainAsScp">
            <summary>
            Gets whether the player can undetain as SCP.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUncuffingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerUnloadedWeaponEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.UnloadedWeapon"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerUnloadedWeaponEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Firearms.Firearm)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUnloadedWeaponEventArgs"/> class.
            </summary>
            <param name="hub">The player who unloaded the weapon.</param>
            <param name="weapon">The weapon that was unloaded.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUnloadedWeaponEventArgs.Player">
            <summary>
            Gets the player who unloaded the weapon.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUnloadedWeaponEventArgs.FirearmItem">
            <summary>
            Gets the weapon that was unloaded.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUnloadedWeaponEventArgs.Weapon">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerUnloadedWeaponEventArgs.FirearmItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerUnloadingWeaponEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.UnloadingWeapon"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerUnloadingWeaponEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Firearms.Firearm)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUnloadingWeaponEventArgs"/> class.
            </summary>
            <param name="hub">The player who is unloading a weapon.</param>
            <param name="weapon">The weapon that is being unloaded.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUnloadingWeaponEventArgs.Player">
            <summary>
            Gets the player who is unloading a weapon.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUnloadingWeaponEventArgs.FirearmItem">
            <summary>
            Gets or sets the weapon that is being unloaded.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUnloadingWeaponEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUnloadingWeaponEventArgs.Weapon">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerUnloadingWeaponEventArgs.FirearmItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerUnlockedGeneratorEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.UnlockedGenerator"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerUnlockedGeneratorEventArgs.#ctor(ReferenceHub,MapGeneration.Distributors.Scp079Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUnlockedGeneratorEventArgs"/> class.
            </summary>
            <param name="hub">The player who unlocked the generator.</param>
            <param name="generator">The generator that the player has unlocked.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUnlockedGeneratorEventArgs.Player">
            <summary>
            Gets the player who has unlocked the generator.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUnlockedGeneratorEventArgs.Generator">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerUnlockedWarheadButtonEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.UnlockedWarheadButton"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerUnlockedWarheadButtonEventArgs.#ctor(ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUnlockedWarheadButtonEventArgs"/> class.
            </summary>
            <param name="hub">The player who has unlocked the warhead button.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUnlockedWarheadButtonEventArgs.Player">
            <summary>
            Gets the player who has unlocked the warhead button.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerUnlockingGeneratorEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.UnlockingGenerator"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerUnlockingGeneratorEventArgs.#ctor(ReferenceHub,MapGeneration.Distributors.Scp079Generator,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUnlockingGeneratorEventArgs"/> class.
            </summary>
            <param name="hub">The player who is unlocking the generator.</param>
            <param name="generator">The generator that the player is unlocking.</param>
            <param name="canOpen">Whether the generator can be opened.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUnlockingGeneratorEventArgs.Player">
            <summary>
            Gets the player who is unlocking the generator.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUnlockingGeneratorEventArgs.Generator">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUnlockingGeneratorEventArgs.CanOpen">
            <summary>
            Gets whether the player can open the generator.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUnlockingGeneratorEventArgs.IsAllowed">
            <summary>
            Gets whether this event is allowed. Not allowing this event will not unlock the generator and no denied animation is played.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerUnlockingWarheadButtonEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.UnlockingWarheadButton"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerUnlockingWarheadButtonEventArgs.#ctor(ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUnlockingWarheadButtonEventArgs"/> class.
            </summary>
            <param name="hub">The player who unlocking the warhead button.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUnlockingWarheadButtonEventArgs.Player">
            <summary>
            Gets the player who is unlocking the warhead button.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUnlockingWarheadButtonEventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerUnmutedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Unmuted"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerUnmutedEventArgs.#ctor(ReferenceHub,ReferenceHub,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUnmutedEventArgs"/> class.
            </summary>
            <param name="hub">The player who was unmuted.</param>
            <param name="issuer">The player who issued the unmute.</param>
            <param name="isIntercom">Whenever the unmute was for intercom.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUnmutedEventArgs.Player">
            <summary>
            Gets the player who was unmuted.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUnmutedEventArgs.Issuer">
            <summary>
            Gets the player who issued the unmute.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUnmutedEventArgs.IsIntercom">
            <summary>
            Gets whether the unmute was for intercom.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerUnmutingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Unmuting"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerUnmutingEventArgs.#ctor(ReferenceHub,ReferenceHub,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUnmutingEventArgs"/> class.
            </summary>
            <param name="hub">The player who is being unmuted.</param>
            <param name="issuer">The player who issued the unmute action.</param>
            <param name="isIntercom">Whenever is unmute for intercom.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUnmutingEventArgs.Player">
            <summary>
            Gets the player who is being unmuted.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUnmutingEventArgs.Issuer">
            <summary>
            Gets the player who issued the unmute action.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUnmutingEventArgs.IsIntercom">
            <summary>
            Gets or sets whether is unmute for intercom.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUnmutingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerUsedIntercomEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.UsedIntercom"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerUsedIntercomEventArgs.#ctor(ReferenceHub,PlayerRoles.Voice.IntercomState)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUsedIntercomEventArgs"/> class.
            </summary>
            <param name="hub">The player who used the intercom.</param>
            <param name="state">State of the intercom.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUsedIntercomEventArgs.Player">
            <summary>
            Gets the player who used the intercom.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUsedIntercomEventArgs.State">
            <summary>
            Gets the state of the intercom.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerUsedItemEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.UsedItem"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerUsedItemEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Usables.UsableItem)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUsedItemEventArgs"/> class.
            </summary>
            <param name="hub">The player who used the item.</param>
            <param name="item">Item that was used.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUsedItemEventArgs.Player">
            <summary>
            Gets the player that used the item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUsedItemEventArgs.UsableItem">
            <summary>
            Gets the item that was used.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUsedItemEventArgs.Item">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerUsedItemEventArgs.UsableItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerUsedRadioEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.UsedRadio"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerUsedRadioEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Radio.RadioItem,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUsedRadioEventArgs"/> class.
            </summary>
            <param name="hub">Player that used the radio.</param>
            <param name="radio">Radio that was being used.</param>
            <param name="drain">Drain amount of the battery per second.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUsedRadioEventArgs.Player">
            <summary>
            Gets the player that used the radio.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUsedRadioEventArgs.RadioItem">
            <summary>
            Gets the radio that was being used.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUsedRadioEventArgs.Drain">
            <summary>
            Gets the drain amount of the battery per second.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUsedRadioEventArgs.Radio">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerUsedRadioEventArgs.RadioItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerUsingIntercomEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.UsingIntercom"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerUsingIntercomEventArgs.#ctor(ReferenceHub,PlayerRoles.Voice.IntercomState)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUsingIntercomEventArgs"/> class.
            </summary>
            <param name="hub">The player that is using the intercom.</param>
            <param name="state">State of the intercom.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUsingIntercomEventArgs.Player">
            <summary>
            Gets the player that is using the intercom.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUsingIntercomEventArgs.State">
            <summary>
            Gets the state of the intercom.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUsingIntercomEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerUsingItemEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.UsingItem"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerUsingItemEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Usables.UsableItem)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUsingItemEventArgs"/> class.
            </summary>
            <param name="hub">The player using the item.</param>
            <param name="item">The item that is being used.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUsingItemEventArgs.Player">
            <summary>
            Gets the player using the item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUsingItemEventArgs.UsableItem">
            <summary>
            Gets the item that is being used.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUsingItemEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUsingItemEventArgs.Item">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerUsingItemEventArgs.UsableItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerUsingRadioEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.UsingRadio"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerUsingRadioEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Radio.RadioItem,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUsingRadioEventArgs"/> class.
            </summary>
            <param name="hub">The player who is using the radio.</param>
            <param name="radio">Radio item that is being used.</param>
            <param name="drain">Battery drain amount per second.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUsingRadioEventArgs.Player">
            <summary>
            Gets the player who is using the radio.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUsingRadioEventArgs.RadioItem">
            <summary>
            Gets the radio that is being used.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUsingRadioEventArgs.Drain">
            <summary>
            Gets the battery drain amount per second.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUsingRadioEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerUsingRadioEventArgs.Radio">
            <inheritdoc cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerUsingRadioEventArgs.RadioItem"/>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerValidatedVisibilityEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ValidatedVisibility"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerValidatedVisibilityEventArgs.#ctor(ReferenceHub,ReferenceHub,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerValidatedVisibilityEventArgs"/> class.
            </summary>
            <param name="observer">The observing player.</param>
            <param name="target">The target player.</param>
            <param name="isVisible">The observers visibility to the target.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerValidatedVisibilityEventArgs.Player">
            <summary>
            The observing player that checked if they could see the target.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerValidatedVisibilityEventArgs.Target">
            <summary>
            The target player that was checked for visibility from the observer.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerValidatedVisibilityEventArgs.IsVisible">
            <summary>
            Gets or sets whether the observer <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerValidatedVisibilityEventArgs.Player"/> could see the target <see cref="P:LabApi.Events.Arguments.PlayerEvents.PlayerValidatedVisibilityEventArgs.Target"/>.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.PlayerEvents.PlayerZoneChangedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ZoneChanged"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.PlayerEvents.PlayerZoneChangedEventArgs.#ctor(ReferenceHub,MapGeneration.FacilityZone,MapGeneration.FacilityZone)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerZoneChangedEventArgs"/> class.
            </summary>
            <param name="player">The player whose zone changed.</param>
            <param name="oldZone">The old zone.</param>
            <param name="newZone">The new zone.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerZoneChangedEventArgs.Player">
            <summary>
            Gets the player whose last known room changed.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerZoneChangedEventArgs.OldZone">
            <summary>
            Gets the old zone. May be <see cref="F:MapGeneration.FacilityZone.None"/> if the player just spawned, went through void and such.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.PlayerEvents.PlayerZoneChangedEventArgs.NewZone">
            <summary>
            Gets the new zone. May be <see cref="F:MapGeneration.FacilityZone.None"/> if the player went into void, died and such.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp0492Events.Scp0492ConsumedCorpseEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp0492Events.ConsumedCorpse"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp0492Events.Scp0492ConsumedCorpseEventArgs.#ctor(ReferenceHub,PlayerRoles.Ragdolls.BasicRagdoll)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp0492Events.Scp0492ConsumedCorpseEventArgs"/> class.
            </summary>
            <param name="hub">The player who consumed the ragdoll.</param>
            <param name="ragdoll">The ragdoll that was consumed.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp0492Events.Scp0492ConsumedCorpseEventArgs.Player">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Scp0492Events.Scp0492ConsumedCorpseEventArgs.Ragdoll">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp0492Events.Scp0492ConsumingCorpseEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp0492Events.ConsumingCorpse"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp0492Events.Scp0492ConsumingCorpseEventArgs.#ctor(ReferenceHub,PlayerRoles.Ragdolls.BasicRagdoll,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp0492Events.Scp0492ConsumingCorpseEventArgs"/> class.
            </summary>
            <param name="hub">The player who is consuming the ragdoll.</param>
            <param name="ragdoll">The ragdoll that is being consumed.</param>
            <param name="healAmount">The amount of health to heal.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp0492Events.Scp0492ConsumingCorpseEventArgs.HealAmount">
            <summary>
            Gets or sets the amount of health to heal.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp0492Events.Scp0492ConsumingCorpseEventArgs.AddToConsumedRagdollList">
            <summary>
            Gets or sets whether to add the consumed ragdoll to the list of consumed ragdolls.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp0492Events.Scp0492ConsumingCorpseEventArgs.HealIfAlreadyConsumed">
            <summary>
            Gets or sets whether to heal the player if the ragdoll has already been consumed.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp0492Events.Scp0492ConsumingCorpseEventArgs.Player">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Scp0492Events.Scp0492ConsumingCorpseEventArgs.Ragdoll">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Scp0492Events.Scp0492ConsumingCorpseEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp0492Events.Scp0492StartedConsumingCorpseEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp0492Events.StartedConsumingCorpse"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp0492Events.Scp0492StartedConsumingCorpseEventArgs.#ctor(ReferenceHub,PlayerRoles.Ragdolls.BasicRagdoll)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp0492Events.Scp0492StartedConsumingCorpseEventArgs"/> class.
            </summary>
            <param name="hub">The player who started consuming the ragdoll.</param>
            <param name="ragdoll">The ragdoll that started to be consumed.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp0492Events.Scp0492StartedConsumingCorpseEventArgs.Player">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Scp0492Events.Scp0492StartedConsumingCorpseEventArgs.Ragdoll">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp0492Events.Scp0492StartingConsumingCorpseEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp0492Events.StartingConsumingCorpse"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp0492Events.Scp0492StartingConsumingCorpseEventArgs.#ctor(ReferenceHub,PlayerRoles.Ragdolls.BasicRagdoll,PlayerRoles.PlayableScps.Scp049.Zombies.ZombieConsumeAbility.ConsumeError)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp0492Events.Scp0492StartingConsumingCorpseEventArgs"/> class.
            </summary>
            <param name="hub">The player who is starting to consume the ragdoll.</param>
            <param name="ragdoll">The ragdoll that is starting to be consumed.</param>
            <param name="error">The <see cref="T:PlayerRoles.PlayableScps.Scp049.Zombies.ZombieConsumeAbility.ConsumeError"/>.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp0492Events.Scp0492StartingConsumingCorpseEventArgs.Error">
            <summary>
            Gets or sets the <see cref="T:PlayerRoles.PlayableScps.Scp049.Zombies.ZombieConsumeAbility.ConsumeError"/>.
            </summary>
            <remarks>Anything other than <see cref="F:PlayerRoles.PlayableScps.Scp049.Zombies.ZombieConsumeAbility.ConsumeError.None"/> will cancel the event.</remarks>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp0492Events.Scp0492StartingConsumingCorpseEventArgs.Player">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Scp0492Events.Scp0492StartingConsumingCorpseEventArgs.Ragdoll">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Scp0492Events.Scp0492StartingConsumingCorpseEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp049Events.Scp049ResurrectedBodyEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp049Events.ResurrectedBody"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp049Events.Scp049ResurrectedBodyEventArgs.#ctor(ReferenceHub,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp049Events.Scp049ResurrectedBodyEventArgs"/> class.
            </summary>
            <param name="target">The player that SCP-049 has resurrected.</param>
            <param name="hub">The SCP-049 player instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp049Events.Scp049ResurrectedBodyEventArgs.Target">
            <summary>
            The player that SCP-049 has resurrected.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp049Events.Scp049ResurrectedBodyEventArgs.Player">
            <summary>
            The SCP-049 player instance.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp049Events.Scp049ResurrectingBodyEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp049Events.ResurrectingBody"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp049Events.Scp049ResurrectingBodyEventArgs.#ctor(LabApi.Features.Wrappers.Ragdoll,ReferenceHub,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp049Events.Scp049ResurrectingBodyEventArgs"/> class.
            </summary>
            <param name="ragdoll">The ragdoll that SCP-049 is resurrecting.</param>
            <param name="target">The player that SCP-049 is resurrecting.</param>
            <param name="hub">The SCP-049 player instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp049Events.Scp049ResurrectingBodyEventArgs.Ragdoll">
            <summary>
            The ragdoll that SCP-049 is resurrecting.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp049Events.Scp049ResurrectingBodyEventArgs.Target">
            <summary>
            The player that SCP-049 is resurrecting.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp049Events.Scp049ResurrectingBodyEventArgs.Player">
            <summary>
            The SCP-049 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp049Events.Scp049ResurrectingBodyEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp049Events.Scp049StartingResurrectionEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp049Events.ResurrectedBody"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp049Events.Scp049StartingResurrectionEventArgs.#ctor(System.Boolean,PlayerRoles.Ragdolls.BasicRagdoll,ReferenceHub,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp049Events.Scp049StartingResurrectionEventArgs"/> class.
            </summary>
            <param name="canResurrect">Whether SCP-049 can resurrect the ragdoll.</param>
            <param name="ragdoll">The ragdoll that SCP-049 is resurrecting.</param>
            <param name="target">The owner of the ragdoll that SCP-049 is resurrecting.</param>
            <param name="hub">The SCP-049 player instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp049Events.Scp049StartingResurrectionEventArgs.CanResurrect">
            <summary>
            Whether SCP-049 can resurrect the ragdoll.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp049Events.Scp049StartingResurrectionEventArgs.Ragdoll">
            <summary>
            The ragdoll that SCP-049 is resurrecting.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp049Events.Scp049StartingResurrectionEventArgs.Target">
            <summary>
            The owner of the ragdoll that SCP-049 is resurrecting.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp049Events.Scp049StartingResurrectionEventArgs.Player">
            <summary>
            The SCP-049 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp049Events.Scp049StartingResurrectionEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp049Events.Scp049UsedDoctorsCallEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp049Events.ResurrectedBody"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp049Events.Scp049UsedDoctorsCallEventArgs.#ctor(ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp049Events.Scp049UsedDoctorsCallEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-049 player instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp049Events.Scp049UsedDoctorsCallEventArgs.Player">
            <summary>
            The SCP-049 player instance.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp049Events.Scp049UsedSenseEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp049Events.UsedSense"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp049Events.Scp049UsedSenseEventArgs.#ctor(ReferenceHub,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp049Events.Scp049UsedSenseEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-049 player instance.</param>
            <param name="target">The player that SCP-049 has used sense on.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp049Events.Scp049UsedSenseEventArgs.Target">
            <summary>
            The player that SCP-049 has used sense on.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp049Events.Scp049UsedSenseEventArgs.Player">
            <summary>
            The SCP-049 player instance.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp049Events.Scp049UsingDoctorsCallEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp049Events.UsingDoctorsCall"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp049Events.Scp049UsingDoctorsCallEventArgs.#ctor(ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp049Events.Scp049UsingDoctorsCallEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-049 player instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp049Events.Scp049UsingDoctorsCallEventArgs.Player">
            <summary>
            The SCP-049 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp049Events.Scp049UsingDoctorsCallEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp049Events.Scp049UsingSenseEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp049Events.UsingSense"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp049Events.Scp049UsingSenseEventArgs.#ctor(ReferenceHub,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp049Events.Scp049UsingSenseEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-049 player instance.</param>
            <param name="target">The player that SCP-049 is using sense on.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp049Events.Scp049UsingSenseEventArgs.Target">
            <summary>
            Gets or sets the player that SCP-049 is using sense on.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp049Events.Scp049UsingSenseEventArgs.Player">
            <summary>
            The SCP-049 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp049Events.Scp049UsingSenseEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp079Events.Scp079BlackedOutRoomEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp079Events.BlackedOutRoom"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp079Events.Scp079BlackedOutRoomEventArgs.#ctor(ReferenceHub,MapGeneration.RoomIdentifier)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079BlackedOutRoomEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-079 player instance.</param>
            <param name="room">The affected room instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079BlackedOutRoomEventArgs.Player">
            <summary>
            The SCP-079 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079BlackedOutRoomEventArgs.Room">
            <summary>
            The affected room instance.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp079Events.Scp079BlackedOutZoneEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp079Events.BlackedOutZone"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp079Events.Scp079BlackedOutZoneEventArgs.#ctor(ReferenceHub,MapGeneration.FacilityZone)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079BlackedOutRoomEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-079 player instance.</param>
            <param name="zone">The affected zone instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079BlackedOutZoneEventArgs.Player">
            <summary>
            The SCP-079 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079BlackedOutZoneEventArgs.Zone">
            <summary>
            The affected <see cref="T:MapGeneration.FacilityZone"/> type.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp079Events.Scp079BlackingOutRoomEventsArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp079Events.BlackingOutRoom"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp079Events.Scp079BlackingOutRoomEventsArgs.#ctor(ReferenceHub,MapGeneration.RoomIdentifier)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079BlackingOutRoomEventsArgs"/> class.
            </summary>
            <param name="hub">The SCP-079 player instance.</param>
            <param name="room">The affected room instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079BlackingOutRoomEventsArgs.Player">
            <summary>
            The SCP-079 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079BlackingOutRoomEventsArgs.Room">
            <summary>
            The affected room instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079BlackingOutRoomEventsArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp079Events.Scp079BlackingOutZoneEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp079Events.BlackingOutZone"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp079Events.Scp079BlackingOutZoneEventArgs.#ctor(ReferenceHub,MapGeneration.FacilityZone)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079BlackingOutZoneEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-079 player instance.</param>
            <param name="zone">The affected zone instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079BlackingOutZoneEventArgs.Player">
            <summary>
            The SCP-079 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079BlackingOutZoneEventArgs.Zone">
            <summary>
            The affected <see cref="T:MapGeneration.FacilityZone"/> type.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079BlackingOutZoneEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp079Events.Scp079CancelledRoomLockdownEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp079Events.CancelledRoomLockdown"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp079Events.Scp079CancelledRoomLockdownEventArgs.#ctor(ReferenceHub,MapGeneration.RoomIdentifier)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079CancelledRoomLockdownEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-079 player instance.</param>
            <param name="room">The affected room instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079CancelledRoomLockdownEventArgs.Player">
            <summary>
            The SCP-079 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079CancelledRoomLockdownEventArgs.Room">
            <summary>
            The affected room instance.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp079Events.Scp079CancellingRoomLockdownEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp079Events.CancellingRoomLockdown"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp079Events.Scp079CancellingRoomLockdownEventArgs.#ctor(ReferenceHub,MapGeneration.RoomIdentifier)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079CancellingRoomLockdownEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-079 player instance.</param>
            <param name="room">The affected room instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079CancellingRoomLockdownEventArgs.Player">
            <summary>
            The SCP-079 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079CancellingRoomLockdownEventArgs.Room">
            <summary>
            The affected room instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079CancellingRoomLockdownEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp079Events.Scp079ChangedCameraEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp079Events.ChangedCamera"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp079Events.Scp079ChangedCameraEventArgs.#ctor(ReferenceHub,PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079ChangedCameraEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-079 player instance.</param>
            <param name="camera">The affected camera instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079ChangedCameraEventArgs.Player">
            <summary>
            The SCP-079 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079ChangedCameraEventArgs.Camera">
            <summary>
            The affected camera instance.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp079Events.Scp079ChangingCameraEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp079Events.ChangingCamera"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp079Events.Scp079ChangingCameraEventArgs.#ctor(ReferenceHub,PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079ChangingCameraEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-079 player instance.</param>
            <param name="camera">The affected camera instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079ChangingCameraEventArgs.Player">
            <summary>
            The SCP-079 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079ChangingCameraEventArgs.Camera">
            <summary>
            The affected camera instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079ChangingCameraEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp079Events.Scp079GainedExperienceEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp079Events.GainedExperience"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp079Events.Scp079GainedExperienceEventArgs.#ctor(ReferenceHub,System.Single,PlayerRoles.PlayableScps.Scp079.Scp079HudTranslation,PlayerRoles.RoleTypeId)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079GainedExperienceEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-079 player instance.</param>
            <param name="amount">The amount of experience gained.</param>
            <param name="reason">The reason of experience gain shown in HUD.</param>
            <param name = "subject" > The optional subject of the notification, used as replacement to display which class has been terminated.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079GainedExperienceEventArgs.Player">
            <summary>
            The SCP-079 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079GainedExperienceEventArgs.Amount">
            <summary>
            The amount of experience gained.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079GainedExperienceEventArgs.Reason">
            <summary>
            The reason of experience gain shown in HUD.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079GainedExperienceEventArgs.Subject">
            <summary>
            Gets optional subject of the notification, used as replacement to display which class has been terminated.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp079Events.Scp079GainingExperienceEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp079Events.GainingExperience"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp079Events.Scp079GainingExperienceEventArgs.#ctor(ReferenceHub,System.Single,PlayerRoles.PlayableScps.Scp079.Scp079HudTranslation,PlayerRoles.RoleTypeId)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079GainingExperienceEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-079 player instance.</param>
            <param name="amount">The amount of experience that is going to be gained.</param>
            <param name="reason">The reason of experience gain that is going to be shown in HUD.</param>
            <param name="subject">The optional subject of the notification, used as replacement to display which class has been terminated.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079GainingExperienceEventArgs.Player">
            <summary>
            Gets the SCP-079 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079GainingExperienceEventArgs.Amount">
            <summary>
            Gets or sets the amount of experience that is going to be gained.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079GainingExperienceEventArgs.Reason">
            <summary>
            Gets or sets the reason of experience gain that is going to be shown in HUD.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079GainingExperienceEventArgs.Subject">
            <summary>
            Gets or sets the optional subject of the notification, used as replacement to display which class has been terminated.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079GainingExperienceEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp079Events.Scp079LeveledUpEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp079Events.LeveledUp"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp079Events.Scp079LeveledUpEventArgs.#ctor(ReferenceHub,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079LeveledUpEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-079 player instance.</param>
            <param name="tier">The new SCP-079's tier.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079LeveledUpEventArgs.Player">
            <summary>
            The SCP-079 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079LeveledUpEventArgs.Tier">
            <summary>
            The new SCP-079's tier.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp079Events.Scp079LevelingUpEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp079Events.LevelingUp"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp079Events.Scp079LevelingUpEventArgs.#ctor(ReferenceHub,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079LevelingUpEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-079 player instance.</param>
            <param name="tier">The new SCP-079's tier.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079LevelingUpEventArgs.Player">
            <summary>
            The SCP-079 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079LevelingUpEventArgs.Tier">
            <summary>
            The new SCP-079's tier.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079LevelingUpEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp079Events.Scp079LockedDoorEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp079Events.LockedDoor"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp079Events.Scp079LockedDoorEventArgs.#ctor(ReferenceHub,Interactables.Interobjects.DoorUtils.DoorVariant)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079LockedDoorEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-079 player instance.</param>
            <param name="door">The affected door instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079LockedDoorEventArgs.Player">
            <summary>
            The SCP-079 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079LockedDoorEventArgs.Door">
            <summary>
            The affected door instance.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp079Events.Scp079LockedDownRoomEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp079Events.LockedDownRoom"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp079Events.Scp079LockedDownRoomEventArgs.#ctor(ReferenceHub,MapGeneration.RoomIdentifier)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079LockedDoorEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-079 player instance.</param>
            <param name="room">The affected room instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079LockedDownRoomEventArgs.Player">
            <summary>
            The SCP-079 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079LockedDownRoomEventArgs.Room">
            <summary>
            The affected room instance.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp079Events.Scp079LockingDoorEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp079Events.LockingDoor"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp079Events.Scp079LockingDoorEventArgs.#ctor(ReferenceHub,Interactables.Interobjects.DoorUtils.DoorVariant)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079LockingDoorEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-079 player instance.</param>
            <param name="door">The affected door instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079LockingDoorEventArgs.Player">
            <summary>
            The SCP-079 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079LockingDoorEventArgs.Door">
            <summary>
            The affected door instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079LockingDoorEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp079Events.Scp079LockingDownRoomEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp079Events.LockingDownRoom"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp079Events.Scp079LockingDownRoomEventArgs.#ctor(ReferenceHub,MapGeneration.RoomIdentifier)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079LockingDownRoomEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-079 player instance.</param>
            <param name="room">The affected room instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079LockingDownRoomEventArgs.Player">
            <summary>
            The SCP-079 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079LockingDownRoomEventArgs.Room">
            <summary>
            The affected room instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079LockingDownRoomEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp079Events.Scp079PingedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp079Events.Pinged"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp079Events.Scp079PingedEventArgs.#ctor(ReferenceHub,UnityEngine.Vector3,UnityEngine.Vector3,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079PingedEventArgs"/> class.
            </summary>
            <param name="player">The SCP-079 player instance.</param>
            <param name="position">The world position of the ping.</param>
            <param name="normal">Normal vector for the ping.</param>
            <param name="index">The index of the ping type.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079PingedEventArgs.Player">
            <summary>
            Gets the SCP-079 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079PingedEventArgs.Position">
            <summary>
            Gets the world ping position.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079PingedEventArgs.Normal">
            <summary>
            Gets the ping normal vector.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079PingedEventArgs.PingType">
            <summary>
            Gets the type of the ping used the icon.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp079Events.Scp079PingingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp079Events.Pinging"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp079Events.Scp079PingingEventArgs.#ctor(ReferenceHub,UnityEngine.Vector3,UnityEngine.Vector3,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079PingingEventArgs"/> class.
            </summary>
            <param name="player">The SCP-079 player instance.</param>
            <param name="position">The world position of the ping.</param>
            <param name="normal">Normal vector for the ping.</param>
            <param name="index">The index of the ping type.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079PingingEventArgs.Player">
            <summary>
            Gets the SCP-079 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079PingingEventArgs.Position">
            <summary>
            Gets or sets the world ping position.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079PingingEventArgs.Normal">
            <summary>
            Gets or sets the ping normal vector.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079PingingEventArgs.PingType">
            <summary>
            Gets or sets the type of the ping used the icon.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079PingingEventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp079Events.Scp079RecontainedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp079Events.Recontained"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp079Events.Scp079RecontainedEventArgs.#ctor(ReferenceHub,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079RecontainedEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-079 player instance.</param>
            <param name="activator">The player who activated the recontainment procedure.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079RecontainedEventArgs.Player">
            <summary>
            The SCP-079 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079RecontainedEventArgs.Activator">
            <summary>
            The player who activated the recontainment procedure.
            </summary>
            <remarks>
            If <see langword="null"/>, the SCP-079 was recontained automatically.
            </remarks>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp079Events.Scp079RecontainingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp079Events.Recontaining"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp079Events.Scp079RecontainingEventArgs.#ctor(ReferenceHub,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079RecontainingEventArgs"/> class.
            </summary>
            <param name="hub">THe SCP-079 player instance.</param>
            <param name="activator">The player who activated the recontainment procedure.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079RecontainingEventArgs.Player">
            <summary>
            The SCP-079 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079RecontainingEventArgs.Activator">
            <summary>
            The player who activated the recontainment procedure.
            </summary>
            <remarks>
            If <see langword="null"/>, the SCP-079 was recontained automatically.
            </remarks>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079RecontainingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp079Events.Scp079UnlockedDoorEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp079Events.UnlockedDoor"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp079Events.Scp079UnlockedDoorEventArgs.#ctor(ReferenceHub,Interactables.Interobjects.DoorUtils.DoorVariant)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079UnlockedDoorEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-079 player instance.</param>
            <param name="door">The affected door instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079UnlockedDoorEventArgs.Player">
            <summary>
            The SCP-079 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079UnlockedDoorEventArgs.Door">
            <summary>
            The affected door instance.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp079Events.Scp079UnlockingDoorEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp079Events.UnlockingDoor"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp079Events.Scp079UnlockingDoorEventArgs.#ctor(ReferenceHub,Interactables.Interobjects.DoorUtils.DoorVariant)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079UnlockingDoorEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-079 player instance.</param>
            <param name="door">The affected door instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079UnlockingDoorEventArgs.Player">
            <summary>
            The SCP-079 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079UnlockingDoorEventArgs.Door">
            <summary>
            The affected door instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079UnlockingDoorEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp079Events.Scp079UsedTeslaEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp079Events.UsedTesla"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp079Events.Scp079UsedTeslaEventArgs.#ctor(ReferenceHub,TeslaGate)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079UsedTeslaEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-079 player instance.</param>
            <param name="tesla">The affected tesla instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079UsedTeslaEventArgs.Player">
            <summary>
            The SCP-079 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079UsedTeslaEventArgs.Tesla">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp079Events.Scp079UsingTeslaEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp079Events.UsingTesla"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp079Events.Scp079UsingTeslaEventArgs.#ctor(ReferenceHub,TeslaGate)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079UsingTeslaEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-079 player instance.</param>
            <param name="tesla">The affected tesla instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079UsingTeslaEventArgs.Player">
            <summary>
            The SCP-079 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079UsingTeslaEventArgs.Tesla">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Scp079Events.Scp079UsingTeslaEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp096Events.Scp096AddedTargetEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp096Events.AddedTarget"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp096Events.Scp096AddedTargetEventArgs.#ctor(ReferenceHub,ReferenceHub,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp096Events.Scp096AddedTargetEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-096 player instance.</param>
            <param name="target">The target player instance.</param>
            <param name="wasLooking">Whether the target looked at SCP-096.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096AddedTargetEventArgs.Player">
            <summary>
            The SCP-096 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096AddedTargetEventArgs.Target">
            <summary>
            The target player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096AddedTargetEventArgs.WasLooking">
            <summary>
            Whether the target was looking at SCP-096.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp096Events.Scp096AddingTargetEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp096Events.AddingTarget"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp096Events.Scp096AddingTargetEventArgs.#ctor(ReferenceHub,ReferenceHub,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp096Events.Scp096AddingTargetEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-096 player instance.</param>
            <param name="target">The target player instance.</param>
            <param name="wasLooking">Whether the target looked at SCP-096.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096AddingTargetEventArgs.Player">
            <summary>
            The SCP-096 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096AddingTargetEventArgs.Target">
            <summary>
            The target player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096AddingTargetEventArgs.WasLooking">
            <summary>
            Whether the target was looking at SCP-096.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096AddingTargetEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp096Events.Scp096ChangedStateEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp096Events.ChangedState"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp096Events.Scp096ChangedStateEventArgs.#ctor(ReferenceHub,PlayerRoles.PlayableScps.Scp096.Scp096RageState)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp096Events.Scp096ChangedStateEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-096 player instance.</param>
            <param name="state">The SCP-096's new rage state.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096ChangedStateEventArgs.Player">
            <summary>
            The SCP-096 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096ChangedStateEventArgs.State">
            <summary>
            The SCP-096's new rage state.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp096Events.Scp096ChangingStateEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp096Events.ChangingState"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp096Events.Scp096ChangingStateEventArgs.#ctor(ReferenceHub,PlayerRoles.PlayableScps.Scp096.Scp096RageState)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp096Events.Scp096ChangingStateEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-096 player instance.</param>
            <param name="state">The SCP-096's new rage state.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096ChangingStateEventArgs.Player">
            <summary>
            The SCP-096 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096ChangingStateEventArgs.State">
            <summary>
            The SCP-096's new rage state.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096ChangingStateEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp096Events.Scp096ChargedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp096Events.Charged"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp096Events.Scp096ChargedEventArgs.#ctor(ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp096Events.Scp096ChargedEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-096 player instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096ChargedEventArgs.Player">
            <summary>
            The SCP-096 player instance.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp096Events.Scp096ChargingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp096Events.Charging"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp096Events.Scp096ChargingEventArgs.#ctor(ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp096Events.Scp096ChargingEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-096 player instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096ChargingEventArgs.Player">
            <summary>
            The SCP-096 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096ChargingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp096Events.Scp096EnragedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp096Events.Enraged"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp096Events.Scp096EnragedEventArgs.#ctor(ReferenceHub,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp096Events.Scp096ChargingEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-096 player instance.</param>
            <param name="initialDuration">The initial duration of the rage.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096EnragedEventArgs.Player">
            <summary>
            The SCP-096 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096EnragedEventArgs.InitialDuration">
            <summary>
            The initial duration of the rage.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp096Events.Scp096EnragingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp096Events.Enraging"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp096Events.Scp096EnragingEventArgs.#ctor(ReferenceHub,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp096Events.Scp096EnragingEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-096 player instance.</param>
            <param name="initialDuration">The initial duration of the rage.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096EnragingEventArgs.Player">
            <summary>
            The SCP-096 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096EnragingEventArgs.InitialDuration">
            <summary>
            The initial duration of the rage.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096EnragingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp096Events.Scp096PriedGateEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp096Events.PriedGate"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp096Events.Scp096PriedGateEventArgs.#ctor(ReferenceHub,Interactables.Interobjects.PryableDoor)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp096Events.Scp096PriedGateEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-096 player instance.</param>
            <param name="gate">The affected pryable door instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096PriedGateEventArgs.Player">
            <summary>
            The SCP-096 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096PriedGateEventArgs.Gate">
            <summary>
            The affected pryable door instance.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp096Events.Scp096PryingGateEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp096Events.PryingGate"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp096Events.Scp096PryingGateEventArgs.#ctor(ReferenceHub,Interactables.Interobjects.PryableDoor)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp096Events.Scp096PryingGateEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-096 player instance.</param>
            <param name="gate">The affected pryable door instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096PryingGateEventArgs.Player">
            <summary>
            The SCP-096 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096PryingGateEventArgs.Gate">
            <summary>
            The affected pryable door instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096PryingGateEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp096Events.Scp096StartCryingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp096Events.StartCrying"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp096Events.Scp096StartCryingEventArgs.#ctor(ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp096Events.Scp096StartCryingEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-096 player instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096StartCryingEventArgs.Player">
            <summary>
            The SCP-096 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096StartCryingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp096Events.Scp096StartedCryingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp096Events.StartedCrying"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp096Events.Scp096StartedCryingEventArgs.#ctor(ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp096Events.Scp096StartedCryingEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-096 player instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096StartedCryingEventArgs.Player">
            <summary>
            The SCP-096 player instance.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp096Events.Scp096TriedNotToCryEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp096Events.TriedNotToCry"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp096Events.Scp096TriedNotToCryEventArgs.#ctor(ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp096Events.Scp096TriedNotToCryEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-096 player instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096TriedNotToCryEventArgs.Player">
            <summary>
            The SCP-096 player instance.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp096Events.Scp096TryingNotToCryEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp096Events.TryingNotToCry"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp096Events.Scp096TryingNotToCryEventArgs.#ctor(ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp096Events.Scp096TryingNotToCryEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-096 player instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096TryingNotToCryEventArgs.Player">
            <summary>
            The SCP-096 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp096Events.Scp096TryingNotToCryEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp106Events.Scp106ChangedStalkModeEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp106Events.ChangedStalkMode"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp106Events.Scp106ChangedStalkModeEventArgs.#ctor(ReferenceHub,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp106Events.Scp106ChangedStalkModeEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-106 player instance.</param>
            <param name="active">Whether the ability was activated or deactivated.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp106Events.Scp106ChangedStalkModeEventArgs.IsStalkActive">
            <summary>
            Whether the ability was activated or deactivated.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp106Events.Scp106ChangedStalkModeEventArgs.Player">
            <summary>
            The SCP-106 player instance.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp106Events.Scp106ChangedSubmersionStatusEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp106Events.ChangingSubmersionStatus"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp106Events.Scp106ChangedSubmersionStatusEventArgs.#ctor(ReferenceHub,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp106Events.Scp106ChangedSubmersionStatusEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-106 player instance.</param>
            <param name="isSubmerging">Whether the SCP-106 is submerging or emerging.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp106Events.Scp106ChangedSubmersionStatusEventArgs.IsSubmerging">
            <summary>
            Whether the SCP-106 is submerging or emerging.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp106Events.Scp106ChangedSubmersionStatusEventArgs.Player">
            <summary>
            The SCP-106 player instance.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp106Events.Scp106ChangedVigorEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp106Events.ChangedVigor"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp106Events.Scp106ChangedVigorEventArgs.#ctor(ReferenceHub,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp106Events.Scp106ChangedVigorEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-106 player instance.</param>
            <param name="oldVigor">The previous vigor value.</param>
            <param name="newVigor">The new vigor value.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp106Events.Scp106ChangedVigorEventArgs.OldValue">
            <summary>
            The previous vigor value.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp106Events.Scp106ChangedVigorEventArgs.Value">
            <summary>
            The new vigor value.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp106Events.Scp106ChangedVigorEventArgs.Player">
            <summary>
            The SCP-106 player instance.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp106Events.Scp106ChangingStalkModeEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp106Events.ChangingStalkMode"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp106Events.Scp106ChangingStalkModeEventArgs.#ctor(ReferenceHub,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp106Events.Scp106ChangingStalkModeEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-106 player instance.</param>
            <param name="active">Whether the ability is being activated or deactivated.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp106Events.Scp106ChangingStalkModeEventArgs.IsStalkActive">
            <summary>
            Whether the ability is being activated or deactivated.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp106Events.Scp106ChangingStalkModeEventArgs.Player">
            <summary>
            The SCP-106 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp106Events.Scp106ChangingStalkModeEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp106Events.Scp106ChangingSubmersionStatusEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp106Events.ChangingSubmersionStatus"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp106Events.Scp106ChangingSubmersionStatusEventArgs.#ctor(ReferenceHub,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp106Events.Scp106ChangingSubmersionStatusEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-106 player instance.</param>
            <param name="isSubmerging">Whether the SCP-106 is submerging or emerging.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp106Events.Scp106ChangingSubmersionStatusEventArgs.IsSubmerging">
            <summary>
            Whether the SCP-106 is submerging or emerging.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp106Events.Scp106ChangingSubmersionStatusEventArgs.Player">
            <summary>
            The SCP-106 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp106Events.Scp106ChangingSubmersionStatusEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp106Events.Scp106ChangingVigorEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp106Events.ChangingVigor"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp106Events.Scp106ChangingVigorEventArgs.#ctor(ReferenceHub,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp106Events.Scp106ChangingVigorEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-106 player instance.</param>
            <param name="oldValue">The previous vigor value.</param>
            <param name="value">The new vigor value.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp106Events.Scp106ChangingVigorEventArgs.OldValue">
            <summary>
            The previous vigor value.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp106Events.Scp106ChangingVigorEventArgs.Value">
            <summary>
            The new vigor value.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp106Events.Scp106ChangingVigorEventArgs.Player">
            <summary>
            The SCP-106 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp106Events.Scp106ChangingVigorEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp106Events.Scp106TeleportedPlayerEvent">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp106Events.TeleportedPlayer"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp106Events.Scp106TeleportedPlayerEvent.#ctor(ReferenceHub,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp106Events.Scp106TeleportedPlayerEvent"/> class.
            </summary>
            <param name="hub">The SCP-106 player instance.</param>
            <param name="target">The player that was teleported.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp106Events.Scp106TeleportedPlayerEvent.Player">
            <summary>
            Gets the SCP-106 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp106Events.Scp106TeleportedPlayerEvent.Target">
            <summary>
            Gets the player that was teleported.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp106Events.Scp106TeleportingPlayerEvent">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp106Events.TeleportingPlayer"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp106Events.Scp106TeleportingPlayerEvent.#ctor(ReferenceHub,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp106Events.Scp106TeleportingPlayerEvent"/> class.
            </summary>
            <param name="hub">The SCP-106 player instance.</param>
            <param name="target">The player that is being teleported.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp106Events.Scp106TeleportingPlayerEvent.Player">
            <summary>
            Gets the SCP-106 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp106Events.Scp106TeleportingPlayerEvent.Target">
            <summary>
            Gets the player that is being teleported.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp106Events.Scp106TeleportingPlayerEvent.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp106Events.Scp106UsedHunterAtlasEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp106Events.UsedHunterAtlas"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp106Events.Scp106UsedHunterAtlasEventArgs.#ctor(ReferenceHub,UnityEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp106Events.Scp106UsedHunterAtlasEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-106 player instance.</param>
            <param name="originalPosition">The original position.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp106Events.Scp106UsedHunterAtlasEventArgs.Player">
            <summary>
            The SCP-106 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp106Events.Scp106UsedHunterAtlasEventArgs.OriginalPosition">
            <summary>
            The original position.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp106Events.Scp106UsingHunterAtlasEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp106Events.UsingHunterAtlas"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp106Events.Scp106UsingHunterAtlasEventArgs.#ctor(ReferenceHub,UnityEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp106Events.Scp106UsingHunterAtlasEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-106 player instance.</param>
            <param name="destinationPosition">The destination position.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp106Events.Scp106UsingHunterAtlasEventArgs.Player">
            <summary>
            The SCP-106 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp106Events.Scp106UsingHunterAtlasEventArgs.DestinationPosition">
            <summary>
            The destination position.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp106Events.Scp106UsingHunterAtlasEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp127Events.Scp127GainExperienceEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp127Events.GainExperience"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp127Events.Scp127GainExperienceEventArgs.#ctor(InventorySystem.Items.Firearms.Firearm,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp127Events.Scp127GainExperienceEventArgs"/> class.
            </summary>
            <param name="weapon">The Scp-127 firearm.</param>
            <param name="exp">The gained experience.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp127Events.Scp127GainExperienceEventArgs.Scp127Item">
            <summary>
            Gets the SCP-127 firearm.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp127Events.Scp127GainExperienceEventArgs.ExperienceGain">
            <summary>
            Gets the amount of experience the SCP-127 gained.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp127Events.Scp127GainingExperienceEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp127Events.GainingExperience"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp127Events.Scp127GainingExperienceEventArgs.#ctor(InventorySystem.Items.Firearms.Firearm,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp127Events.Scp127GainingExperienceEventArgs"/> class.
            </summary>
            <param name="weapon">The Scp-127 firearm.</param>
            <param name="exp">The experience to be gained.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp127Events.Scp127GainingExperienceEventArgs.Scp127Item">
            <summary>
            Gets the SCP-127 firearm.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp127Events.Scp127GainingExperienceEventArgs.ExperienceGain">
            <summary>
            Gets or sets the amount of experience the SCP-127 will gain.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp127Events.Scp127GainingExperienceEventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp127Events.Scp127LevellingUpEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp127Events.LevellingUp"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp127Events.Scp127LevellingUpEventArgs.#ctor(InventorySystem.Items.Firearms.Firearm,InventorySystem.Items.Firearms.Modules.Scp127.Scp127Tier)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp127Events.Scp127LevellingUpEventArgs"/> class.
            </summary>
            <param name="weapon">The Scp-127 firearm.</param>
            <param name="tier">The new tier.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp127Events.Scp127LevellingUpEventArgs.Scp127Item">
            <summary>
            Gets the SCP-127 firearm.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp127Events.Scp127LevellingUpEventArgs.Tier">
            <summary>
            Gets the new tier of SCP-127.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp127Events.Scp127LevellingUpEventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp127Events.Scp127LevelUpEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp127Events.LevelUp"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp127Events.Scp127LevelUpEventArgs.#ctor(InventorySystem.Items.Firearms.Firearm,InventorySystem.Items.Firearms.Modules.Scp127.Scp127Tier)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp127Events.Scp127LevelUpEventArgs"/> class.
            </summary>
            <param name="weapon">The Scp-127 firearm.</param>
            <param name="tier">The new tier.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp127Events.Scp127LevelUpEventArgs.Scp127Item">
            <summary>
            Gets the SCP-127 firearm.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp127Events.Scp127LevelUpEventArgs.Tier">
            <summary>
            Gets the new tier of SCP-127.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp127Events.Scp127TalkedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp127Events.Talked"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp127Events.Scp127TalkedEventArgs.#ctor(InventorySystem.Items.Firearms.Firearm,InventorySystem.Items.Firearms.Modules.Scp127.Scp127VoiceLinesTranslation,InventorySystem.Items.Firearms.Modules.Scp127.Scp127VoiceTriggerBase.VoiceLinePriority)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp127Events.Scp127TalkingEventArgs"/> class.
            </summary>
            <param name="weapon">The Scp-127 firearm.</param>
            <param name="voiceLine">The voiceline to be played.</param>
            <param name="priority">The priority of the voiceline.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp127Events.Scp127TalkedEventArgs.Scp127Item">
            <summary>
            Gets the SCP-127 firearm.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp127Events.Scp127TalkedEventArgs.VoiceLine">
            <summary>
            Gets the voiceline the SCP-127 played.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp127Events.Scp127TalkedEventArgs.Priority">
            <summary>
            Gets the priority the voiceline has been played with.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp127Events.Scp127TalkingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp127Events.Talking"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp127Events.Scp127TalkingEventArgs.#ctor(InventorySystem.Items.Firearms.Firearm,InventorySystem.Items.Firearms.Modules.Scp127.Scp127VoiceLinesTranslation,InventorySystem.Items.Firearms.Modules.Scp127.Scp127VoiceTriggerBase.VoiceLinePriority)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp127Events.Scp127TalkingEventArgs"/> class.
            </summary>
            <param name="weapon">The Scp-127 firearm.</param>
            <param name="voiceLine">The voiceline to be played.</param>
            <param name="priority">The priority of the voiceline.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp127Events.Scp127TalkingEventArgs.Scp127Item">
            <summary>
            Gets the SCP-127 firearm.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp127Events.Scp127TalkingEventArgs.VoiceLine">
            <summary>
            Gets or sets the voiceline the SCP-127 will play.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp127Events.Scp127TalkingEventArgs.Priority">
            <summary>
            Gets or sets the priority the voiceline will be played with.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp127Events.Scp127TalkingEventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp173Events.Scp173AddedObserverEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp173Events.AddedObserver"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp173Events.Scp173AddedObserverEventArgs.#ctor(ReferenceHub,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp173Events.Scp173AddedObserverEventArgs"/> class.
            </summary>
            <param name="target">The player that is observing the SCP-173 player.</param>
            <param name="hub">The SCP-173 player instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173AddedObserverEventArgs.Target">
            <summary>
            The player that is observing the SCP-173 player.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173AddedObserverEventArgs.Player">
            <summary>
            The SCP-173 player instance.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp173Events.Scp173AddingObserverEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp173Events.AddingObserver"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp173Events.Scp173AddingObserverEventArgs.#ctor(ReferenceHub,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp173Events.Scp173AddingObserverEventArgs"/> class.
            </summary>
            <param name="target">The player that is observing the SCP-173 player.</param>
            <param name="hub">The SCP-173 player instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173AddingObserverEventArgs.Target">
            <summary>
            The player that is observing the SCP-173 player.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173AddingObserverEventArgs.Player">
            <summary>
            The SCP-173 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173AddingObserverEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp173Events.Scp173BreakneckSpeedChangedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp173Events.BreakneckSpeedChanged"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp173Events.Scp173BreakneckSpeedChangedEventArgs.#ctor(ReferenceHub,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp173Events.Scp173BreakneckSpeedChangedEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-173 player instance.</param>
            <param name="active">The new breakneck speed state.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173BreakneckSpeedChangedEventArgs.Active">
            <summary>
            Whether the SCP-173 player is currently in breakneck speed mode.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173BreakneckSpeedChangedEventArgs.Player">
            <summary>
            The SCP-173 player instance.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp173Events.Scp173BreakneckSpeedChangingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp173Events.BreakneckSpeedChanging"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp173Events.Scp173BreakneckSpeedChangingEventArgs.#ctor(ReferenceHub,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp173Events.Scp173BreakneckSpeedChangingEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-173 player instance.</param>
            <param name="active">The new breakneck speed state.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173BreakneckSpeedChangingEventArgs.Active">
            <summary>
            Whether the ability is being activated or deactivated.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173BreakneckSpeedChangingEventArgs.Player">
            <summary>
            The SCP-173 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173BreakneckSpeedChangingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp173Events.Scp173CreatedTantrumEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp173Events.CreatedTantrum"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp173Events.Scp173CreatedTantrumEventArgs.#ctor(Hazards.TantrumEnvironmentalHazard,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp173Events.Scp173CreatedTantrumEventArgs"/> class.
            </summary>
            <param name="tantrumInstance">The tantrum instance.</param>
            <param name="hub">The SCP-173 player instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173CreatedTantrumEventArgs.Tantrum">
            <summary>
            The tantrum instance created by SCP-173.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173CreatedTantrumEventArgs.Player">
            <summary>
            The SCP-173 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173CreatedTantrumEventArgs.TantrumInstance">
            <inheritdoc cref="P:LabApi.Events.Arguments.Scp173Events.Scp173CreatedTantrumEventArgs.Tantrum"/>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp173Events.Scp173CreatingTantrumEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp173Events.CreatingTantrum"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp173Events.Scp173CreatingTantrumEventArgs.#ctor(ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp173Events.Scp173CreatingTantrumEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-173 player instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173CreatingTantrumEventArgs.Player">
            <summary>
            The SCP-173 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173CreatingTantrumEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp173Events.Scp173PlayedSoundEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp173Events.PlayedSound"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp173Events.Scp173PlayedSoundEventArgs.#ctor(ReferenceHub,PlayerRoles.PlayableScps.Scp173.Scp173AudioPlayer.Scp173SoundId)">
            <summary>
            The sound id that is being played.
            </summary>
            <param name="hub">The SCP-173 player instance.</param>
            <param name="soundId">The sound id being played.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173PlayedSoundEventArgs.SoundId">
            <summary>
            The sound id that is being played.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173PlayedSoundEventArgs.Player">
            <summary>
            The SCP-173 player instance.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp173Events.Scp173PlayingSoundEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp173Events.PlayingSound"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp173Events.Scp173PlayingSoundEventArgs.#ctor(ReferenceHub,PlayerRoles.PlayableScps.Scp173.Scp173AudioPlayer.Scp173SoundId)">
            <summary>
            The sound id that is going to be played.
            </summary>
            <param name="hub">The SCP-173 player instance.</param>
            <param name="soundId">The sound id going to be played.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173PlayingSoundEventArgs.SoundId">
            <summary>
            The sound id that is going to be played.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173PlayingSoundEventArgs.Player">
            <summary>
            The SCP-173 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173PlayingSoundEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp173Events.Scp173RemovedObserverEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp173Events.RemovedObserver"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp173Events.Scp173RemovedObserverEventArgs.#ctor(ReferenceHub,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp173Events.Scp173RemovedObserverEventArgs"/> class.
            </summary>
            <param name="target">The player that was observing the SCP-173 player.</param>
            <param name="hub">The SCP-173 player instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173RemovedObserverEventArgs.Target">
            <summary>
            The player that was observing the SCP-173 player.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173RemovedObserverEventArgs.Player">
            <summary>
            The SCP-173 player instance.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp173Events.Scp173RemovingObserverEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp173Events.RemovingObserver"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp173Events.Scp173RemovingObserverEventArgs.#ctor(ReferenceHub,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp173Events.Scp173RemovingObserverEventArgs"/> class.
            </summary>
            <param name="target">The player that was observing the SCP-173 player.</param>
            <param name="hub">The SCP-173 player instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173RemovingObserverEventArgs.Target">
            <summary>
            The player that was observing the SCP-173 player.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173RemovingObserverEventArgs.Player">
            <summary>
            The SCP-173 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173RemovingObserverEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp173Events.Scp173TeleportedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp173Events.Teleported"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp173Events.Scp173TeleportedEventArgs.#ctor(ReferenceHub,UnityEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp173Events.Scp173TeleportingEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-173 player.</param>
            <param name="position">The target position to teleport to.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173TeleportedEventArgs.Player">
            <summary>
            Gets the SCP-173 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173TeleportedEventArgs.Position">
            <summary>
            Gets the target player position that the SCP-173 has teleported to.
            Note that this position is on the floor and the <see cref="P:LabApi.Events.Arguments.Scp173Events.Scp173TeleportedEventArgs.Player"/> has been teleported 1/2 of its character height up to prevent clipping through floor.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173TeleportedEventArgs.IsAllowed">
            <summary>
            Gets or sets whether the SCP-173 player can teleport.<para/>
            This even is fired even if the charge ability is not ready so you may override it on the server aswell.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp173Events.Scp173TeleportingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp173Events.Teleporting"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp173Events.Scp173TeleportingEventArgs.#ctor(ReferenceHub,UnityEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp173Events.Scp173TeleportingEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-173 player.</param>
            <param name="position">The target position to teleport to.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173TeleportingEventArgs.Player">
            <summary>
            Gets the SCP-173 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173TeleportingEventArgs.Position">
            <summary>
            Gets or sets the target player position to teleport SCP-173 player to.<para/>
            Note that this position is on the floor and the <see cref="P:LabApi.Events.Arguments.Scp173Events.Scp173TeleportingEventArgs.Player"/> is then teleported 1/2 of its character height up to prevent clipping through floor.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp173Events.Scp173TeleportingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp3114Events.Scp3114DisguisedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp3114Events.Disguised"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp3114Events.Scp3114DisguisedEventArgs.#ctor(ReferenceHub,PlayerRoles.Ragdolls.BasicRagdoll)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp3114Events.Scp3114DisguisedEventArgs"/> class.
            </summary>
            <param name="player">The player SCP who disguised.</param>
            <param name="ragdoll">The ragdoll used for disguising purposes.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp3114Events.Scp3114DisguisedEventArgs.Player">
            <inheritdoc/>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp3114Events.Scp3114DisguisedEventArgs.Ragdoll">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp3114Events.Scp3114DisguisingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp3114Events.Disguised"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp3114Events.Scp3114DisguisingEventArgs.#ctor(ReferenceHub,PlayerRoles.Ragdolls.BasicRagdoll)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp3114Events.Scp3114DisguisedEventArgs"/> class.
            </summary>
            <param name="player">The player SCP who is disguising.</param>
            <param name="ragdoll">The ragdoll used for disguising purposes.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp3114Events.Scp3114DisguisingEventArgs.Player">
            <inheritdoc/>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp3114Events.Scp3114DisguisingEventArgs.Ragdoll">
            <inheritdoc/>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp3114Events.Scp3114DisguisingEventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp3114Events.Scp3114RevealedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp3114Events.Revealed"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp3114Events.Scp3114RevealedEventArgs.#ctor(ReferenceHub,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp3114Events.Scp3114RevealedEventArgs"/> class.
            </summary>
            <param name="player">The player SCP so is undisguised.</param>
            <param name="forced">Bool whether the reveal is forced by timer running out or if it was player's request.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp3114Events.Scp3114RevealedEventArgs.Player">
            <inheritdoc/>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp3114Events.Scp3114RevealedEventArgs.Forced">
            <summary>
            Gets whether the reveal was forced by timer running out or if it was player's request.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp3114Events.Scp3114RevealingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp3114Events.Revealing"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp3114Events.Scp3114RevealingEventArgs.#ctor(ReferenceHub,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp3114Events.Scp3114RevealingEventArgs"/> class.
            </summary>
            <param name="player">The player SCP who is undisguising.</param>
            <param name="forced">Bool whether the reveal is forced by timer running out or if it was player's request.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp3114Events.Scp3114RevealingEventArgs.Player">
            <inheritdoc/>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp3114Events.Scp3114RevealingEventArgs.Forced">
            <summary>
            Gets whether the reveal is forced by timer running out or if it was player's request.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp3114Events.Scp3114RevealingEventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp3114Events.Scp3114StartedDanceEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp3114Events.Dance"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp3114Events.Scp3114StartedDanceEventArgs.#ctor(ReferenceHub,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp3114Events.Scp3114StartingDanceEventArgs"/> class.
            </summary>
            <param name="player">The player who is starting to dance.</param>
            <param name="danceId">The index of the animation to play.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp3114Events.Scp3114StartedDanceEventArgs.DanceId">
            <summary>
            Gets or sets the index of the animation to play.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp3114Events.Scp3114StartedDanceEventArgs.Player">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp3114Events.Scp3114StartingDanceEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp3114Events.StartDancing"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp3114Events.Scp3114StartingDanceEventArgs.#ctor(ReferenceHub,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp3114Events.Scp3114StartingDanceEventArgs"/> class.
            </summary>
            <param name="player">The player who is starting to dance.</param>
            <param name="danceId">The index of the animation to play.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp3114Events.Scp3114StartingDanceEventArgs.Player">
            <inheritdoc/>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp3114Events.Scp3114StartingDanceEventArgs.DanceId">
            <summary>
            Gets or sets the index of the animation to play.
            Currently there are 7 dance variants in game.
            <para>Any value above max length will be moved to equal index via modulo (%) operator.</para>
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp3114Events.Scp3114StartingDanceEventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleAbortedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp3114Events.StrangleAborted"/> events.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleAbortedEventArgs.#ctor(ReferenceHub,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleAbortedEventArgs"/> class.
            </summary>
            <param name="scp3114Hub">The <see cref="T:ReferenceHub"/> component of the SCP-3114 player.</param>
            <param name="targetHub">The <see cref="T:ReferenceHub"/> component of the target player.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleAbortedEventArgs.Player">
            <summary>
            The SCP-3114 player.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleAbortedEventArgs.Target">
            <summary>
            The strangle target.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleAbortingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp3114Events.StrangleAborting"/> events.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleAbortingEventArgs.#ctor(ReferenceHub,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleAbortingEventArgs"/> class.
            </summary>
            <param name="scp3114Hub">The <see cref="T:ReferenceHub"/> component of the SCP-3114 player.</param>
            <param name="targetHub">The <see cref="T:ReferenceHub"/> component of the target player.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleAbortingEventArgs.Player">
            <summary>
            The SCP-3114 player.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleAbortingEventArgs.Target">
            <summary>
            The strangle target.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleAbortingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleStartedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp3114Events.StrangleStarted"/> events.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleStartedEventArgs.#ctor(ReferenceHub,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleStartedEventArgs"/> class.
            </summary>
            <param name="scp3114Hub">The <see cref="T:ReferenceHub"/> component of the SCP-3114 player.</param>
            <param name="targetHub">The <see cref="T:ReferenceHub"/> component of the target player.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleStartedEventArgs.Player">
            <summary>
            The SCP-3114 player.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleStartedEventArgs.Target">
            <summary>
            The strangle target.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleStartingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.Scp3114Events.StrangleStarting"/> events.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleStartingEventArgs.#ctor(ReferenceHub,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleStartingEventArgs"/> class.
            </summary>
            <param name="scp3114Hub">The <see cref="T:ReferenceHub"/> component of the SCP-3114 player.</param>
            <param name="targetHub">The <see cref="T:ReferenceHub"/> component of the target player.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleStartingEventArgs.Player">
            <summary>
            The SCP-3114 player.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleStartingEventArgs.Target">
            <summary>
            The strangle target.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleStartingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp914Events.Scp914ActivatedEventArgs">
            <summary>
            Represents the event arguments for when SCP-914 is activated.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp914Events.Scp914ActivatedEventArgs.#ctor(Scp914.Scp914KnobSetting,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp914Events.Scp914ActivatedEventArgs"/> class.
            </summary>
            <param name="knobSetting">The knob setting of SCP-914.</param>
            <param name="hub">The player that activated SCP-914.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914ActivatedEventArgs.KnobSetting">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914ActivatedEventArgs.Player">
            <summary>
            The player that activated SCP-914.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp914Events.Scp914ActivatingEventArgs">
            <summary>
            Represents the event arguments for when SCP-914 is being activated.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp914Events.Scp914ActivatingEventArgs.#ctor(Scp914.Scp914KnobSetting,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp914Events.Scp914ActivatingEventArgs"/> class.
            </summary>
            <param name="knobSetting">The knob setting of SCP-914.</param>
            <param name="hub">The player that is activating SCP-914.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914ActivatingEventArgs.KnobSetting">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914ActivatingEventArgs.Player">
            <summary>
            The player that is activating SCP-914.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914ActivatingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp914Events.Scp914KnobChangedEventArgs">
            <summary>
            Represents the event arguments for when the knob of SCP-914 is changed.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp914Events.Scp914KnobChangedEventArgs.#ctor(Scp914.Scp914KnobSetting,Scp914.Scp914KnobSetting,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp914Events.Scp914KnobChangedEventArgs"/> class.
            </summary>
            <param name="oldKnobSetting">The old knob setting of SCP-914.</param>
            <param name="knobSetting">The new knob setting of SCP-914.</param>
            <param name="hub">The player that has changed the knob.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914KnobChangedEventArgs.OldKnobSetting">
            <summary>
            Gets the old knob setting used by 914.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914KnobChangedEventArgs.KnobSetting">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914KnobChangedEventArgs.Player">
            <summary>
            The player that has changed the knob.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp914Events.Scp914KnobChangingEventArgs">
            <summary>
            Represents the event arguments for when the knob of SCP-914 is changing.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp914Events.Scp914KnobChangingEventArgs.#ctor(Scp914.Scp914KnobSetting,Scp914.Scp914KnobSetting,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp914Events.Scp914KnobChangingEventArgs"/> class.
            </summary>
            <param name="oldKnobSetting">The old knob setting of SCP-914.</param>
            <param name="knobSetting">The new knob setting of SCP-914.</param>
            <param name="hub">The player that is changing the knob.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914KnobChangingEventArgs.OldKnobSetting">
            <summary>
            Gets the old knob setting used by SCP-914.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914KnobChangingEventArgs.KnobSetting">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914KnobChangingEventArgs.Player">
            <summary>
            The player that is changing the knob.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914KnobChangingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp914Events.Scp914ProcessedInventoryItemEventArgs">
            <summary>
            Represents the event arguments for when an item is processed by SCP-914.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp914Events.Scp914ProcessedInventoryItemEventArgs.#ctor(ItemType,InventorySystem.Items.ItemBase,Scp914.Scp914KnobSetting,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp914Events.Scp914ProcessedInventoryItemEventArgs"/> class.
            </summary>
            <param name="oldItemType">The old item type.</param>
            <param name="item">The new item that has been processed by SCP-914.</param>
            <param name="knobSetting">The knob setting of SCP-914.</param>
            <param name="hub">The owner of the item.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914ProcessedInventoryItemEventArgs.OldItemType">
            <summary>
            Gets the old item type.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914ProcessedInventoryItemEventArgs.KnobSetting">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914ProcessedInventoryItemEventArgs.Item">
            <summary>
            The new item that has been processed by SCP-914.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914ProcessedInventoryItemEventArgs.Player">
            <summary>
            The owner of the item.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp914Events.Scp914ProcessedPickupEventArgs">
            <summary>
            Represents the event arguments for when a pickup has been processed by SCP-914.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp914Events.Scp914ProcessedPickupEventArgs.#ctor(ItemType,UnityEngine.Vector3,Scp914.Scp914KnobSetting,InventorySystem.Items.Pickups.ItemPickupBase)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp914Events.Scp914ProcessedPickupEventArgs"/> class.
            </summary>
            <param name="oldItemType">The old item type of the pickup.</param>
            <param name="newPosition">The new position of the pickup.</param>
            <param name="knobSetting">The knob setting of SCP-914.</param>
            <param name="pickup">The new pickup that has been processed by SCP-914.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914ProcessedPickupEventArgs.OldItemType">
            <summary>
            Gets the old item type of the pickup.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914ProcessedPickupEventArgs.NewPosition">
            <summary>
            The new position of the pickup.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914ProcessedPickupEventArgs.KnobSetting">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914ProcessedPickupEventArgs.Pickup">
            <summary>
            The new pickup that has been processed by SCP-914. Can be null if item has been destroyed by 914 recipe.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp914Events.Scp914ProcessedPlayerEventArgs">
            <summary>
            Represents the event arguments for when a player is processed by SCP-914.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp914Events.Scp914ProcessedPlayerEventArgs.#ctor(UnityEngine.Vector3,Scp914.Scp914KnobSetting,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp914Events.Scp914ProcessedPlayerEventArgs"/> class.
            </summary>
            <param name="knobSetting">The knob setting of SCP-914.</param>
            <param name="newPosition">The new position that the player has been processed into.</param>
            <param name="hub">The player that has been processed by SCP-914.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914ProcessedPlayerEventArgs.NewPosition">
            <summary>
            The new position that the player has been processed into.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914ProcessedPlayerEventArgs.KnobSetting">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914ProcessedPlayerEventArgs.Player">
            <summary>
            The player that has been processed by SCP-914.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp914Events.Scp914ProcessingInventoryItemEventArgs">
            <summary>
            Represents the event arguments for when an item is being processed by SCP-914.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp914Events.Scp914ProcessingInventoryItemEventArgs.#ctor(InventorySystem.Items.ItemBase,Scp914.Scp914KnobSetting,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp914Events.Scp914ProcessingInventoryItemEventArgs"/> class.
            </summary>
            <param name="item">The item that is being processed by SCP-914.</param>
            <param name="knobSetting">The knob setting of SCP-914.</param>
            <param name="hub">The owner of the item.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914ProcessingInventoryItemEventArgs.KnobSetting">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914ProcessingInventoryItemEventArgs.Item">
            <summary>
            The item that is being processed by SCP-914.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914ProcessingInventoryItemEventArgs.Player">
            <summary>
            The owner of the item.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914ProcessingInventoryItemEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp914Events.Scp914ProcessingPickupEventArgs">
            <summary>
            Represents the event arguments for when a pickup is being processed by SCP-914.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp914Events.Scp914ProcessingPickupEventArgs.#ctor(UnityEngine.Vector3,Scp914.Scp914KnobSetting,InventorySystem.Items.Pickups.ItemPickupBase)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp914Events.Scp914ProcessingPickupEventArgs"/> class.
            </summary>
            <param name="newPosition">The new position of the pickup.</param>
            <param name="knobSetting">The knob setting of SCP-914.</param>
            <param name="pickup">The pickup that is being processed by SCP-914.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914ProcessingPickupEventArgs.NewPosition">
            <summary>
            The new position of the pickup.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914ProcessingPickupEventArgs.KnobSetting">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914ProcessingPickupEventArgs.Pickup">
            <summary>
            The pickup that is being processed by SCP-914.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914ProcessingPickupEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp914Events.Scp914ProcessingPlayerEventArgs">
            <summary>
            Represents the event arguments for when a player is being processed by SCP-914.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp914Events.Scp914ProcessingPlayerEventArgs.#ctor(UnityEngine.Vector3,Scp914.Scp914KnobSetting,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp914Events.Scp914ProcessingPlayerEventArgs"/> class.
            </summary>
            <param name="newPosition">The new position that the player will be processed into.</param>
            <param name="knobSetting">The knob setting of SCP-914.</param>
            <param name="hub">The player that is being processed by SCP-914.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914ProcessingPlayerEventArgs.NewPosition">
            <summary>
            The new position that the player will be processed into.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914ProcessingPlayerEventArgs.KnobSetting">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914ProcessingPlayerEventArgs.Player">
            <summary>
            The player that is being processed by SCP-914.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp914Events.Scp914ProcessingPlayerEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp939Events.Scp939AttackedEventArgs">
            <summary>
            Represents the event arguments for when SCP-939 has attacked a player.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp939Events.Scp939AttackedEventArgs.#ctor(ReferenceHub,ReferenceHub,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp939Events.Scp939AttackedEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-939 player instance.</param>
            <param name="target">The destructible that was attacked.</param>
            <param name="damage">The damage dealt.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp939Events.Scp939AttackedEventArgs.Player">
            <summary>
            The SCP-939 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp939Events.Scp939AttackedEventArgs.Target">
            <summary>
            The destructible that is being attacked.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp939Events.Scp939AttackedEventArgs.Damage">
            <summary>
            The damage dealt.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp939Events.Scp939AttackingEventArgs">
            <summary>
            Represents the event arguments for when SCP-939 is attacking a player.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp939Events.Scp939AttackingEventArgs.#ctor(ReferenceHub,ReferenceHub,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp939Events.Scp939AttackingEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-939 player instance.</param>
            <param name="target">The destructible that is being attacked.</param>
            <param name="damage">The damage dealt.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp939Events.Scp939AttackingEventArgs.Target">
            <summary>
            The destructible that is being attacked.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp939Events.Scp939AttackingEventArgs.Player">
            <summary>
            The SCP-939 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp939Events.Scp939AttackingEventArgs.Damage">
            <summary>
            The damage dealt.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp939Events.Scp939AttackingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.Scp939Events.Scp939CreatedAmnesticCloudEventArgs">
            <summary>
            Represents the event arguments for when SCP-939 has created an amnestic cloud.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp939Events.Scp939CreatedAmnesticCloudEventArgs.#ctor(ReferenceHub,PlayerRoles.PlayableScps.Scp939.Scp939AmnesticCloudInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp939Events.Scp939CreatedAmnesticCloudEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-939 player instance.</param>
            <param name="amnesticCloudInstance">The created amnestic cloud instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp939Events.Scp939CreatedAmnesticCloudEventArgs.Player">
            <summary>
            The SCP-939 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp939Events.Scp939CreatedAmnesticCloudEventArgs.AmnesticCloud">
            <summary>
            Gets the created amnestic cloud instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp939Events.Scp939CreatedAmnesticCloudEventArgs.AmnesticCloudInstance">
            <inheritdoc cref="P:LabApi.Events.Arguments.Scp939Events.Scp939CreatedAmnesticCloudEventArgs.AmnesticCloud"/>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp939Events.Scp939CreatingAmnesticCloudEventArgs">
            <summary>
            Represents the event arguments for when SCP-939 is creating an amnestic cloud.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp939Events.Scp939CreatingAmnesticCloudEventArgs.#ctor(ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp939Events.Scp939CreatingAmnesticCloudEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-939 player instance.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp939Events.Scp939CreatingAmnesticCloudEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Scp939Events.Scp939CreatingAmnesticCloudEventArgs.Player">
            <summary>
            The 939 player instance.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp939Events.Scp939LungedEventArgs">
            <summary>
            Represents the event arguments for when SCP-939 has lunged.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp939Events.Scp939LungedEventArgs.#ctor(ReferenceHub,PlayerRoles.PlayableScps.Scp939.Scp939LungeState)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp939Events.Scp939LungedEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-939 player instance.</param>
            <param name="lungeState">The SCP-939 lunge state.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp939Events.Scp939LungedEventArgs.Player">
            <summary>
            The 939 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp939Events.Scp939LungedEventArgs.LungeState">
            <summary>
            Gets the current state of the SCP-939 lunge ability.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.Scp939Events.Scp939LungingEventArgs">
            <summary>
            Represents the event arguments for when SCP-939 is lunging.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.Scp939Events.Scp939LungingEventArgs.#ctor(ReferenceHub,PlayerRoles.PlayableScps.Scp939.Scp939LungeState)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.Scp939Events.Scp939LungingEventArgs"/> class.
            </summary>
            <param name="hub">The SCP-939 player instance.</param>
            <param name="lungeState">The SCP-939 lunge state.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp939Events.Scp939LungingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.Scp939Events.Scp939LungingEventArgs.Player">
            <summary>
            The SCP-939 player instance.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.Scp939Events.Scp939LungingEventArgs.LungeState">
            <summary>
            Gets or sets the current state of the SCP-939 lunge ability.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.BanIssuedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.BanIssued"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.BanIssuedEventArgs.#ctor(BanHandler.BanType,BanDetails)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.BanIssuedEventArgs"/> class.
            </summary>
            <param name="banType">The type of the ban.</param>
            <param name="banDetails">The details of the ban.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.BanIssuedEventArgs.BanType">
            <summary>
            The type of ban that was issued.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.BanIssuedEventArgs.BanDetails">
            <summary>
            The details of the ban that was issued.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.BanIssuingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.BanIssuing"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.BanIssuingEventArgs.#ctor(BanHandler.BanType,BanDetails)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.BanIssuingEventArgs"/> class.
            </summary>
            <param name="banType">The type of the ban.</param>
            <param name="banDetails">The details of the ban.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.BanIssuingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.BanIssuingEventArgs.BanType">
            <summary>
            The type of ban that is being issued.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.BanIssuingEventArgs.BanDetails">
            <summary>
            The details of the ban that is being issued.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.BanRevokedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.BanRevoked"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.BanRevokedEventArgs.#ctor(BanHandler.BanType,BanDetails)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.BanRevokedEventArgs"/> class.
            </summary>
            <param name="banType">The type of the ban.</param>
            <param name="banDetails">The details of the ban.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.BanRevokedEventArgs.BanType">
            <summary>
            The type of ban that was revoked.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.BanRevokedEventArgs.BanDetails">
            <summary>
            The details of the ban that was revoked.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.BanRevokingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.BanRevoking"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.BanRevokingEventArgs.#ctor(BanHandler.BanType,BanDetails)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.BanRevokingEventArgs"/> class.
            </summary>
            <param name="banType">The type of the ban.</param>
            <param name="banDetails">The details of the ban.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.BanRevokingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.BanRevokingEventArgs.BanType">
            <summary>
            The type of ban that is being revoked.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.BanRevokingEventArgs.BanDetails">
            <summary>
            The details of the ban that is being revoked.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.BanUpdatedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.BanUpdated"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.BanUpdatedEventArgs.#ctor(BanHandler.BanType,BanDetails,BanDetails)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.BanUpdatedEventArgs"/> class.
            </summary>
            <param name="banType">The type of the ban.</param>
            <param name="banDetails">The new details of the ban.</param>
            <param name="oldBanDetails">The old details of the ban.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.BanUpdatedEventArgs.BanType">
            <summary>
            The type of ban that was updated.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.BanUpdatedEventArgs.BanDetails">
            <summary>
            The new details of the ban that was updated.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.BanUpdatedEventArgs.OldBanDetails">
            <summary>
            The old details of the ban that was updated.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.BanUpdatingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.BanUpdating"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.BanUpdatingEventArgs.#ctor(BanHandler.BanType,BanDetails,BanDetails)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.BanUpdatingEventArgs"/> class.
            </summary>
            <param name="banType">The type of the ban.</param>
            <param name="banDetails">The new details of the ban.</param>
            <param name="oldBanDetails">The old details of the ban.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.BanUpdatingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.BanUpdatingEventArgs.BanType">
            <summary>
            The type of ban that is being updated.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.BanUpdatingEventArgs.BanDetails">
            <summary>
            The new details of the ban that is being updated.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.BanUpdatingEventArgs.OldBanDetails">
            <summary>
            The old details of the ban that is being updated.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.CassieAnnouncedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.CassieAnnounced"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.CassieAnnouncedEventArgs.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.CassieAnnouncedEventArgs"/> class.
            </summary>
            <param name="words">The sentence C.A.S.S.I.E. is supposed to say.</param>
            <param name="makeHold">For most cases you wanna keep it true. Sets a minimal 3-second moment of silence before the announcement.</param>
            <param name="makeNoise">The background noises before playing.</param>
            <param name="customAnnouncement">If thats custom announcement? Custom announcements show subtitles.</param>
            <param name="customSubtitles">Custom subtitles text.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CassieAnnouncedEventArgs.Words">
            <summary>
            Gets sentence which C.A.S.S.I.E. said.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CassieAnnouncedEventArgs.MakeHold">
            <summary>
            Gets if announce had delay.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CassieAnnouncedEventArgs.MakeNoise">
            <summary>
            Gets if announce had background noises.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CassieAnnouncedEventArgs.CustomAnnouncement">
            <summary>
            Gets if announce had custom subtitles.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CassieAnnouncedEventArgs.CustomSubtitles">
            <summary>
            Gets the custom subtitles with the announcement.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.CassieAnnouncingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.CassieAnnouncing"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.CassieAnnouncingEventArgs.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.CassieAnnouncingEventArgs"/> class.
            </summary>
            <param name="words">The sentence C.A.S.S.I.E. is supposed to say.</param>
            <param name="makeHold">For most cases you wanna keep it true. Sets a minimal 3-second moment of silence before the announcement.</param>
            <param name="makeNoise">The background noises before playing.</param>
            <param name="customAnnouncement">If thats custom announcement? Custom announcements show subtitles.</param>
            <param name="customSubtitles">Custom subtitles text to appear instead of original text.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CassieAnnouncingEventArgs.Words">
            <summary>
            Gets or sets sentence which C.A.S.S.I.E. will say.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CassieAnnouncingEventArgs.MakeHold">
            <summary>
            Gets or sets if announce should have delay.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CassieAnnouncingEventArgs.MakeNoise">
            <summary>
            Gets or sets if announce should have background noise.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CassieAnnouncingEventArgs.CustomAnnouncement">
            <summary>
            Gets or sets if announce should have custom subtitles.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CassieAnnouncingEventArgs.CustomSubtitles">
            <summary>
            Gets or sets the custom subtitles text. Set to <see cref="F:System.String.Empty"/> or null if you wish keep the <see cref="P:LabApi.Events.Arguments.ServerEvents.CassieAnnouncingEventArgs.Words"/> as subtitles text.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CassieAnnouncingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.CassieQueuedScpTerminationEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.CassieQueuedScpTermination"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.CassieQueuedScpTerminationEventArgs.#ctor(ReferenceHub,System.String,Subtitles.SubtitlePart[],PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.CassieQueuedScpTerminationEventArgs"/> class.
            </summary>
            <param name="hub">The SCP player the C.A.S.S.I.E termination announcement is for.</param>
            <param name="announcement">The message C.A.S.S.I.E is supposed to say.</param>
            <param name="subtitles">The subtitle part array of the message.</param>
            <param name="damageHandler">The damage handler that caused the termination of the SCP.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CassieQueuedScpTerminationEventArgs.Player">
            <summary>
            The SCP player the C.A.S.S.I.E termination announcement is for.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CassieQueuedScpTerminationEventArgs.Announcement">
            <summary>
            Gets or sets the message C.A.S.S.I.E is supposed to say.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CassieQueuedScpTerminationEventArgs.SubtitleParts">
            <summary>
            Gets or sets the subtitle parts of the message.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CassieQueuedScpTerminationEventArgs.DamageHandler">
            <summary>
            The Damage Handler responsible for the SCP Termination.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.CassieQueuingScpTerminationEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.CassieQueuingScpTermination"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.CassieQueuingScpTerminationEventArgs.#ctor(ReferenceHub,System.String,Subtitles.SubtitlePart[],PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.CassieQueuingScpTerminationEventArgs"/> class.
            </summary>
            <param name="hub">The SCP player the C.A.S.S.I.E termination announcement is for.</param>
            <param name="announcement">The message C.A.S.S.I.E is supposed to say.</param>
            <param name="subtitles">The subtitle part array of the message.</param>
            <param name="damageHandler">The damage handler that caused the termination of the SCP.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CassieQueuingScpTerminationEventArgs.Player">
            <summary>
            The SCP player the C.A.S.S.I.E termination announcement is for.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CassieQueuingScpTerminationEventArgs.Announcement">
            <summary>
            Gets or sets the message C.A.S.S.I.E is supposed to say.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CassieQueuingScpTerminationEventArgs.SubtitleParts">
            <summary>
            Gets or sets the subtitle parts of the message.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CassieQueuingScpTerminationEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CassieQueuingScpTerminationEventArgs.DamageHandler">
            <summary>
            The Damage Handler responsible for the SCP Termination.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.CommandExecutedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.CommandExecuted"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.CommandExecutedEventArgs.#ctor(CommandSender,LabApi.Features.Enums.CommandType,CommandSystem.ICommand,System.ArraySegment{System.String},System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.CommandExecutedEventArgs"/> class.
            </summary>
            <param name="sender">The sender of the command.</param>
            <param name="commandType">The type of the command.</param>
            <param name="command">The command.</param>
            <param name="arguments">The arguments of the command.</param>
            <param name="successful">Whether the command was executed successfully.</param>
            <param name="response">The response of the command.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CommandExecutedEventArgs.Sender">
            <summary>
            The sender of the command.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CommandExecutedEventArgs.CommandType">
            <summary>
            The type of the command that was executed.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CommandExecutedEventArgs.Command">
            <summary>
            The command that was executed.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CommandExecutedEventArgs.Arguments">
            <summary>
            The arguments of the command.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CommandExecutedEventArgs.ExecutedSuccessfully">
            <summary>
            Whether the command was executed successfully.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CommandExecutedEventArgs.Response">
            <summary>
            The response of the command.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CommandExecutedEventArgs.CommandName">
            <summary>
            Gets the name or alias of the command that was executed.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.CommandExecutingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.CommandExecuting"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.CommandExecutingEventArgs.#ctor(CommandSender,LabApi.Features.Enums.CommandType,System.Boolean,CommandSystem.ICommand,System.ArraySegment{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.CommandExecutingEventArgs"/> class.
            </summary>
            <param name="sender">The sender of the command.</param>
            <param name="commandType">The type of the command.</param>
            <param name="wasFound">Whether the command was found.</param>
            <param name="command">The command.</param>
            <param name="arguments">The arguments of the command.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CommandExecutingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CommandExecutingEventArgs.Sender">
            <summary>
            The sender of the command.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CommandExecutingEventArgs.CommandType">
            <summary>
            The type of the command that is being executed.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CommandExecutingEventArgs.CommandFound">
            <summary>
            Whether the command was found.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CommandExecutingEventArgs.Command">
            <summary>
            The command that is being executed.
            <para>Can be null if the command was not found.</para>
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CommandExecutingEventArgs.Arguments">
            <summary>
            The arguments of the command.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.CommandExecutingEventArgs.CommandName">
            <summary>
            Gets the name or alias of the command that was executed.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.ElevatorSequenceChangedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.ElevatorSequenceChanged"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.ElevatorSequenceChangedEventArgs.#ctor(Interactables.Interobjects.ElevatorChamber,Interactables.Interobjects.ElevatorChamber.ElevatorSequence,Interactables.Interobjects.ElevatorChamber.ElevatorSequence)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.ElevatorSequenceChangedEventArgs"/> class.
            </summary>
            <param name="elevator">The elevator whose sequence has changed.</param>
            <param name="oldSequence"> The old sequence the elevator was in before.</param>
            <param name="newSequence">The new sequence the elevator has transitioned into.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.ElevatorSequenceChangedEventArgs.Elevator">
            <inheritdoc/>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.ElevatorSequenceChangedEventArgs.OldSequence">
            <summary>
            The old sequence the elevator was in before.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.ElevatorSequenceChangedEventArgs.NewSequence">
            <summary>
            The new sequence the elevator has transitioned into.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.ExplosionSpawnedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.ExplosionSpawned"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.ExplosionSpawnedEventArgs.#ctor(ReferenceHub,UnityEngine.Vector3,InventorySystem.Items.ThrowableProjectiles.ExplosionGrenade,ExplosionType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.ExplosionSpawnedEventArgs"/> class.
            </summary>
            <param name="hub">The player which caused this explosion.</param>
            <param name="position">The position of explosion.</param>
            <param name="settingsReference">The projectile which caused explosion.</param>
            <param name="explosionType">The type of this explosion.</param>
            <param name="destroyDoors">Whether the explosion was allowed to destroy doors.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.ExplosionSpawnedEventArgs.Player">
            <summary>
            Gets the player which caused this explosion.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.ExplosionSpawnedEventArgs.Position">
            <summary>
            Gets the position of explosion.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.ExplosionSpawnedEventArgs.Settings">
            <summary>
            Gets the projectile which will cause explosion.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.ExplosionSpawnedEventArgs.ExplosionType">
            <summary>
            Gets the type of this explosion.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.ExplosionSpawnedEventArgs.DestroyDoors">
            <summary>
            Gets whether the explosion should destroy doors.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.ExplosionSpawningEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.ExplosionSpawning"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.ExplosionSpawningEventArgs.#ctor(ReferenceHub,UnityEngine.Vector3,InventorySystem.Items.ThrowableProjectiles.ExplosionGrenade,ExplosionType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.ExplosionSpawningEventArgs"/> class.
            </summary>
            <param name="hub">The player which caused this explosion.</param>
            <param name="position">The position of explosion.</param>
            <param name="settingsReference">The projectile which will cause the explosion.</param>
            <param name="explosionType">The type of this explosion.</param>
            <param name="destroyDoors">Whether the explosion should destroy doors.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.ExplosionSpawningEventArgs.Player">
            <summary>
            Gets or sets the player which caused this explosion.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.ExplosionSpawningEventArgs.Position">
            <summary>
            Gets or sets the position of explosion.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.ExplosionSpawningEventArgs.Settings">
            <summary>
            Gets or sets the projectile which will cause explosion.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.ExplosionSpawningEventArgs.ExplosionType">
            <summary>
            Gets or sets the type of this explosion.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.ExplosionSpawningEventArgs.DestroyDoors">
            <summary>
            Gets or sets whether the explosion should destroy doors.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.ExplosionSpawningEventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.GeneratorActivatedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.GeneratorActivated"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.GeneratorActivatedEventArgs.#ctor(MapGeneration.Distributors.Scp079Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.GeneratorActivatedEventArgs"/> class.
            </summary>
            <param name="generator">The generator which was activated.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.GeneratorActivatedEventArgs.Generator">
            <summary>
            Gets the generator which was activated.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.GeneratorActivatingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.GeneratorActivating"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.GeneratorActivatingEventArgs.#ctor(MapGeneration.Distributors.Scp079Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.GeneratorActivatingEventArgs"/> class.
            </summary>
            <param name="generator">The generator which is being activated.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.GeneratorActivatingEventArgs.Generator">
            <summary>
            Gets the generator which is being activated.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.GeneratorActivatingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.ItemSpawnedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.ItemSpawned"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.ItemSpawnedEventArgs.#ctor(InventorySystem.Items.Pickups.ItemPickupBase)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.ItemSpawnedEventArgs"/> class.
            </summary>
            <param name="pickup">The pickup which spawned on map.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.ItemSpawnedEventArgs.Pickup">
            <summary>
            Gets the pickup which spawned on map.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.ItemSpawningEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.ItemSpawning"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.ItemSpawningEventArgs.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.ItemSpawningEventArgs"/> class.
            </summary>
            <param name="type">The type of item which will spawn on map.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.ItemSpawningEventArgs.ItemType">
            <summary>
            Gets or sets type of item which will spawn.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.ItemSpawningEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.LczDecontaminationAnnouncedEventArgs">
            <summary>
            Contains the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.LczDecontaminationAnnounced"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.LczDecontaminationAnnouncedEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.LczDecontaminationAnnouncedEventArgs"/> class.
            </summary>
            <param name="phase">The phase of decontamination.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.LczDecontaminationAnnouncedEventArgs.Phase">
            <summary>
            Gets phase of decontamination.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.LczDecontaminationStartingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.LczDecontaminationStarting"/> event.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.LczDecontaminationStartingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.MapGeneratedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.MapGenerated"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.MapGeneratedEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.MapGeneratedEventArgs"/> class.
            </summary>
            <param name="seed">The seed of next map.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.MapGeneratedEventArgs.Seed">
            <summary>
            Gets seed of next map.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.MapGeneratingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.MapGenerating"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.MapGeneratingEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.MapGeneratingEventArgs"/> class.
            </summary>
            <param name="seed">The seed of next map.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.MapGeneratingEventArgs.Seed">
            <summary>
            Gets or sets seed of next map.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.MapGeneratingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.PickupCreatedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.PickupCreated"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.PickupCreatedEventArgs.#ctor(LabApi.Features.Wrappers.Pickup)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.PickupCreatedEventArgs"/> class.
            </summary>
            <param name="pickup">The pickup which was created.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.PickupCreatedEventArgs.Pickup">
            <summary>
            Gets the pickup which was created.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.PickupDestroyedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.PickupDestroyed"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.PickupDestroyedEventArgs.#ctor(LabApi.Features.Wrappers.Pickup)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.PickupDestroyedEventArgs"/> class.
            </summary>
            <param name="pickup">The pickup which is being destroyed.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.PickupDestroyedEventArgs.Pickup">
            <summary>
            Gets the pickup which is being destroyed.
            </summary>
            <remarks>
            Unity destroys objects at the end of the frame so using the pickup here is fine.
            </remarks>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.ProjectileExplodedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.ProjectileExploded"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.ProjectileExplodedEventArgs.#ctor(InventorySystem.Items.ThrowableProjectiles.TimeGrenade,ReferenceHub,UnityEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.ProjectileExplodedEventArgs"/> class.
            </summary>
            <param name="projectile">The projectile which will cause explosion.</param>
            <param name="hub">The player which threw that grenade.</param>
            <param name="position">The position of explosion.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.ProjectileExplodedEventArgs.TimedGrenade">
            <summary>
            Gets projectile which caused this explosion.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.ProjectileExplodedEventArgs.Player">
            <summary>
            Gets who threw this grenade.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.ProjectileExplodedEventArgs.Position">
            <summary>
            Gets position of explosion.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.ProjectileExplodedEventArgs.Projectile">
            <inheritdoc cref="P:LabApi.Events.Arguments.ServerEvents.ProjectileExplodedEventArgs.TimedGrenade"/>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.ProjectileExplodingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.ProjectileExploding"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.ProjectileExplodingEventArgs.#ctor(InventorySystem.Items.ThrowableProjectiles.TimeGrenade,ReferenceHub,UnityEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.ProjectileExplodingEventArgs"/> class.
            </summary>
            <param name="grenade">The grenade which will cause explosion.</param>
            <param name="hub">The player which threw that grenade.</param>
            <param name="position">The position of explosion.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.ProjectileExplodingEventArgs.TimedGrenade">
            <summary>
            Gets grenade which caused this explosion.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.ProjectileExplodingEventArgs.Player">
            <summary>
            Gets who threw this grenade.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.ProjectileExplodingEventArgs.Position">
            <summary>
            Gets or sets position of explosion.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.ProjectileExplodingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.ProjectileExplodingEventArgs.Grenade">
            <inheritdoc cref="P:LabApi.Events.Arguments.ServerEvents.ProjectileExplodingEventArgs.TimedGrenade"/>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.RoundEndedEventArgs">
            <summary>
            Contains the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.RoundEnded"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.RoundEndedEventArgs.#ctor(RoundSummary.LeadingTeam)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.RoundEndedEventArgs"/> class.
            </summary>
            <param name="leadingTeam">The leading team of the round.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.RoundEndedEventArgs.LeadingTeam">
            <summary>
            The team that is leading or winning the round.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.RoundEndedEventArgs.ShowSummary">
            <summary>
            Whether to show the round summary.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.RoundEndingConditionsCheckEventArgs">
            <summary>
            Contains the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.RoundEnding"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.RoundEndingConditionsCheckEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.RoundEndingConditionsCheckEventArgs"/> class.
            </summary>
            <param name="canEnd">Whether the round end conditions are met.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.RoundEndingConditionsCheckEventArgs.CanEnd">
            <summary>
            Gets or sets whether the round end conditions are met.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.RoundEndingEventArgs">
            <summary>
            Contains the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.RoundEnding"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.RoundEndingEventArgs.#ctor(RoundSummary.LeadingTeam)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.RoundEndingEventArgs"/> class.
            </summary>
            <param name="leadingTeam">The leading team of the round.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.RoundEndingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.RoundEndingEventArgs.LeadingTeam">
            <summary>
            The team that is leading or winning the round.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.RoundStartingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.RoundStarting"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.RoundStartingEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.RoundStartingEventArgs"/> class.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.RoundStartingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.SendingAdminChatEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.SendingAdminChat"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.SendingAdminChatEventArgs.#ctor(CommandSender,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.SendingAdminChatEventArgs"/> class.
            </summary>
            <param name="sender">The sender of the admin chat message.</param>
            <param name="message">The message to be sent.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.SendingAdminChatEventArgs.Message">
            <summary>
            Gets or sets the message to be sent.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.SendingAdminChatEventArgs.Sender">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.SendingAdminChatEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.SentAdminChatEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.SentAdminChat"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.SentAdminChatEventArgs.#ctor(CommandSender,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.SentAdminChatEventArgs"/> class.
            </summary>
            <param name="sender">The sender of the admin chat message.</param>
            <param name="message">The message that was sent.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.SentAdminChatEventArgs.Message">
            <summary>
            Gets the message that was sent.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.SentAdminChatEventArgs.Sender">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.WaveRespawnedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.WaveRespawned"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.WaveRespawnedEventArgs.#ctor(Respawning.Waves.SpawnableWaveBase,System.Collections.Generic.List{LabApi.Features.Wrappers.Player})">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.WaveRespawnedEventArgs"/> class.
            </summary>
            <param name="wave">The wave that is respawning.</param>
            <param name="players">The players that were respawned.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.WaveRespawnedEventArgs.Wave">
            <summary>
            Team wave is respawning.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.WaveRespawnedEventArgs.Players">
            <summary>
            The players that were respawned.<br/>
            Be aware that every plugin share the same instance.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.WaveRespawningEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.WaveRespawning"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.WaveRespawningEventArgs.#ctor(Respawning.Waves.SpawnableWaveBase,System.Collections.Generic.Dictionary{ReferenceHub,PlayerRoles.RoleTypeId})">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.WaveRespawningEventArgs"/> class.
            </summary>
            <param name="wave">The wave that is respawning.</param>
            <param name="roles">The players that are respawning and roles they will spawn as.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.WaveRespawningEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.WaveRespawningEventArgs.Wave">
            <summary>
            Team wave is respawning.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.WaveRespawningEventArgs.SpawningPlayers">
            <summary>
            Gets all players that are about to respawn.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.WaveRespawningEventArgs.Roles">
            <summary>
            The dictionary containing players and their roles with will spawn with.<br/>
            <b>Note that this dictionary is pooled and will be returned to one after this event runs. Do not save it outside of this event's scope.</b>
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.WaveTeamSelectedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.WaveTeamSelected"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.WaveTeamSelectedEventArgs.#ctor(Respawning.Waves.SpawnableWaveBase)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.WaveTeamSelectedEventArgs"/> class.
            </summary>
            <param name="wave">The wave that was selected.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.WaveTeamSelectedEventArgs.Wave">
            <summary>
            Gets the spawnable wave. See <see cref="T:Respawning.Waves.SpawnableWaveBase"/> and its subclasses for more info.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.ServerEvents.WaveTeamSelectingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.ServerEvents.WaveTeamSelecting"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.ServerEvents.WaveTeamSelectingEventArgs.#ctor(Respawning.Waves.SpawnableWaveBase)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.ServerEvents.WaveTeamSelectingEventArgs"/> class.
            </summary>
            <param name="wave">The wave that is about to be selected.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.WaveTeamSelectingEventArgs.Wave">
            <summary>
            Gets or sets the spawnable wave. See <see cref="T:Respawning.Waves.SpawnableWaveBase"/> and its subclasses.<br/>
            Use the <see cref="F:Respawning.WaveManager.Waves"/> to set it to a different value.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.ServerEvents.WaveTeamSelectingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.WarheadEvents.WarheadDetonatedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.WarheadEvents.Detonated"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.WarheadEvents.WarheadDetonatedEventArgs.#ctor(ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.WarheadEvents.WarheadDetonatedEventArgs"/> class.
            </summary>
            <param name="hub">The player who detonated the warhead.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.WarheadEvents.WarheadDetonatedEventArgs.Player">
            <summary>
            Gets the player who detonated the warhead.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.WarheadEvents.WarheadDetonatingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.WarheadEvents.Detonating"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.WarheadEvents.WarheadDetonatingEventArgs.#ctor(ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.WarheadEvents.WarheadDetonatingEventArgs"/> class.
            </summary>
            <param name="hub">The player who is detonating the warhead.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.WarheadEvents.WarheadDetonatingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.WarheadEvents.WarheadDetonatingEventArgs.Player">
            <summary>
            Gets the player who is detonating the warhead.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.WarheadEvents.WarheadStartedEventArgs">
            <summary>
            Represents the event arguments for the <see cref="E:LabApi.Events.Handlers.WarheadEvents.Started"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.WarheadEvents.WarheadStartedEventArgs.#ctor(ReferenceHub,System.Boolean,System.Boolean,AlphaWarheadSyncInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.WarheadEvents.WarheadStartedEventArgs"/> class.
            </summary>
            <param name="hub">The player who started the warhead.</param>
            <param name="isAutomatic">Whether the warhead is starting automatically.</param>
            <param name="suppressSubtitles">Whether subtitles should be suppressed.</param>
            <param name="warheadState">The current state of the alpha warhead.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.WarheadEvents.WarheadStartedEventArgs.IsAutomatic">
            <summary>
            Whether the warhead is starting automatically.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.WarheadEvents.WarheadStartedEventArgs.SuppressSubtitles">
            <summary>
            Whether subtitles should be suppressed.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.WarheadEvents.WarheadStartedEventArgs.WarheadState">
            <summary>
            Gets the current state of the alpha warhead.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.WarheadEvents.WarheadStartedEventArgs.Player">
            <summary>
            Gets the player who started the warhead.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.WarheadEvents.WarheadStartingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.WarheadEvents.Starting"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.WarheadEvents.WarheadStartingEventArgs.#ctor(ReferenceHub,System.Boolean,System.Boolean,AlphaWarheadSyncInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.WarheadEvents.WarheadStartingEventArgs"/> class.
            </summary>
            <param name="hub">The player who is starting the warhead.</param>
            <param name="isAutomatic">Whether the warhead is starting automatically.</param>
            <param name="suppressSubtitles">Whether subtitles should be suppressed.</param>
            <param name="warheadState">The current state of the alpha warhead.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.WarheadEvents.WarheadStartingEventArgs.IsAutomatic">
            <summary>
            Whether the warhead is starting automatically.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.WarheadEvents.WarheadStartingEventArgs.SuppressSubtitles">
            <summary>
            Whether subtitles should be suppressed.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.WarheadEvents.WarheadStartingEventArgs.WarheadState">
            <summary>
            Gets the current state of the alpha warhead.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.WarheadEvents.WarheadStartingEventArgs.Player">
            <summary>
            Gets the player who is starting the warhead.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.WarheadEvents.WarheadStartingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Events.Arguments.WarheadEvents.WarheadStoppedEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.WarheadEvents.Stopped"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.WarheadEvents.WarheadStoppedEventArgs.#ctor(ReferenceHub,AlphaWarheadSyncInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.WarheadEvents.WarheadStoppedEventArgs"/> class.
            </summary>
            <param name="hub">The player who stopped the warhead.</param>
            <param name="warheadState">The current state of the alpha warhead.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.WarheadEvents.WarheadStoppedEventArgs.WarheadState">
            <summary>
            Gets the current state of the alpha warhead.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.WarheadEvents.WarheadStoppedEventArgs.Player">
            <summary>
            Gets the player who stopped the warhead.
            </summary>
        </member>
        <member name="T:LabApi.Events.Arguments.WarheadEvents.WarheadStoppingEventArgs">
            <summary>
            Represents the arguments for the <see cref="E:LabApi.Events.Handlers.WarheadEvents.Stopping"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Arguments.WarheadEvents.WarheadStoppingEventArgs.#ctor(ReferenceHub,AlphaWarheadSyncInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Events.Arguments.WarheadEvents.WarheadStoppingEventArgs"/> class.
            </summary>
            <param name="hub">The player who is stopping the warhead.</param>
            <param name="warheadState">The current state of the alpha warhead.</param>
        </member>
        <member name="P:LabApi.Events.Arguments.WarheadEvents.WarheadStoppingEventArgs.WarheadState">
            <summary>
            Gets the current state of the alpha warhead.
            </summary>
        </member>
        <member name="P:LabApi.Events.Arguments.WarheadEvents.WarheadStoppingEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.Arguments.WarheadEvents.WarheadStoppingEventArgs.Player">
            <summary>
            Gets the player who is stopping the warhead.
            </summary>
        </member>
        <member name="T:LabApi.Events.CustomHandlers.CustomEventsHandler">
            <summary>
            Handles custom logic for any event.
            </summary>
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="P:LabApi.Events.CustomHandlers.CustomEventsHandler.InternalEvents">
            <summary>
            Internal dictionary to store the registered events and their delegates.
            </summary>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnObjectiveCompleting(LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletingBaseEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ObjectiveEvents.Completing"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnObjectiveCompleted(LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletedBaseEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ObjectiveEvents.Completed"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnObjectiveKillingEnemyCompleting(LabApi.Events.Arguments.ObjectiveEvents.EnemyKillingObjectiveEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ObjectiveEvents.KillingEnemyCompleting"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnObjectiveKilledEnemyCompleted(LabApi.Events.Arguments.ObjectiveEvents.EnemyKilledObjectiveEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ObjectiveEvents.KilledEnemyCompleted"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnObjectiveEscapingCompleting(LabApi.Events.Arguments.ObjectiveEvents.EscapingObjectiveEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ObjectiveEvents.EscapingCompleting"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnObjectiveEscapedCompleted(LabApi.Events.Arguments.ObjectiveEvents.EscapedObjectiveEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ObjectiveEvents.EscapedCompleted"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnObjectiveActivatingGeneratorCompleting(LabApi.Events.Arguments.ObjectiveEvents.GeneratorActivatingObjectiveEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ObjectiveEvents.ActivatingGeneratorCompleting"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnObjectiveActivatedGeneratorCompleted(LabApi.Events.Arguments.ObjectiveEvents.GeneratorActivatedObjectiveEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ObjectiveEvents.ActivatedGeneratorCompleted"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnObjectiveDamagingScpCompleting(LabApi.Events.Arguments.ObjectiveEvents.ScpDamagingObjectiveEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ObjectiveEvents.DamagingScpCompleting"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnObjectiveDamagedScpCompleted(LabApi.Events.Arguments.ObjectiveEvents.ScpDamagedObjectiveEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ObjectiveEvents.DamagedScpCompleted"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnObjectivePickingScpItemCompleting(LabApi.Events.Arguments.ObjectiveEvents.ScpItemPickingObjectiveEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ObjectiveEvents.PickingScpItemCompleting"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnObjectivePickedScpItemCompleted(LabApi.Events.Arguments.ObjectiveEvents.ScpItemPickedObjectiveEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ObjectiveEvents.PickedScpItemCompleted"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerJoined(LabApi.Events.Arguments.PlayerEvents.PlayerJoinedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.Joined"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerLeft(LabApi.Events.Arguments.PlayerEvents.PlayerLeftEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.Left"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerReceivingVoiceMessage(LabApi.Events.Arguments.PlayerEvents.PlayerReceivingVoiceMessageEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ReceivingVoiceMessage"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerSendingVoiceMessage(LabApi.Events.Arguments.PlayerEvents.PlayerSendingVoiceMessageEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.SendingVoiceMessage"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerPreAuthenticating(LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.PreAuthenticating"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerPreAuthenticated(LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.PreAuthenticated"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerUsingIntercom(LabApi.Events.Arguments.PlayerEvents.PlayerUsingIntercomEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.UsingIntercom"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerUsedIntercom(LabApi.Events.Arguments.PlayerEvents.PlayerUsedIntercomEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.UsedIntercom"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerBanning(LabApi.Events.Arguments.PlayerEvents.PlayerBanningEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.Banning"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerBanned(LabApi.Events.Arguments.PlayerEvents.PlayerBannedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.Banned"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerKicking(LabApi.Events.Arguments.PlayerEvents.PlayerKickingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.Kicking"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerKicked(LabApi.Events.Arguments.PlayerEvents.PlayerKickedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.Kicked"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerMuting(LabApi.Events.Arguments.PlayerEvents.PlayerMutingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.Muting"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerMuted(LabApi.Events.Arguments.PlayerEvents.PlayerMutedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.Muted"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerUnmuting(LabApi.Events.Arguments.PlayerEvents.PlayerUnmutingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.Unmuting"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerUnmuted(LabApi.Events.Arguments.PlayerEvents.PlayerUnmutedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.Unmuted"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerReportingCheater(LabApi.Events.Arguments.PlayerEvents.PlayerReportingCheaterEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ReportingCheater"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerReportedCheater(LabApi.Events.Arguments.PlayerEvents.PlayerReportedCheaterEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ReportedCheater"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerReportingPlayer(LabApi.Events.Arguments.PlayerEvents.PlayerReportingPlayerEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ReportingPlayer"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerReportedPlayer(LabApi.Events.Arguments.PlayerEvents.PlayerReportedPlayerEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ReportedPlayer"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerTogglingNoclip(LabApi.Events.Arguments.PlayerEvents.PlayerTogglingNoclipEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.TogglingNoclip"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerToggledNoclip(LabApi.Events.Arguments.PlayerEvents.PlayerToggledNoclipEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ToggledNoclip"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerRequestingRaPlayerList(LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerListEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.RequestingRaPlayerList"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerRequestedRaPlayerList(LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayerListEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.RequestedRaPlayerList"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerRaPlayerListAddingPlayer(LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddingPlayerEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.RaPlayerListAddingPlayer"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerRaPlayerListAddedPlayer(LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddedPlayerEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.RaPlayerListAddedPlayer"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerRequestedCustomRaInfo(LabApi.Events.Arguments.PlayerEvents.PlayerRequestedCustomRaInfoEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.RequestedCustomRaInfo"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerRequestingRaPlayersInfo(LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayersInfoEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.RequestingRaPlayersInfo"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerRequestedRaPlayersInfo(LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayersInfoEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.RequestedRaPlayersInfo"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerRequestingRaPlayerInfo(LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerInfoEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.RequestingRaPlayerInfo"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerRequestedRaPlayerInfo(LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayerInfoEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.RequestedRaPlayerInfo"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerChangingBadgeVisibility(LabApi.Events.Arguments.PlayerEvents.PlayerChangingBadgeVisibilityEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ChangingBadgeVisibility"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerChangedBadgeVisibility(LabApi.Events.Arguments.PlayerEvents.PlayerChangedBadgeVisibilityEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ChangedBadgeVisibility"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerChangingNickname(LabApi.Events.Arguments.PlayerEvents.PlayerChangingNicknameEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ChangingNickname"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerChangedNickname(LabApi.Events.Arguments.PlayerEvents.PlayerChangedNicknameEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ChangedNickname"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerGroupChanging(LabApi.Events.Arguments.PlayerEvents.PlayerGroupChangingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.GroupChanging"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerGroupChanged(LabApi.Events.Arguments.PlayerEvents.PlayerGroupChangedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.GroupChanged"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerUpdatingEffect(LabApi.Events.Arguments.PlayerEvents.PlayerEffectUpdatingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.UpdatingEffect"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerUpdatedEffect(LabApi.Events.Arguments.PlayerEvents.PlayerEffectUpdatedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.UpdatedEffect"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerDying(LabApi.Events.Arguments.PlayerEvents.PlayerDyingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.Dying"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerDeath(LabApi.Events.Arguments.PlayerEvents.PlayerDeathEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.Death"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerHurting(LabApi.Events.Arguments.PlayerEvents.PlayerHurtingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.Hurting"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerHurt(LabApi.Events.Arguments.PlayerEvents.PlayerHurtEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.Hurt"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerChangingRole(LabApi.Events.Arguments.PlayerEvents.PlayerChangingRoleEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ChangingRole"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerChangedRole(LabApi.Events.Arguments.PlayerEvents.PlayerChangedRoleEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ChangedRole"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerCuffing(LabApi.Events.Arguments.PlayerEvents.PlayerCuffingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.Cuffing"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerCuffed(LabApi.Events.Arguments.PlayerEvents.PlayerCuffedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.Cuffed"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerUncuffing(LabApi.Events.Arguments.PlayerEvents.PlayerUncuffingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.Uncuffing"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerUncuffed(LabApi.Events.Arguments.PlayerEvents.PlayerUncuffedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.Uncuffed"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerReceivingLoadout(LabApi.Events.Arguments.PlayerEvents.PlayerReceivingLoadoutEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ReceivingLoadout"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerReceivedLoadout(LabApi.Events.Arguments.PlayerEvents.PlayerReceivedLoadoutEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ReceivedLoadout"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerSpawning(LabApi.Events.Arguments.PlayerEvents.PlayerSpawningEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.Spawning"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerSpawned(LabApi.Events.Arguments.PlayerEvents.PlayerSpawnedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.Spawned"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerChangingItem(LabApi.Events.Arguments.PlayerEvents.PlayerChangingItemEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ChangingItem"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerChangedItem(LabApi.Events.Arguments.PlayerEvents.PlayerChangedItemEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ChangedItem"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerDroppingAmmo(LabApi.Events.Arguments.PlayerEvents.PlayerDroppingAmmoEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.DroppingAmmo"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerDroppedAmmo(LabApi.Events.Arguments.PlayerEvents.PlayerDroppedAmmoEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.DroppedAmmo"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerDroppingItem(LabApi.Events.Arguments.PlayerEvents.PlayerDroppingItemEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.DroppingItem"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerDroppedItem(LabApi.Events.Arguments.PlayerEvents.PlayerDroppedItemEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.DroppedItem"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerPickingUpAmmo(LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpAmmoEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.PickingUpAmmo"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerPickedUpAmmo(LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpAmmoEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.PickedUpAmmo"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerPickingUpArmor(LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpArmorEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.PickingUpArmor"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerPickedUpArmor(LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpArmorEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.PickedUpArmor"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerPickingUpItem(LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpItemEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.PickingUpItem"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerPickedUpItem(LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpItemEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.PickedUpItem"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerPickingUpScp330(LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpScp330EventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.PickingUpScp330"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerPickedUpScp330(LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpScp330EventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.PickedUpScp330"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerSearchedAmmo(LabApi.Events.Arguments.PlayerEvents.PlayerSearchedAmmoEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.SearchedAmmo"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerSearchingArmor(LabApi.Events.Arguments.PlayerEvents.PlayerSearchingArmorEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.SearchingArmor"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerSearchedArmor(LabApi.Events.Arguments.PlayerEvents.PlayerSearchedArmorEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.SearchedArmor"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerSearchingPickup(LabApi.Events.Arguments.PlayerEvents.PlayerSearchingPickupEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.SearchingPickup"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerInteractedToy(LabApi.Events.Arguments.PlayerEvents.PlayerInteractedToyEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.InteractedToy"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerSearchedPickup(LabApi.Events.Arguments.PlayerEvents.PlayerSearchedPickupEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.SearchedPickup"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerSearchingAmmo(LabApi.Events.Arguments.PlayerEvents.PlayerSearchingAmmoEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.SearchingAmmo"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerThrowingItem(LabApi.Events.Arguments.PlayerEvents.PlayerThrowingItemEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ThrowingItem"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerThrewItem(LabApi.Events.Arguments.PlayerEvents.PlayerThrewItemEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ThrewItem"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerThrowingProjectile(LabApi.Events.Arguments.PlayerEvents.PlayerThrowingProjectileEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ThrowingProjectile"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerThrewProjectile(LabApi.Events.Arguments.PlayerEvents.PlayerThrewProjectileEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ThrewProjectile"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerInspectingKeycard(LabApi.Events.Arguments.PlayerEvents.PlayerInspectingKeycardEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.InspectingKeycard"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerInspectedKeycard(LabApi.Events.Arguments.PlayerEvents.PlayerInspectedKeycardEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.InspectedKeycard"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerSpinningRevolver(LabApi.Events.Arguments.PlayerEvents.PlayerSpinningRevolverEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.SpinningRevolver"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerSpinnedRevolver(LabApi.Events.Arguments.PlayerEvents.PlayerSpinnedRevolverEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.SpinnedRevolver"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerToggledDisruptorFiringMode(LabApi.Events.Arguments.PlayerEvents.PlayerToggledDisruptorFiringModeEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ToggledDisruptorFiringMode"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerUsingItem(LabApi.Events.Arguments.PlayerEvents.PlayerUsingItemEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.UsingItem"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerUsedItem(LabApi.Events.Arguments.PlayerEvents.PlayerUsedItemEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.UsedItem"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerItemUsageEffectsApplying(LabApi.Events.Arguments.PlayerEvents.PlayerItemUsageEffectsApplyingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ItemUsageEffectsApplying"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerUsingRadio(LabApi.Events.Arguments.PlayerEvents.PlayerUsingRadioEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.UsingRadio"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerUsedRadio(LabApi.Events.Arguments.PlayerEvents.PlayerUsedRadioEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.UsedRadio"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerAimedWeapon(LabApi.Events.Arguments.PlayerEvents.PlayerAimedWeaponEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.AimedWeapon"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerDryFiringWeapon(LabApi.Events.Arguments.PlayerEvents.PlayerDryFiringWeaponEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.DryFiringWeapon"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerDryFiredWeapon(LabApi.Events.Arguments.PlayerEvents.PlayerDryFiredWeaponEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.DryFiredWeapon"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerUnloadingWeapon(LabApi.Events.Arguments.PlayerEvents.PlayerUnloadingWeaponEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.UnloadingWeapon"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerUnloadedWeapon(LabApi.Events.Arguments.PlayerEvents.PlayerUnloadedWeaponEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.UnloadedWeapon"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerReloadingWeapon(LabApi.Events.Arguments.PlayerEvents.PlayerReloadingWeaponEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ReloadingWeapon"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerReloadedWeapon(LabApi.Events.Arguments.PlayerEvents.PlayerReloadedWeaponEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ReloadedWeapon"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerShootingWeapon(LabApi.Events.Arguments.PlayerEvents.PlayerShootingWeaponEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ShootingWeapon"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerShotWeapon(LabApi.Events.Arguments.PlayerEvents.PlayerShotWeaponEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ShotWeapon"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerChangingAttachments(LabApi.Events.Arguments.PlayerEvents.PlayerChangingAttachmentsEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ChangingAttachments"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerChangedAttachments(LabApi.Events.Arguments.PlayerEvents.PlayerChangedAttachmentsEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ChangedAttachments"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerSendingAttachmentsPrefs(LabApi.Events.Arguments.PlayerEvents.PlayerSendingAttachmentsPrefsEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.SendingAttachmentsPrefs"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerSentAttachmentsPrefs(LabApi.Events.Arguments.PlayerEvents.PlayerSentAttachmentsPrefsEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.SentAttachmentsPrefs"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerCancellingUsingItem(LabApi.Events.Arguments.PlayerEvents.PlayerCancellingUsingItemEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.CancellingUsingItem"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerCancelledUsingItem(LabApi.Events.Arguments.PlayerEvents.PlayerCancelledUsingItemEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.CancelledUsingItem"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerChangingRadioRange(LabApi.Events.Arguments.PlayerEvents.PlayerChangingRadioRangeEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ChangingRadioRange"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerChangedRadioRange(LabApi.Events.Arguments.PlayerEvents.PlayerChangedRadioRangeEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ChangedRadioRange"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerProcessingJailbirdMessage(LabApi.Events.Arguments.PlayerEvents.PlayerProcessingJailbirdMessageEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ProcessingJailbirdMessage"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerProcessedJailbirdMessage(LabApi.Events.Arguments.PlayerEvents.PlayerProcessedJailbirdMessageEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ProcessedJailbirdMessage"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerTogglingFlashlight(LabApi.Events.Arguments.PlayerEvents.PlayerTogglingFlashlightEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.TogglingFlashlight"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerToggledFlashlight(LabApi.Events.Arguments.PlayerEvents.PlayerToggledFlashlightEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ToggledFlashlight"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerTogglingWeaponFlashlight(LabApi.Events.Arguments.PlayerEvents.PlayerTogglingWeaponFlashlightEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.TogglingWeaponFlashlight"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerToggledWeaponFlashlight(LabApi.Events.Arguments.PlayerEvents.PlayerToggledWeaponFlashlightEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ToggledWeaponFlashlight"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerTogglingRadio(LabApi.Events.Arguments.PlayerEvents.PlayerTogglingRadioEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.TogglingRadio"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerToggledRadio(LabApi.Events.Arguments.PlayerEvents.PlayerToggledRadioEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ToggledRadio"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerJumped(LabApi.Events.Arguments.PlayerEvents.PlayerJumpedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.Jumped"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerMovementStateChanged(LabApi.Events.Arguments.PlayerEvents.PlayerMovementStateChangedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.MovementStateChanged"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerDamagingShootingTarget(LabApi.Events.Arguments.PlayerEvents.PlayerDamagingShootingTargetEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.DamagingShootingTarget"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerDamagedShootingTarget(LabApi.Events.Arguments.PlayerEvents.PlayerDamagedShootingTargetEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.DamagedShootingTarget"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerDamagingWindow(LabApi.Events.Arguments.PlayerEvents.PlayerDamagingWindowEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.DamagingWindow"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerDamagedWindow(LabApi.Events.Arguments.PlayerEvents.PlayerDamagedWindowEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.DamagedWindow"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerEnteringPocketDimension(LabApi.Events.Arguments.PlayerEvents.PlayerEnteringPocketDimensionEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.EnteringPocketDimension"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerEnteredPocketDimension(LabApi.Events.Arguments.PlayerEvents.PlayerEnteredPocketDimensionEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.EnteredPocketDimension"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerLeavingPocketDimension(LabApi.Events.Arguments.PlayerEvents.PlayerLeavingPocketDimensionEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.LeavingPocketDimension"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerLeftPocketDimension(LabApi.Events.Arguments.PlayerEvents.PlayerLeftPocketDimensionEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.LeftPocketDimension"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerTriggeringTesla(LabApi.Events.Arguments.PlayerEvents.PlayerTriggeringTeslaEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.TriggeringTesla"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerTriggeredTesla(LabApi.Events.Arguments.PlayerEvents.PlayerTriggeredTeslaEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.TriggeredTesla"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerEscaping(LabApi.Events.Arguments.PlayerEvents.PlayerEscapingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.Escaping"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerEscaped(LabApi.Events.Arguments.PlayerEvents.PlayerEscapedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.Escaped"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerFlippingCoin(LabApi.Events.Arguments.PlayerEvents.PlayerFlippingCoinEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.FlippingCoin"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerFlippedCoin(LabApi.Events.Arguments.PlayerEvents.PlayerFlippedCoinEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.FlippedCoin"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerSearchingToy(LabApi.Events.Arguments.PlayerEvents.PlayerSearchingToyEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.SearchingToy"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerSearchedToy(LabApi.Events.Arguments.PlayerEvents.PlayerSearchedToyEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.SearchedToy"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerSearchToyAborted(LabApi.Events.Arguments.PlayerEvents.PlayerSearchToyAbortedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.SearchToyAborted"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerIdlingTesla(LabApi.Events.Arguments.PlayerEvents.PlayerIdlingTeslaEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.IdlingTesla"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerIdledTesla(LabApi.Events.Arguments.PlayerEvents.PlayerIdledTeslaEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.IdledTesla"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerInteractingDoor(LabApi.Events.Arguments.PlayerEvents.PlayerInteractingDoorEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.InteractingDoor"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerInteractedDoor(LabApi.Events.Arguments.PlayerEvents.PlayerInteractedDoorEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.InteractedDoor"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerInteractingElevator(LabApi.Events.Arguments.PlayerEvents.PlayerInteractingElevatorEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.InteractingElevator"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerInteractedElevator(LabApi.Events.Arguments.PlayerEvents.PlayerInteractedElevatorEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.InteractedElevator"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerInteractingGenerator(LabApi.Events.Arguments.PlayerEvents.PlayerInteractingGeneratorEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.InteractingGenerator"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerInteractedGenerator(LabApi.Events.Arguments.PlayerEvents.PlayerInteractedGeneratorEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.InteractedGenerator"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerOpeningGenerator(LabApi.Events.Arguments.PlayerEvents.PlayerOpeningGeneratorEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.OpeningGenerator"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerOpenedGenerator(LabApi.Events.Arguments.PlayerEvents.PlayerOpenedGeneratorEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.OpenedGenerator"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerActivatingGenerator(LabApi.Events.Arguments.PlayerEvents.PlayerActivatingGeneratorEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ActivatingGenerator"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerActivatedGenerator(LabApi.Events.Arguments.PlayerEvents.PlayerActivatedGeneratorEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ActivatedGenerator"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerDeactivatingGenerator(LabApi.Events.Arguments.PlayerEvents.PlayerDeactivatingGeneratorEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.DeactivatingGenerator"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerDeactivatedGenerator(LabApi.Events.Arguments.PlayerEvents.PlayerDeactivatedGeneratorEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.DeactivatedGenerator"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerUnlockingGenerator(LabApi.Events.Arguments.PlayerEvents.PlayerUnlockingGeneratorEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.UnlockingGenerator"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerUnlockedGenerator(LabApi.Events.Arguments.PlayerEvents.PlayerUnlockedGeneratorEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.UnlockedGenerator"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerClosingGenerator(LabApi.Events.Arguments.PlayerEvents.PlayerClosingGeneratorEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ClosingGenerator"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerClosedGenerator(LabApi.Events.Arguments.PlayerEvents.PlayerClosedGeneratorEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ClosedGenerator"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerInteractingLocker(LabApi.Events.Arguments.PlayerEvents.PlayerInteractingLockerEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.InteractingLocker"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerInteractedLocker(LabApi.Events.Arguments.PlayerEvents.PlayerInteractedLockerEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.InteractedLocker"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerInteractingScp330(LabApi.Events.Arguments.PlayerEvents.PlayerInteractingScp330EventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.InteractingScp330"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerInteractedScp330(LabApi.Events.Arguments.PlayerEvents.PlayerInteractedScp330EventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.InteractedScp330"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerInteractingShootingTarget(LabApi.Events.Arguments.PlayerEvents.PlayerInteractingShootingTargetEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.InteractingShootingTarget"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerInteractedShootingTarget(LabApi.Events.Arguments.PlayerEvents.PlayerInteractedShootingTargetEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.InteractedShootingTarget"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerPlacingBlood(LabApi.Events.Arguments.PlayerEvents.PlayerPlacingBloodEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.PlacingBlood"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerPlacedBlood(LabApi.Events.Arguments.PlayerEvents.PlayerPlacedBloodEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.PlacedBlood"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerPlacingBulletHole(LabApi.Events.Arguments.PlayerEvents.PlayerPlacingBulletHoleEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.PlacingBulletHole"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerPlacedBulletHole(LabApi.Events.Arguments.PlayerEvents.PlayerPlacedBulletHoleEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.PlacedBulletHole"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerSpawningRagdoll(LabApi.Events.Arguments.PlayerEvents.PlayerSpawningRagdollEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.SpawningRagdoll"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerSpawnedRagdoll(LabApi.Events.Arguments.PlayerEvents.PlayerSpawnedRagdollEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.SpawnedRagdoll"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerUnlockingWarheadButton(LabApi.Events.Arguments.PlayerEvents.PlayerUnlockingWarheadButtonEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.UnlockingWarheadButton"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerUnlockedWarheadButton(LabApi.Events.Arguments.PlayerEvents.PlayerUnlockedWarheadButtonEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.UnlockedWarheadButton"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerReceivedAchievement(LabApi.Events.Arguments.PlayerEvents.PlayerReceivedAchievementEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ReceivedAchievement"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerRoomChanged(LabApi.Events.Arguments.PlayerEvents.PlayerRoomChangedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.RoomChanged"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerZoneChanged(LabApi.Events.Arguments.PlayerEvents.PlayerZoneChangedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ZoneChanged"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerInteractingWarheadLever(LabApi.Events.Arguments.PlayerEvents.PlayerInteractingWarheadLeverEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.InteractingWarheadLever"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerInteractedWarheadLever(LabApi.Events.Arguments.PlayerEvents.PlayerInteractedWarheadLeverEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.InteractedWarheadLever"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerChangedSpectator(LabApi.Events.Arguments.PlayerEvents.PlayerChangedSpectatorEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ChangedSpectator"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerEnteringHazard(LabApi.Events.Arguments.PlayerEvents.PlayerEnteringHazardEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.EnteringHazard"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerEnteredHazard(LabApi.Events.Arguments.PlayerEvents.PlayerEnteredHazardEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.EnteredHazard"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerStayingInHazard(LabApi.Events.Arguments.PlayerEvents.PlayersStayingInHazardEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.StayingInHazard"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerLeavingHazard(LabApi.Events.Arguments.PlayerEvents.PlayerLeavingHazardEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.LeavingHazard"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerLeftHazard(LabApi.Events.Arguments.PlayerEvents.PlayerLeftHazardEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.LeftHazard"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerValidatedVisibility(LabApi.Events.Arguments.PlayerEvents.PlayerValidatedVisibilityEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.ValidatedVisibility"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnPlayerDetectedByScp1344(LabApi.Events.Arguments.PlayerEvents.PlayerDetectedByScp1344EventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.PlayerEvents.DetectedByScp1344"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp0492StartingConsumingCorpse(LabApi.Events.Arguments.Scp0492Events.Scp0492StartingConsumingCorpseEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp0492Events.StartingConsumingCorpse"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp0492StartedConsumingCorpse(LabApi.Events.Arguments.Scp0492Events.Scp0492StartedConsumingCorpseEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp0492Events.StartedConsumingCorpse"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp0492ConsumingCorpse(LabApi.Events.Arguments.Scp0492Events.Scp0492ConsumingCorpseEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp0492Events.ConsumingCorpse"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp0492ConsumedCorpse(LabApi.Events.Arguments.Scp0492Events.Scp0492ConsumedCorpseEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp0492Events.ConsumedCorpse"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp049StartingResurrection(LabApi.Events.Arguments.Scp049Events.Scp049StartingResurrectionEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp049Events.StartingResurrection"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp049ResurrectingBody(LabApi.Events.Arguments.Scp049Events.Scp049ResurrectingBodyEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp049Events.ResurrectingBody"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp049ResurrectedBody(LabApi.Events.Arguments.Scp049Events.Scp049ResurrectedBodyEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp049Events.ResurrectedBody"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp049UsingDoctorsCall(LabApi.Events.Arguments.Scp049Events.Scp049UsingDoctorsCallEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp049Events.UsingDoctorsCall"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp049UsedDoctorsCall(LabApi.Events.Arguments.Scp049Events.Scp049UsedDoctorsCallEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp049Events.UsedDoctorsCall"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp049UsingSense(LabApi.Events.Arguments.Scp049Events.Scp049UsingSenseEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp049Events.UsingSense"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp049UsedSense(LabApi.Events.Arguments.Scp049Events.Scp049UsedSenseEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp049Events.UsedSense"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp079BlackingOutRoom(LabApi.Events.Arguments.Scp079Events.Scp079BlackingOutRoomEventsArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp079Events.BlackingOutRoom"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp079BlackedOutRoom(LabApi.Events.Arguments.Scp079Events.Scp079BlackedOutRoomEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp079Events.BlackedOutRoom"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp079BlackingOutZone(LabApi.Events.Arguments.Scp079Events.Scp079BlackingOutZoneEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp079Events.BlackingOutZone"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp079BlackedOutZone(LabApi.Events.Arguments.Scp079Events.Scp079BlackedOutZoneEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp079Events.BlackedOutZone"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp079ChangingCamera(LabApi.Events.Arguments.Scp079Events.Scp079ChangingCameraEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp079Events.ChangingCamera"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp079ChangedCamera(LabApi.Events.Arguments.Scp079Events.Scp079ChangedCameraEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp079Events.ChangedCamera"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp079CancellingRoomLockdown(LabApi.Events.Arguments.Scp079Events.Scp079CancellingRoomLockdownEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp079Events.CancellingRoomLockdown"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp079CancelledRoomLockdown(LabApi.Events.Arguments.Scp079Events.Scp079CancelledRoomLockdownEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp079Events.CancelledRoomLockdown"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp079GainingExperience(LabApi.Events.Arguments.Scp079Events.Scp079GainingExperienceEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp079Events.GainingExperience"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp079GainedExperience(LabApi.Events.Arguments.Scp079Events.Scp079GainedExperienceEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp079Events.GainedExperience"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp079LevelingUp(LabApi.Events.Arguments.Scp079Events.Scp079LevelingUpEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp079Events.LevelingUp"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp079LeveledUp(LabApi.Events.Arguments.Scp079Events.Scp079LeveledUpEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp079Events.LeveledUp"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp079LockingDoor(LabApi.Events.Arguments.Scp079Events.Scp079LockingDoorEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp079Events.LockingDoor"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp079LockedDoor(LabApi.Events.Arguments.Scp079Events.Scp079LockedDoorEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp079Events.LockedDoor"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp079LockingDownRoom(LabApi.Events.Arguments.Scp079Events.Scp079LockingDownRoomEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp079Events.LockingDownRoom"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp079LockedDownRoom(LabApi.Events.Arguments.Scp079Events.Scp079LockedDownRoomEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp079Events.LockedDownRoom"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp079Recontaining(LabApi.Events.Arguments.Scp079Events.Scp079RecontainingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp079Events.Recontaining"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp079Recontained(LabApi.Events.Arguments.Scp079Events.Scp079RecontainedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp079Events.Recontained"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp079UnlockingDoor(LabApi.Events.Arguments.Scp079Events.Scp079UnlockingDoorEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp079Events.UnlockingDoor"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp079UnlockedDoor(LabApi.Events.Arguments.Scp079Events.Scp079UnlockedDoorEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp079Events.UnlockedDoor"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp079UsingTesla(LabApi.Events.Arguments.Scp079Events.Scp079UsingTeslaEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp079Events.UsingTesla"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp079UsedTesla(LabApi.Events.Arguments.Scp079Events.Scp079UsedTeslaEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp079Events.UsedTesla"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp079Pinging(LabApi.Events.Arguments.Scp079Events.Scp079PingingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp079Events.Pinging"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp079Pinged(LabApi.Events.Arguments.Scp079Events.Scp079PingedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp079Events.Pinged"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp096AddingTarget(LabApi.Events.Arguments.Scp096Events.Scp096AddingTargetEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp096Events.AddingTarget"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp096AddedTarget(LabApi.Events.Arguments.Scp096Events.Scp096AddedTargetEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp096Events.AddedTarget"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp096ChangingState(LabApi.Events.Arguments.Scp096Events.Scp096ChangingStateEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp096Events.ChangingState"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp096ChangedState(LabApi.Events.Arguments.Scp096Events.Scp096ChangedStateEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp096Events.ChangedState"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp096Charging(LabApi.Events.Arguments.Scp096Events.Scp096ChargingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp096Events.Charging"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp096Charged(LabApi.Events.Arguments.Scp096Events.Scp096ChargedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp096Events.Charged"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp096Enraging(LabApi.Events.Arguments.Scp096Events.Scp096EnragingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp096Events.Enraging"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp096Enraged(LabApi.Events.Arguments.Scp096Events.Scp096EnragedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp096Events.Enraged"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp096PryingGate(LabApi.Events.Arguments.Scp096Events.Scp096PryingGateEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp096Events.PryingGate"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp096PriedGate(LabApi.Events.Arguments.Scp096Events.Scp096PriedGateEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp096Events.PriedGate"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp096StartCrying(LabApi.Events.Arguments.Scp096Events.Scp096StartCryingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp096Events.StartCrying"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp096StartedCrying(LabApi.Events.Arguments.Scp096Events.Scp096StartedCryingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp096Events.StartedCrying"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp096TryingNotToCry(LabApi.Events.Arguments.Scp096Events.Scp096TryingNotToCryEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp096Events.TryingNotToCry"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp096TriedNotToCry(LabApi.Events.Arguments.Scp096Events.Scp096TriedNotToCryEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp096Events.TriedNotToCry"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp106ChangingStalkMode(LabApi.Events.Arguments.Scp106Events.Scp106ChangingStalkModeEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp106Events.ChangingStalkMode"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp106ChangedStalkMode(LabApi.Events.Arguments.Scp106Events.Scp106ChangedStalkModeEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp106Events.ChangedStalkMode"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp106ChangingVigor(LabApi.Events.Arguments.Scp106Events.Scp106ChangingVigorEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp106Events.ChangingVigor"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp106ChangedVigor(LabApi.Events.Arguments.Scp106Events.Scp106ChangedVigorEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp106Events.ChangedVigor"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp106UsedHunterAtlas(LabApi.Events.Arguments.Scp106Events.Scp106UsedHunterAtlasEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp106Events.UsedHunterAtlas"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp106UsingHunterAtlas(LabApi.Events.Arguments.Scp106Events.Scp106UsingHunterAtlasEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp106Events.UsingHunterAtlas"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp106ChangingSubmersionStatus(LabApi.Events.Arguments.Scp106Events.Scp106ChangingSubmersionStatusEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp106Events.ChangingSubmersionStatus"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp106ChangedSubmersionStatus(LabApi.Events.Arguments.Scp106Events.Scp106ChangedSubmersionStatusEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp106Events.ChangedSubmersionStatus"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp106TeleportingPlayer(LabApi.Events.Arguments.Scp106Events.Scp106TeleportingPlayerEvent)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp106Events.TeleportingPlayer"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp106TeleportedPlayer(LabApi.Events.Arguments.Scp106Events.Scp106TeleportedPlayerEvent)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp106Events.TeleportedPlayer"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp127GainingExperience(LabApi.Events.Arguments.Scp127Events.Scp127GainingExperienceEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp127Events.GainingExperience"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp127GainExperience(LabApi.Events.Arguments.Scp127Events.Scp127GainExperienceEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp127Events.GainExperience"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp127LevellingUp(LabApi.Events.Arguments.Scp127Events.Scp127LevellingUpEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp127Events.LevellingUp"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp127LevelUp(LabApi.Events.Arguments.Scp127Events.Scp127LevelUpEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp127Events.LevelUp"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp127Talking(LabApi.Events.Arguments.Scp127Events.Scp127TalkingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp127Events.Talking"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp127Talked(LabApi.Events.Arguments.Scp127Events.Scp127TalkedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp127Events.Talked"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp173BreakneckSpeedChanging(LabApi.Events.Arguments.Scp173Events.Scp173BreakneckSpeedChangingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp173Events.BreakneckSpeedChanging"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp173BreakneckSpeedChanged(LabApi.Events.Arguments.Scp173Events.Scp173BreakneckSpeedChangedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp173Events.BreakneckSpeedChanged"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp173AddingObserver(LabApi.Events.Arguments.Scp173Events.Scp173AddingObserverEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp173Events.AddingObserver"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp173AddedObserver(LabApi.Events.Arguments.Scp173Events.Scp173AddedObserverEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp173Events.AddedObserver"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp173RemovingObserver(LabApi.Events.Arguments.Scp173Events.Scp173RemovingObserverEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp173Events.RemovingObserver"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp173RemovedObserver(LabApi.Events.Arguments.Scp173Events.Scp173RemovedObserverEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp173Events.RemovedObserver"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp173CreatingTantrum(LabApi.Events.Arguments.Scp173Events.Scp173CreatingTantrumEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp173Events.CreatingTantrum"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp173CreatedTantrum(LabApi.Events.Arguments.Scp173Events.Scp173CreatedTantrumEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp173Events.CreatedTantrum"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp173PlayingSound(LabApi.Events.Arguments.Scp173Events.Scp173PlayingSoundEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp173Events.PlayingSound"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp173PlayedSound(LabApi.Events.Arguments.Scp173Events.Scp173PlayedSoundEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp173Events.PlayedSound"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp173Teleporting(LabApi.Events.Arguments.Scp173Events.Scp173TeleportingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp173Events.Teleporting"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp173Teleported(LabApi.Events.Arguments.Scp173Events.Scp173TeleportedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp173Events.Teleported"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp3114Disguising(LabApi.Events.Arguments.Scp3114Events.Scp3114DisguisingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp3114Events.Disguising"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp3114Disguised(LabApi.Events.Arguments.Scp3114Events.Scp3114DisguisedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp3114Events.Disguised"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp3114Revealing(LabApi.Events.Arguments.Scp3114Events.Scp3114RevealingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp3114Events.Revealing"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp3114Revealed(LabApi.Events.Arguments.Scp3114Events.Scp3114RevealedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp3114Events.Revealed"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp3114StrangleStarting(LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleStartingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp3114Events.StrangleStarting"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp3114StrangleStarted(LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleStartedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp3114Events.StrangleStarted"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp3114StrangleAborting(LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleAbortingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp3114Events.StrangleAborting"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp3114Dance(LabApi.Events.Arguments.Scp3114Events.Scp3114StartedDanceEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp3114Events.Dance"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp3114StartDancing(LabApi.Events.Arguments.Scp3114Events.Scp3114StartingDanceEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp3114Events.StartDancing"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp3114StrangleAborted(LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleAbortedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp3114Events.StrangleAborted"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp914Activating(LabApi.Events.Arguments.Scp914Events.Scp914ActivatingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp914Events.Activating"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp914Activated(LabApi.Events.Arguments.Scp914Events.Scp914ActivatedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp914Events.Activated"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp914KnobChanging(LabApi.Events.Arguments.Scp914Events.Scp914KnobChangingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp914Events.KnobChanging"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp914KnobChanged(LabApi.Events.Arguments.Scp914Events.Scp914KnobChangedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp914Events.KnobChanged"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp914ProcessingPickup(LabApi.Events.Arguments.Scp914Events.Scp914ProcessingPickupEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp914Events.ProcessingPickup"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp914ProcessedPickup(LabApi.Events.Arguments.Scp914Events.Scp914ProcessedPickupEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp914Events.ProcessedPickup"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp914ProcessingPlayer(LabApi.Events.Arguments.Scp914Events.Scp914ProcessingPlayerEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp914Events.ProcessingPlayer"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp914ProcessedPlayer(LabApi.Events.Arguments.Scp914Events.Scp914ProcessedPlayerEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp914Events.ProcessedPlayer"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp914ProcessingInventoryItem(LabApi.Events.Arguments.Scp914Events.Scp914ProcessingInventoryItemEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp914Events.ProcessingInventoryItem"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp914ProcessedInventoryItem(LabApi.Events.Arguments.Scp914Events.Scp914ProcessedInventoryItemEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp914Events.ProcessedInventoryItem"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp939Attacking(LabApi.Events.Arguments.Scp939Events.Scp939AttackingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp939Events.Attacking"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp939Attacked(LabApi.Events.Arguments.Scp939Events.Scp939AttackedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp939Events.Attacked"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp939CreatingAmnesticCloud(LabApi.Events.Arguments.Scp939Events.Scp939CreatingAmnesticCloudEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp939Events.CreatingAmnesticCloud"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp939CreatedAmnesticCloud(LabApi.Events.Arguments.Scp939Events.Scp939CreatedAmnesticCloudEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp939Events.CreatedAmnesticCloud"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp939Lunging(LabApi.Events.Arguments.Scp939Events.Scp939LungingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp939Events.Lunging"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnScp939Lunged(LabApi.Events.Arguments.Scp939Events.Scp939LungedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.Scp939Events.Lunged"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerWaitingForPlayers">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.WaitingForPlayers"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerRoundRestarted">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.RoundRestarted"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerRoundEndingConditionsCheck(LabApi.Events.Arguments.ServerEvents.RoundEndingConditionsCheckEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.RoundEndingConditionsCheck"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerRoundEnding(LabApi.Events.Arguments.ServerEvents.RoundEndingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.RoundEnding"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerRoundEnded(LabApi.Events.Arguments.ServerEvents.RoundEndedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.RoundEnded"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerRoundStarting(LabApi.Events.Arguments.ServerEvents.RoundStartingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.RoundStarting"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerRoundStarted">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.RoundStarted"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerBanIssuing(LabApi.Events.Arguments.ServerEvents.BanIssuingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.BanIssuing"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerBanIssued(LabApi.Events.Arguments.ServerEvents.BanIssuedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.BanIssued"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerBanRevoking(LabApi.Events.Arguments.ServerEvents.BanRevokingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.BanRevoking"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerBanRevoked(LabApi.Events.Arguments.ServerEvents.BanRevokedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.BanRevoked"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerBanUpdating(LabApi.Events.Arguments.ServerEvents.BanUpdatingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.BanUpdating"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerBanUpdated(LabApi.Events.Arguments.ServerEvents.BanUpdatedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.BanUpdated"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerCommandExecuting(LabApi.Events.Arguments.ServerEvents.CommandExecutingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.CommandExecuting"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerCommandExecuted(LabApi.Events.Arguments.ServerEvents.CommandExecutedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.CommandExecuted"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerCassieQueuingScpTermination(LabApi.Events.Arguments.ServerEvents.CassieQueuingScpTerminationEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.CassieQueuingScpTermination"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerCassieQueuedScpTermination(LabApi.Events.Arguments.ServerEvents.CassieQueuedScpTerminationEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.CassieQueuedScpTermination"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerWaveRespawning(LabApi.Events.Arguments.ServerEvents.WaveRespawningEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.WaveRespawning"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerWaveRespawned(LabApi.Events.Arguments.ServerEvents.WaveRespawnedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.WaveRespawned"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerWaveTeamSelecting(LabApi.Events.Arguments.ServerEvents.WaveTeamSelectingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.WaveTeamSelecting"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerWaveTeamSelected(LabApi.Events.Arguments.ServerEvents.WaveTeamSelectedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.WaveTeamSelected"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerLczDecontaminationAnnounced(LabApi.Events.Arguments.ServerEvents.LczDecontaminationAnnouncedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.LczDecontaminationAnnounced"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerLczDecontaminationStarting(LabApi.Events.Arguments.ServerEvents.LczDecontaminationStartingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.LczDecontaminationStarting"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerLczDecontaminationStarted">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.LczDecontaminationStarted"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerMapGenerating(LabApi.Events.Arguments.ServerEvents.MapGeneratingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.MapGenerating"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerMapGenerated(LabApi.Events.Arguments.ServerEvents.MapGeneratedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.MapGenerated"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerPickupCreated(LabApi.Events.Arguments.ServerEvents.PickupCreatedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.PickupCreated"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerPickupDestroyed(LabApi.Events.Arguments.ServerEvents.PickupDestroyedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.PickupDestroyed"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerSendingAdminChat(LabApi.Events.Arguments.ServerEvents.SendingAdminChatEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.SendingAdminChat"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerSentAdminChat(LabApi.Events.Arguments.ServerEvents.SentAdminChatEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.SentAdminChat"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerItemSpawning(LabApi.Events.Arguments.ServerEvents.ItemSpawningEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.ItemSpawning"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerItemSpawned(LabApi.Events.Arguments.ServerEvents.ItemSpawnedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.ItemSpawned"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerCassieAnnouncing(LabApi.Events.Arguments.ServerEvents.CassieAnnouncingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.CassieAnnouncing"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerCassieAnnounced(LabApi.Events.Arguments.ServerEvents.CassieAnnouncedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.CassieAnnounced"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerProjectileExploding(LabApi.Events.Arguments.ServerEvents.ProjectileExplodingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.ProjectileExploding"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerProjectileExploded(LabApi.Events.Arguments.ServerEvents.ProjectileExplodedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.ProjectileExploded"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerExplosionSpawning(LabApi.Events.Arguments.ServerEvents.ExplosionSpawningEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.ExplosionSpawning"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerExplosionSpawned(LabApi.Events.Arguments.ServerEvents.ExplosionSpawnedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.ExplosionSpawned"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerGeneratorActivating(LabApi.Events.Arguments.ServerEvents.GeneratorActivatingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.GeneratorActivating"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerGeneratorActivated(LabApi.Events.Arguments.ServerEvents.GeneratorActivatedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.GeneratorActivated"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnServerElevatorSequenceChanged(LabApi.Events.Arguments.ServerEvents.ElevatorSequenceChangedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.ServerEvents.ElevatorSequenceChanged"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnWarheadStarting(LabApi.Events.Arguments.WarheadEvents.WarheadStartingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.WarheadEvents.Starting"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnWarheadStarted(LabApi.Events.Arguments.WarheadEvents.WarheadStartedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.WarheadEvents.Started"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnWarheadStopping(LabApi.Events.Arguments.WarheadEvents.WarheadStoppingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.WarheadEvents.Stopping"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnWarheadStopped(LabApi.Events.Arguments.WarheadEvents.WarheadStoppedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.WarheadEvents.Stopped"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnWarheadDetonating(LabApi.Events.Arguments.WarheadEvents.WarheadDetonatingEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.WarheadEvents.Detonating"/>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomEventsHandler.OnWarheadDetonated(LabApi.Events.Arguments.WarheadEvents.WarheadDetonatedEventArgs)">
            <inheritdoc cref="E:LabApi.Events.Handlers.WarheadEvents.Detonated"/>
        </member>
        <member name="T:LabApi.Events.CustomHandlers.CustomHandlersManager">
            <summary>
            Handles the registration of custom event handlers.
            </summary>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomHandlersManager.RegisterEventsHandler``1(``0)">
            <summary>
            Registers all the events from the specified handler.
            </summary>
            <param name="handler">The handler to register.</param>
            <typeparam name="T">The type of the handler.</typeparam>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomHandlersManager.UnregisterEventsHandler``1(``0)">
            <summary>
            Unregisters all the events from the specified handler.
            </summary>
            <param name="handler">The handler to unregister.</param>
            <typeparam name="T">The type of the handler.</typeparam>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomHandlersManager.CheckEvent``1(``0,System.Type,System.String,System.Type,System.String)">
            <summary>
            Checks if the event is overriden and subscribes the handler to the event if it is.
            </summary>
            <param name="handler">The custom event handler instance.</param>
            <param name="handlerType">The <see cref="T:System.Type"/> of the handler instance.</param>
            <param name="methodDelegate">The <see langword="nameof"/> of the <see cref="T:LabApi.Events.CustomHandlers.CustomEventsHandler"/> event method.</param>
            <param name="eventType">The <see cref="T:System.Type"/> class of the handler.</param>
            <param name="eventName">The <see langword="nameof"/> the event in the handler.</param>
            <typeparam name="T">The custom event handler type.</typeparam>
        </member>
        <member name="M:LabApi.Events.CustomHandlers.CustomHandlersManager.IsOverride(System.Reflection.MethodInfo)">
            <summary>
            Whether the method is an override or the base definition.
            </summary>
        </member>
        <member name="T:LabApi.Events.EventManager">
            <summary>
            LabAPI's event manager.
            Responsible for handling all events inside the API.
            </summary>
        </member>
        <member name="M:LabApi.Events.EventManager.InvokeEvent(LabApi.Events.LabEventHandler)">
            <summary>
            Invokes a <see cref="T:LabApi.Events.LabEventHandler"/> event and logs any errors that occur.
            </summary>
            <param name="eventHandler">The <see cref="T:LabApi.Events.LabEventHandler"/> to invoke.</param>
        </member>
        <member name="M:LabApi.Events.EventManager.InvokeEvent``1(LabApi.Events.LabEventHandler{``0},``0)">
            <summary>
            Invokes a <see cref="T:LabApi.Events.LabEventHandler`1"/> event and logs any errors that occur.
            </summary>
            <param name="eventHandler">The <see cref="T:LabApi.Events.LabEventHandler`1"/> to invoke.</param>
            <param name="args">The <see cref="T:System.EventArgs"/> of the event.</param>
            <typeparam name="TEventArgs">The type of the <see cref="T:System.EventArgs"/> of the event.</typeparam>
        </member>
        <member name="M:LabApi.Events.EventManager.FormatToString(LabApi.Events.LabEventHandler)">
            <summary>
            Formats the <see cref="T:LabApi.Events.LabEventHandler"/> to a string.
            </summary>
            <param name="eventHandler">The <see cref="T:LabApi.Events.LabEventHandler"/> to format.</param>
            <returns>A formatted string of the <see cref="T:LabApi.Events.LabEventHandler"/>.</returns>
        </member>
        <member name="M:LabApi.Events.EventManager.FormatToString``1(LabApi.Events.LabEventHandler{``0},``0)">
            <summary>
            Formats the <see cref="T:LabApi.Events.LabEventHandler`1"/> to a string.
            </summary>
            <param name="eventHandler">The <see cref="T:LabApi.Events.LabEventHandler`1"/> to format.</param>
            <param name="args">The <see cref="T:System.EventArgs"/> of the event.</param>
            <typeparam name="TEventArgs">The type of the <see cref="T:System.EventArgs"/> of the event.</typeparam>
            <returns>A formatted string of the <see cref="T:LabApi.Events.LabEventHandler`1"/>.</returns>
        </member>
        <member name="M:LabApi.Events.EventManager.FormatErrorMessage(System.Delegate,System.Exception)">
            <summary>
            Formats an error message for a <see cref="T:LabApi.Events.LabEventHandler"/>.
            </summary>
            <param name="eventHandler">The <see cref="T:LabApi.Events.LabEventHandler"/> that caused the error.</param>
            <param name="exception">The <see cref="T:System.Exception"/> that occurred.</param>
            <returns>The formated error message.</returns>
        </member>
        <member name="T:LabApi.Events.Handlers.ObjectiveEvents">
            <summary>
            Handles all events related to objectives.
            </summary>
            <inheritdoc />
        </member>
        <member name="E:LabApi.Events.Handlers.ObjectiveEvents.Completing">
            <summary>
            Gets called when <b>any</b> objective is being completed.<br/>
            Use specific events or the subclasses of the <see cref="T:LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletingBaseEventArgs"/> to determine which kind of the objective is being completed.
            </summary>
            <remarks>
            This event is called <b>after</b> the very specific objective event has been triggered.
            </remarks>
        </member>
        <member name="E:LabApi.Events.Handlers.ObjectiveEvents.Completed">
            <summary>
            Gets called when <b>any</b> objective has been completed.<br/>
            Use specific events or the subclasses of the <see cref="T:LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletedBaseEventArgs"/> to determine which kind of the objective has been completed.
            </summary>
            <remarks>
            This event is called <b>after</b> the very specific objective event has been triggered.
            </remarks>
        </member>
        <member name="E:LabApi.Events.Handlers.ObjectiveEvents.KillingEnemyCompleting">
            <summary>
            Gets called when the enemy kill objective is being completed.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ObjectiveEvents.KilledEnemyCompleted">
            <summary>
            Gets called when the enemy kill objective has been completed.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ObjectiveEvents.EscapingCompleting">
            <summary>
            Gets called when the player escape objective is being completed.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ObjectiveEvents.EscapedCompleted">
            <summary>
            Gets called when the player escape objective has been completed.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ObjectiveEvents.ActivatingGeneratorCompleting">
            <summary>
            Gets called when the generator activated objective is being completed.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ObjectiveEvents.ActivatedGeneratorCompleted">
            <summary>
            Gets called when the generator activated objective has been completed.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ObjectiveEvents.DamagingScpCompleting">
            <summary>
            Gets called when the scp damage objective is being completed.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ObjectiveEvents.DamagedScpCompleted">
            <summary>
            Gets called when the scp damage objective has been completed.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ObjectiveEvents.PickingScpItemCompleting">
            <summary>
            Gets called when the scp item pickup objective is being completed.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ObjectiveEvents.PickedScpItemCompleted">
            <summary>
            Gets called when the scp item pickup objective has been completed.
            </summary>
        </member>
        <member name="M:LabApi.Events.Handlers.ObjectiveEvents.OnCompleting(LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletingBaseEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ObjectiveEvents.Completing"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletingBaseEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ObjectiveEvents.OnCompleted(LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletedBaseEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ObjectiveEvents.Completed"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ObjectiveEvents.ObjectiveCompletedBaseEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ObjectiveEvents.OnKillingEnemyCompleting(LabApi.Events.Arguments.ObjectiveEvents.EnemyKillingObjectiveEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ObjectiveEvents.KillingEnemyCompleting"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ObjectiveEvents.EnemyKillingObjectiveEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ObjectiveEvents.OnKilledEnemyCompleted(LabApi.Events.Arguments.ObjectiveEvents.EnemyKilledObjectiveEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ObjectiveEvents.KilledEnemyCompleted"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ObjectiveEvents.EnemyKilledObjectiveEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ObjectiveEvents.OnEscapingCompleting(LabApi.Events.Arguments.ObjectiveEvents.EscapingObjectiveEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ObjectiveEvents.EscapingCompleting"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ObjectiveEvents.EscapingObjectiveEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ObjectiveEvents.OnEscapedCompleted(LabApi.Events.Arguments.ObjectiveEvents.EscapedObjectiveEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ObjectiveEvents.EscapedCompleted"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ObjectiveEvents.EscapedObjectiveEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ObjectiveEvents.OnActivatingGeneratorCompleting(LabApi.Events.Arguments.ObjectiveEvents.GeneratorActivatingObjectiveEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ObjectiveEvents.ActivatingGeneratorCompleting"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ObjectiveEvents.GeneratorActivatingObjectiveEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ObjectiveEvents.OnActivatedGeneratorCompleted(LabApi.Events.Arguments.ObjectiveEvents.GeneratorActivatedObjectiveEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ObjectiveEvents.ActivatedGeneratorCompleted"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ObjectiveEvents.GeneratorActivatedObjectiveEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ObjectiveEvents.OnDamagingScpCompleting(LabApi.Events.Arguments.ObjectiveEvents.ScpDamagingObjectiveEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ObjectiveEvents.DamagingScpCompleting"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ObjectiveEvents.ScpDamagingObjectiveEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ObjectiveEvents.OnDamagedScpCompleted(LabApi.Events.Arguments.ObjectiveEvents.ScpDamagedObjectiveEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ObjectiveEvents.DamagedScpCompleted"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ObjectiveEvents.ScpDamagedObjectiveEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ObjectiveEvents.OnPickingScpItemCompleting(LabApi.Events.Arguments.ObjectiveEvents.ScpItemPickingObjectiveEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ObjectiveEvents.PickingScpItemCompleting"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ObjectiveEvents.ScpItemPickingObjectiveEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ObjectiveEvents.OnPickedScpItemCompleted(LabApi.Events.Arguments.ObjectiveEvents.ScpItemPickedObjectiveEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ObjectiveEvents.PickedScpItemCompleted"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ObjectiveEvents.ScpItemPickedObjectiveEventArgs"/> of the event.</param>
        </member>
        <member name="T:LabApi.Events.Handlers.PlayerEvents">
            <summary>
            Handles all the events related to the player.
            </summary>
            <inheritdoc />
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.Joined">
            <summary>
            Gets called when the player has joined.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.Left">
            <summary>
            Gets called when the player has left.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ReceivingVoiceMessage">
            <summary>
            Gets called when the player is receiving a voice message.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.SendingVoiceMessage">
            <summary>
            Gets called when the player is sending a voice message.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.PreAuthenticating">
            <summary>
            Gets called when the player is pre-authenticating.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.PreAuthenticated">
            <summary>
            Gets called when the player has pre-authenticated.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.UsingIntercom">
            <summary>
            Gets called when the player is using the intercom.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.UsedIntercom">
            <summary>
            Gets called when the player has used the intercom.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.Banning">
            <summary>
            Gets called when the player is being banned.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.Banned">
            <summary>
            Gets called when the player is banned.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.Kicking">
            <summary>
            Gets called when the player is being kicked.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.Kicked">
            <summary>
            Gets called when the player has been kicked.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.Muting">
            <summary>
            Gets called when the player is being muted.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.Muted">
            <summary>
            Gets called when the player has been muted.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.Unmuting">
            <summary>
            Gets called when the player is being unmuted.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.Unmuted">
            <summary>
            Gets called when the player has been unmuted.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ReportingCheater">
            <summary>
            Gets called when the player is reporting a cheater.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ReportedCheater">
            <summary>
            Gets called when the player has reported a cheater.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ReportingPlayer">
            <summary>
            Gets called when the player is reporting another player.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ReportedPlayer">
            <summary>
            Gets called when the player has reported another player.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.TogglingNoclip">
            <summary>
            Gets called when the player is attempting to toggle noclip (pressed alt).
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ToggledNoclip">
            <summary>
            Gets called when the player has toggled the noclip.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.RequestingRaPlayerList">
            <summary>
            Gets called when the player is requesting the remote admin player list.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.RequestedRaPlayerList">
            <summary>
            Gets called when the player had requested the remote admin player list.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.RaPlayerListAddingPlayer">
            <summary>
            Gets called when adding a target player to the remote admin player list while processing the request for the player.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.RaPlayerListAddedPlayer">
            <summary>
            Gets called when a target player was added to the remote admin player list while processing the request for the player.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.RequestedCustomRaInfo">
            <summary>
            Gets called when a player requested info for an unknown target in the remote admin.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.RequestingRaPlayersInfo">
            <summary>
            Gets called when a player is requesting info for multiple players in the remote admin.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.RequestedRaPlayersInfo">
            <summary>
            Gets called when a player had requested info for multiple players in the remote admin.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.RequestingRaPlayerInfo">
            <summary>
            Gets called when a player is requesting info for a target player in the remote admin.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.RequestedRaPlayerInfo">
            <summary>
            Gets called when a player had requested info for a target player in the remote admin.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ChangingBadgeVisibility">
            <summary>
            Gets called when the player is changing their global or local badge visibility.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ChangedBadgeVisibility">
            <summary>
            Gets called when the player has changed their global or local badge visibility.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ChangingNickname">
            <summary>
            Gets called when a players' nickname is changing.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ChangedNickname">
            <summary>
            Gets called when a players' nickname has changed.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.GroupChanging">
            <summary>
            Gets called when the player's group is changing.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.GroupChanged">
            <summary>
            Gets called when the player's group has changed.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.UpdatingEffect">
            <summary>
            Gets called when the player is receiving an effect.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.UpdatedEffect">
            <summary>
            Gets called when the player has received an effect.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.Dying">
            <summary>
            Gets called when the player is dying.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.Death">
            <summary>
            Gets called when the player has died.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.Hurting">
            <summary>
            Gets called when the player is getting hurt.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.Hurt">
            <summary>
            Gets called when the player has been hurt.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ChangingRole">
            <summary>
            Gets called when the player's role is changing.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ChangedRole">
            <summary>
            Gets called when the player's role has changed.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.Cuffing">
            <summary>
            Gets called when the player is being disarmed by another.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.Cuffed">
            <summary>
            Gets called when the player has been disarmed by another.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.Uncuffing">
            <summary>
            Gets called when the player is being undisarmed.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.Uncuffed">
            <summary>
            Gets called when the player has been undisarmed.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ReceivingLoadout">
            <summary>
            Gets called when the player is receiving a loadout.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ReceivedLoadout">
            <summary>
            Gets called when the player has received a loadout.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.Spawning">
            <summary>
            Gets called when the player is spawning.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.Spawned">
            <summary>
            Gets called when the player has spawned.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ChangingItem">
            <summary>
            Gets called when the player is changing their held item.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ChangedItem">
            <summary>
            Gets called when the player has changed their held item.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.DroppingAmmo">
            <summary>
            Gets called when the player is dropping ammo.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.DroppedAmmo">
            <summary>
            Gets called when the player has dropped ammo.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.DroppingItem">
            <summary>
            Gets called when the player is dropping an item.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.DroppedItem">
            <summary>
            Gets called when the player has dropped an item.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.PickingUpAmmo">
            <summary>
            Gets called when the player is picking up ammo.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.PickedUpAmmo">
            <summary>
            Gets called when the player has picked up ammo.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.PickingUpArmor">
            <summary>
            Gets called when the player is picking up armor.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.PickedUpArmor">
            <summary>
            Gets called when the player has picked up armor.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.PickingUpItem">
            <summary>
            Gets called when the player is picking up an item.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.PickedUpItem">
            <summary>
            Gets called when the player has picked up an item.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.PickingUpScp330">
            <summary>
            Gets called when the player is picking up SCP-330.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.PickedUpScp330">
            <summary>
            Gets called when the player has picked up SCP-330.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.SearchedAmmo">
            <summary>
            Gets called when the player has searched for ammo.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.SearchingArmor">
            <summary>
            Gets called when the player is searching for armor.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.SearchedArmor">
            <summary>
            Gets called when the player has searched for armor.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.SearchingPickup">
            <summary>
            Gets called when the player is searching a pickup.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.InteractedToy">
            <summary>
            Gets called when the player has interacted with an invisible interactable toy.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.SearchedPickup">
            <summary>
            Gets called when the player has joined.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.SearchingAmmo">
            <summary>
            Gets called when the player is searching for ammo.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ThrowingItem">
            <summary>
            Gets called when the player is throwing an item.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ThrewItem">
            <summary>
            Gets called when the player has thrown an item.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ThrowingProjectile">
            <summary>
            Gets called when the player is throwing a projectile.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ThrewProjectile">
            <summary>
            Gets called when the player has thrown a projectile.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.InspectingKeycard">
            <summary>
            Gets called when the player wants to inspect any keycard item.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.InspectedKeycard">
            <summary>
            Gets called when the player inspected keycard item.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.SpinningRevolver">
            <summary>
            Gets called when the player requests to spin the revolver.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.SpinnedRevolver">
            <summary>
            Gets called when the player spinned the revolver.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ToggledDisruptorFiringMode">
            <summary>
            Gets called when the player toggled disruptor firing mode.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.UsingItem">
            <summary>
            Gets called when the player is using an item.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.UsedItem">
            <summary>
            Gets called when the player has used an item.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ItemUsageEffectsApplying">
            <summary>
            Gets called when the player is about to complete using an item.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.UsingRadio">
            <summary>
            Gets called when the player is using the radio.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.UsedRadio">
            <summary>
            Gets called when the player has used the radio.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.AimedWeapon">
            <summary>
            Gets called when the player aimed the weapon.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.DryFiringWeapon">
            <summary>
            Gets called when the player is dry-firing a weapon.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.DryFiredWeapon">
            <summary>
            Gets called when the player has dry-fired a weapon.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.UnloadingWeapon">
            <summary>
            Gets called when the player is unloading a weapon.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.UnloadedWeapon">
            <summary>
            Gets called when the player has unloaded a weapon.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ReloadingWeapon">
            <summary>
            Gets called when the player is reloading a weapon.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ReloadedWeapon">
            <summary>
            Gets called when the player has reloaded a weapon.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ShootingWeapon">
            <summary>
            Gets called when the player is shooting from a weapon.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ShotWeapon">
            <summary>
            Gets called when the player has shot from a weapon.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ChangingAttachments">
            <summary>
            Gets called when player is changing weapon attachments.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ChangedAttachments">
            <summary>
            Gets called when player has changed weapon attachments.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.SendingAttachmentsPrefs">
            <summary>
            Gets called when player is changing weapon attachments preferences.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.SentAttachmentsPrefs">
            <summary>
            Gets called when player has changed weapon attachments preferences.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.CancellingUsingItem">
            <summary>
            Gets called when the player is cancelling the use of an item.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.CancelledUsingItem">
            <summary>
            Gets called when the player has cancelled the use of an item.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ChangingRadioRange">
            <summary>
            Gets called when the player is changing range of their radio.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ChangedRadioRange">
            <summary>
            Gets called when the player has changed range of their radio.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ProcessingJailbirdMessage">
            <summary>
            Gets called when processing a player's interaction with the jailbird item.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ProcessedJailbirdMessage">
            <summary>
            Gets called when processed the player's interaction with the jailbird item.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.TogglingFlashlight">
            <summary>
            Gets called when the player is toggling a flashlight.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ToggledFlashlight">
            <summary>
            Gets called when the player has toggled a flashlight.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.TogglingWeaponFlashlight">
            <summary>
            Gets called when the player is toggling a weapon flashlight.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ToggledWeaponFlashlight">
            <summary>
            Gets called when the player has toggled a weapon flashlight.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.TogglingRadio">
            <summary>
            Gets called when the player is toggling a radio.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ToggledRadio">
            <summary>
            Gets called when the player has toggled a radio.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.Jumped">
            <summary>
            Gets called when player successfully jumps. Not called when jumping is prevented by status effects.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.MovementStateChanged">
            <summary>
            Gets called when player's movement state change. Such as from walking to running, sneaking and opposite way around.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.DamagingShootingTarget">
            <summary>
            Gets called when the player is damaging a shooting target toy.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.DamagedShootingTarget">
            <summary>
            Gets called when the player has damaged a shooting target toy.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.DamagingWindow">
            <summary>
            Gets called when the player is damaging a window.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.DamagedWindow">
            <summary>
            Gets called when the player has damaged a window.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.EnteringPocketDimension">
            <summary>
            Gets called when the player is entering the pocket dimension.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.EnteredPocketDimension">
            <summary>
            Gets called when the player has entered the pocket dimension.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.LeavingPocketDimension">
            <summary>
            Gets called when the player is leaving the pocket dimension.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.LeftPocketDimension">
            <summary>
            Gets called when the player has left the pocket dimension.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.TriggeringTesla">
            <summary>
            Gets called when the player is triggering a <see cref="T:TeslaGate"/>.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.TriggeredTesla">
            <summary>
            Gets called when the player has triggered a <see cref="T:TeslaGate"/>.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.Escaping">
            <summary>
            Gets called when the player is escaping.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.Escaped">
            <summary>
            Gets called when the player has escaped.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.FlippingCoin">
            <summary>
            Gets called when the player is flipping a coin.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.FlippedCoin">
            <summary>
            Gets called when the player has flipped a coin.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.SearchingToy">
            <summary>
            Gets called when the player is searching an interactable toy.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.SearchedToy">
            <summary>
            Gets called when the player has searched an interactable toy.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.SearchToyAborted">
            <summary>
            Gets called when the player aborts their interactable toy search.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.IdlingTesla">
            <summary>
            Gets called when the player is sending a voice message.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.IdledTesla">
            <summary>
            Gets called when a player was close enough to a Tesla-Gate for it to idle.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.InteractingDoor">
            <summary>
            Gets called when the player is interacting with a door.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.InteractedDoor">
            <summary>
            Gets called when the player has interacted with a door.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.InteractingElevator">
            <summary>
            Gets called when the player is interacting with an elevator.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.InteractedElevator">
            <summary>
            Gets called when the player has interacted with an elevator.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.InteractingGenerator">
            <summary>
            Gets called when the player is interacting with a generator.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.InteractedGenerator">
            <summary>
            Gets called when the player has interacted with a generator.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.OpeningGenerator">
            <summary>
            Gets called when the player is opening a generator.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.OpenedGenerator">
            <summary>
            Gets called when the player has opened a generator.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ActivatingGenerator">
            <summary>
            Gets called when the player is activating the generator.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ActivatedGenerator">
            <summary>
            Gets called when the player activates the generator.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.DeactivatingGenerator">
            <summary>
            Gets called when the player is deactivating the generator.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.DeactivatedGenerator">
            <summary>
            Gets called when the player has deactivated the generator.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.UnlockingGenerator">
            <summary>
            Gets called when the player is unlocking the generator.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.UnlockedGenerator">
            <summary>
            Gets called when the player unlocked the generator.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ClosingGenerator">
            <summary>
            Gets called when the player is closing the generator.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ClosedGenerator">
            <summary>
            Gets called when the player has closed the generator.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.InteractingLocker">
            <summary>
            Gets called when the player is interacting with a locker.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.InteractedLocker">
            <summary>
            Gets called when the player has interacted with a locker.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.InteractingScp330">
            <summary>
            Gets called when the player is interacting with SCP-330.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.InteractedScp330">
            <summary>
            Gets called when the player has interacted with SCP-330.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.InteractingShootingTarget">
            <summary>
            Gets called when the player is interacting with a shooting target.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.InteractedShootingTarget">
            <summary>
            Gets called when the player has interacted with a shooting target.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.PlacingBlood">
            <summary>
            Gets called when blood of the player is being placed.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.PlacedBlood">
            <summary>
            Gets called when blood of the player was placed.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.PlacingBulletHole">
            <summary>
            Gets called when the bullet hole is being placed.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.PlacedBulletHole">
            <summary>
            Gets called when the bullet hole has been placed.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.SpawningRagdoll">
            <summary>
            Gets called when ragdoll is being spawned.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.SpawnedRagdoll">
            <summary>
            Gets called when ragdoll has been spawned.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.UnlockingWarheadButton">
            <summary>
            Gets called when warhead button on surface is being unlocked.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.UnlockedWarheadButton">
            <summary>
            Gets called when warhead button on surface has been unlocked.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ReceivedAchievement">
            <summary>
            Gets called when the player has meet the requirements of an achievement.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.RoomChanged">
            <summary>
            Gets called when player's last known room changes.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ZoneChanged">
            <summary>
            Gets called when player's last known zone changes.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.InteractingWarheadLever">
            <summary>
            Gets called when player interacts with warhead lever.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.InteractedWarheadLever">
            <summary>
            Gets called when player interacted with warhead lever.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ChangedSpectator">
            <summary>
            Gets called when the player has changed the spectated player.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.EnteringHazard">
            <summary>
            Gets called when player is entering any environmental hazard.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.EnteredHazard">
            <summary>
            Gets called when player has entered any environmental hazard.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.StayingInHazard">
            <summary>
            Gets called when player has entered any environmental hazard.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.LeavingHazard">
            <summary>
            Gets called when player is leaving any environmental hazard.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.LeftHazard">
            <summary>
            Gets called when player has left any environmental hazard.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.ValidatedVisibility">
            <summary>
            Gets called when a player has validated the visibility of a target player.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.PlayerEvents.DetectedByScp1344">
            <summary>
            Gets called when player detects enemy player using SCP-1344.
            </summary>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnJoined(LabApi.Events.Arguments.PlayerEvents.PlayerJoinedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Joined"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerJoinedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnLeft(LabApi.Events.Arguments.PlayerEvents.PlayerLeftEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Left"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerLeftEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnReceivingVoiceMessage(LabApi.Events.Arguments.PlayerEvents.PlayerReceivingVoiceMessageEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ReceivingVoiceMessage"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerReceivingVoiceMessageEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnSendingVoiceMessage(LabApi.Events.Arguments.PlayerEvents.PlayerSendingVoiceMessageEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SendingVoiceMessage"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSendingVoiceMessageEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnPreAuthenticating(LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.PreAuthenticating"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnPreAuthenticated(LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.PreAuthenticated"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerPreAuthenticatedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnUsingIntercom(LabApi.Events.Arguments.PlayerEvents.PlayerUsingIntercomEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.UsingIntercom"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUsingIntercomEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnUsedIntercom(LabApi.Events.Arguments.PlayerEvents.PlayerUsedIntercomEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.UsedIntercom"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUsedIntercomEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnBanning(LabApi.Events.Arguments.PlayerEvents.PlayerBanningEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Banning"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerBanningEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnBanned(LabApi.Events.Arguments.PlayerEvents.PlayerBannedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Banned"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerBannedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnKicking(LabApi.Events.Arguments.PlayerEvents.PlayerKickingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Kicking"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerKickingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnKicked(LabApi.Events.Arguments.PlayerEvents.PlayerKickedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Kicked"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerKickedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnMuting(LabApi.Events.Arguments.PlayerEvents.PlayerMutingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Muting"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerMutingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnMuted(LabApi.Events.Arguments.PlayerEvents.PlayerMutedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Muted"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerMutedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnUnmuting(LabApi.Events.Arguments.PlayerEvents.PlayerUnmutingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Unmuting"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUnmutingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnUnmuted(LabApi.Events.Arguments.PlayerEvents.PlayerUnmutedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Unmuted"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUnmutedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnReportingCheater(LabApi.Events.Arguments.PlayerEvents.PlayerReportingCheaterEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ReportingCheater"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerReportingCheaterEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnReportedCheater(LabApi.Events.Arguments.PlayerEvents.PlayerReportedCheaterEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ReportedCheater"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerReportedCheaterEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnReportingPlayer(LabApi.Events.Arguments.PlayerEvents.PlayerReportingPlayerEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ReportingPlayer"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerReportingPlayerEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnReportedPlayer(LabApi.Events.Arguments.PlayerEvents.PlayerReportedPlayerEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ReportedPlayer"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerReportedPlayerEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnTogglingNoclip(LabApi.Events.Arguments.PlayerEvents.PlayerTogglingNoclipEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.TogglingNoclip"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingNoclipEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnToggledNoclip(LabApi.Events.Arguments.PlayerEvents.PlayerToggledNoclipEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ToggledNoclip"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerToggledNoclipEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnRequestingRaPlayerList(LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerListEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.RequestingRaPlayerList"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerListEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnRequestedRaPlayerList(LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayerListEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.RequestedRaPlayerList"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayerListEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnRaPlayerListAddingPlayer(LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddingPlayerEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.RaPlayerListAddingPlayer"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddingPlayerEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnRaPlayerListAddedPlayer(LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddedPlayerEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.RaPlayerListAddedPlayer"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerRaPlayerListAddedPlayerEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnRequestedCustomRaInfo(LabApi.Events.Arguments.PlayerEvents.PlayerRequestedCustomRaInfoEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.RequestedCustomRaInfo"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedCustomRaInfoEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnRequestingRaPlayersInfo(LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayersInfoEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.RequestingRaPlayersInfo"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayersInfoEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnRequestedRaPlayersInfo(LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayersInfoEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.RequestedRaPlayersInfo"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayersInfoEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnRequestingRaPlayerInfo(LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerInfoEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.RequestingRaPlayerInfo"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerRequestingRaPlayerInfoEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnRequestedRaPlayerInfo(LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayerInfoEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.RequestedRaPlayerInfo"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerRequestedRaPlayerInfoEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnChangingBadgeVisibility(LabApi.Events.Arguments.PlayerEvents.PlayerChangingBadgeVisibilityEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ChangingBadgeVisibility"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangingBadgeVisibilityEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnChangedBadgeVisibility(LabApi.Events.Arguments.PlayerEvents.PlayerChangedBadgeVisibilityEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ChangedBadgeVisibility"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangedBadgeVisibilityEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnChangingNickname(LabApi.Events.Arguments.PlayerEvents.PlayerChangingNicknameEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ChangingNickname"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangingNicknameEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnChangedNickname(LabApi.Events.Arguments.PlayerEvents.PlayerChangedNicknameEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ChangedNickname"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangedNicknameEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnGroupChanging(LabApi.Events.Arguments.PlayerEvents.PlayerGroupChangingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.GroupChanging"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerGroupChangingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnGroupChanged(LabApi.Events.Arguments.PlayerEvents.PlayerGroupChangedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.GroupChanged"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerGroupChangedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnUpdatingEffect(LabApi.Events.Arguments.PlayerEvents.PlayerEffectUpdatingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.UpdatingEffect"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerEffectUpdatingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnUpdatedEffect(LabApi.Events.Arguments.PlayerEvents.PlayerEffectUpdatedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.UpdatedEffect"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerEffectUpdatedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnDying(LabApi.Events.Arguments.PlayerEvents.PlayerDyingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Dying"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDyingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnDeath(LabApi.Events.Arguments.PlayerEvents.PlayerDeathEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Death"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDeathEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnHurting(LabApi.Events.Arguments.PlayerEvents.PlayerHurtingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Hurting"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerHurtingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnHurt(LabApi.Events.Arguments.PlayerEvents.PlayerHurtEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Hurt"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerHurtEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnChangingRole(LabApi.Events.Arguments.PlayerEvents.PlayerChangingRoleEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ChangingRole"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangingRoleEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnChangedRole(LabApi.Events.Arguments.PlayerEvents.PlayerChangedRoleEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ChangedRole"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangedRoleEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnCuffing(LabApi.Events.Arguments.PlayerEvents.PlayerCuffingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Cuffing"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerCuffingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnCuffed(LabApi.Events.Arguments.PlayerEvents.PlayerCuffedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Cuffed"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerCuffedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnUncuffing(LabApi.Events.Arguments.PlayerEvents.PlayerUncuffingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Uncuffing"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUncuffingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnUncuffed(LabApi.Events.Arguments.PlayerEvents.PlayerUncuffedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Uncuffed"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUncuffedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnReceivingLoadout(LabApi.Events.Arguments.PlayerEvents.PlayerReceivingLoadoutEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ReceivingLoadout"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerReceivingLoadoutEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnReceivedLoadout(LabApi.Events.Arguments.PlayerEvents.PlayerReceivedLoadoutEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ReceivedLoadout"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerReceivedLoadoutEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnSpawning(LabApi.Events.Arguments.PlayerEvents.PlayerSpawningEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Spawning"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSpawningEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnSpawned(LabApi.Events.Arguments.PlayerEvents.PlayerSpawnedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Spawned"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSpawnedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnChangingItem(LabApi.Events.Arguments.PlayerEvents.PlayerChangingItemEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ChangingItem"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangingItemEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnChangedItem(LabApi.Events.Arguments.PlayerEvents.PlayerChangedItemEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ChangedItem"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangedItemEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnDroppingAmmo(LabApi.Events.Arguments.PlayerEvents.PlayerDroppingAmmoEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.DroppingAmmo"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDroppingAmmoEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnDroppedAmmo(LabApi.Events.Arguments.PlayerEvents.PlayerDroppedAmmoEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.DroppedAmmo"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDroppedAmmoEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnDroppingItem(LabApi.Events.Arguments.PlayerEvents.PlayerDroppingItemEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.DroppingItem"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDroppingItemEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnDroppedItem(LabApi.Events.Arguments.PlayerEvents.PlayerDroppedItemEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.DroppedItem"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDroppedItemEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnPickingUpAmmo(LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpAmmoEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.PickingUpAmmo"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpAmmoEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnPickedUpAmmo(LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpAmmoEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.PickedUpAmmo"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpAmmoEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnPickingUpArmor(LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpArmorEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.PickingUpArmor"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpArmorEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnPickedUpArmor(LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpArmorEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.PickedUpArmor"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpArmorEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnPickingUpItem(LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpItemEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.PickingUpItem"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpItemEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnPickedUpItem(LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpItemEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.PickedUpItem"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpItemEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnPickingUpScp330(LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpScp330EventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.PickingUpScp330"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerPickingUpScp330EventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnPickedUpScp330(LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpScp330EventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.PickedUpScp330"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerPickedUpScp330EventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnSearchedAmmo(LabApi.Events.Arguments.PlayerEvents.PlayerSearchedAmmoEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SearchedAmmo"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSearchedAmmoEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnSearchingArmor(LabApi.Events.Arguments.PlayerEvents.PlayerSearchingArmorEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SearchingArmor"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingArmorEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnSearchedArmor(LabApi.Events.Arguments.PlayerEvents.PlayerSearchedArmorEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SearchedArmor"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSearchedArmorEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnSearchingPickup(LabApi.Events.Arguments.PlayerEvents.PlayerSearchingPickupEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SearchingPickup"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingPickupEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnInteractedToy(LabApi.Events.Arguments.PlayerEvents.PlayerInteractedToyEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractedToy"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedToyEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnSearchedPickup(LabApi.Events.Arguments.PlayerEvents.PlayerSearchedPickupEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SearchedPickup"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSearchedPickupEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnSearchingAmmo(LabApi.Events.Arguments.PlayerEvents.PlayerSearchingAmmoEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SearchingAmmo"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingAmmoEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnThrowingItem(LabApi.Events.Arguments.PlayerEvents.PlayerThrowingItemEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ThrowingItem"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerThrowingItemEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnThrewItem(LabApi.Events.Arguments.PlayerEvents.PlayerThrewItemEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ThrewItem"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerThrewItemEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnThrowingProjectile(LabApi.Events.Arguments.PlayerEvents.PlayerThrowingProjectileEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ThrowingProjectile"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerThrowingProjectileEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnThrewProjectile(LabApi.Events.Arguments.PlayerEvents.PlayerThrewProjectileEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ThrewProjectile"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerThrewProjectileEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnInspectingKeycard(LabApi.Events.Arguments.PlayerEvents.PlayerInspectingKeycardEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InspectingKeycard"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInspectingKeycardEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnInspectedKeycard(LabApi.Events.Arguments.PlayerEvents.PlayerInspectedKeycardEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InspectedKeycard"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInspectedKeycardEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnSpinningRevolver(LabApi.Events.Arguments.PlayerEvents.PlayerSpinningRevolverEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SpinningRevolver"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSpinningRevolverEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnSpinnedRevolver(LabApi.Events.Arguments.PlayerEvents.PlayerSpinnedRevolverEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SpinnedRevolver"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSpinnedRevolverEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnToggledDisruptorFiringMode(LabApi.Events.Arguments.PlayerEvents.PlayerToggledDisruptorFiringModeEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ToggledDisruptorFiringMode"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerToggledDisruptorFiringModeEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnUsingItem(LabApi.Events.Arguments.PlayerEvents.PlayerUsingItemEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.UsingItem"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUsingItemEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnUsedItem(LabApi.Events.Arguments.PlayerEvents.PlayerUsedItemEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.UsedItem"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUsedItemEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnItemUsageEffectsApplying(LabApi.Events.Arguments.PlayerEvents.PlayerItemUsageEffectsApplyingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ItemUsageEffectsApplying"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerItemUsageEffectsApplyingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnUsingRadio(LabApi.Events.Arguments.PlayerEvents.PlayerUsingRadioEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.UsingRadio"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUsingRadioEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnUsedRadio(LabApi.Events.Arguments.PlayerEvents.PlayerUsedRadioEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.UsedRadio"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUsedRadioEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnAimedWeapon(LabApi.Events.Arguments.PlayerEvents.PlayerAimedWeaponEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.AimedWeapon"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerAimedWeaponEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnDryFiringWeapon(LabApi.Events.Arguments.PlayerEvents.PlayerDryFiringWeaponEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.DryFiringWeapon"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDryFiringWeaponEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnDryFiredWeapon(LabApi.Events.Arguments.PlayerEvents.PlayerDryFiredWeaponEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.DryFiredWeapon"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDryFiredWeaponEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnUnloadingWeapon(LabApi.Events.Arguments.PlayerEvents.PlayerUnloadingWeaponEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.UnloadingWeapon"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUnloadingWeaponEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnUnloadedWeapon(LabApi.Events.Arguments.PlayerEvents.PlayerUnloadedWeaponEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.UnloadedWeapon"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUnloadedWeaponEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnReloadingWeapon(LabApi.Events.Arguments.PlayerEvents.PlayerReloadingWeaponEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ReloadingWeapon"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerReloadingWeaponEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnReloadedWeapon(LabApi.Events.Arguments.PlayerEvents.PlayerReloadedWeaponEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ReloadedWeapon"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerReloadedWeaponEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnShootingWeapon(LabApi.Events.Arguments.PlayerEvents.PlayerShootingWeaponEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ShootingWeapon"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerShootingWeaponEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnShotWeapon(LabApi.Events.Arguments.PlayerEvents.PlayerShotWeaponEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ShotWeapon"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerShotWeaponEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnChangingAttachments(LabApi.Events.Arguments.PlayerEvents.PlayerChangingAttachmentsEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ChangingAttachments"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangingAttachmentsEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnChangedAttachments(LabApi.Events.Arguments.PlayerEvents.PlayerChangedAttachmentsEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ChangedAttachments"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangedAttachmentsEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnSendingAttachmentsPrefs(LabApi.Events.Arguments.PlayerEvents.PlayerSendingAttachmentsPrefsEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SendingAttachmentsPrefs"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSendingAttachmentsPrefsEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnSentAttachmentsPrefs(LabApi.Events.Arguments.PlayerEvents.PlayerSentAttachmentsPrefsEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SentAttachmentsPrefs"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSentAttachmentsPrefsEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnCancellingUsingItem(LabApi.Events.Arguments.PlayerEvents.PlayerCancellingUsingItemEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.CancellingUsingItem"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerCancellingUsingItemEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnCancelledUsingItem(LabApi.Events.Arguments.PlayerEvents.PlayerCancelledUsingItemEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.CancelledUsingItem"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerCancelledUsingItemEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnChangingRadioRange(LabApi.Events.Arguments.PlayerEvents.PlayerChangingRadioRangeEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ChangingRadioRange"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangingRadioRangeEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnChangedRadioRange(LabApi.Events.Arguments.PlayerEvents.PlayerChangedRadioRangeEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ChangedRadioRange"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangedRadioRangeEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnProcessingJailbirdMessage(LabApi.Events.Arguments.PlayerEvents.PlayerProcessingJailbirdMessageEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ProcessingJailbirdMessage"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerProcessingJailbirdMessageEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnProcessedJailbirdMessage(LabApi.Events.Arguments.PlayerEvents.PlayerProcessedJailbirdMessageEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ProcessedJailbirdMessage"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerProcessedJailbirdMessageEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnTogglingFlashlight(LabApi.Events.Arguments.PlayerEvents.PlayerTogglingFlashlightEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.TogglingFlashlight"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingFlashlightEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnToggledFlashlight(LabApi.Events.Arguments.PlayerEvents.PlayerToggledFlashlightEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ToggledFlashlight"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerToggledFlashlightEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnTogglingWeaponFlashlight(LabApi.Events.Arguments.PlayerEvents.PlayerTogglingWeaponFlashlightEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.TogglingWeaponFlashlight"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingWeaponFlashlightEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnToggledWeaponFlashlight(LabApi.Events.Arguments.PlayerEvents.PlayerToggledWeaponFlashlightEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ToggledWeaponFlashlight"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerToggledWeaponFlashlightEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnTogglingRadio(LabApi.Events.Arguments.PlayerEvents.PlayerTogglingRadioEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.TogglingRadio"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerTogglingRadioEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnToggledRadio(LabApi.Events.Arguments.PlayerEvents.PlayerToggledRadioEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ToggledRadio"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerToggledRadioEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnJumped(LabApi.Events.Arguments.PlayerEvents.PlayerJumpedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Jumped"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerJumpedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnMovementStateChanged(LabApi.Events.Arguments.PlayerEvents.PlayerMovementStateChangedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.MovementStateChanged"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerMovementStateChangedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnDamagingShootingTarget(LabApi.Events.Arguments.PlayerEvents.PlayerDamagingShootingTargetEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.DamagingShootingTarget"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDamagingShootingTargetEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnDamagedShootingTarget(LabApi.Events.Arguments.PlayerEvents.PlayerDamagedShootingTargetEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.DamagedShootingTarget"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDamagedShootingTargetEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnDamagingWindow(LabApi.Events.Arguments.PlayerEvents.PlayerDamagingWindowEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.DamagingWindow"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDamagingWindowEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnDamagedWindow(LabApi.Events.Arguments.PlayerEvents.PlayerDamagedWindowEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.DamagedWindow"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDamagedWindowEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnEnteringPocketDimension(LabApi.Events.Arguments.PlayerEvents.PlayerEnteringPocketDimensionEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.EnteringPocketDimension"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerEnteringPocketDimensionEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnEnteredPocketDimension(LabApi.Events.Arguments.PlayerEvents.PlayerEnteredPocketDimensionEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.EnteredPocketDimension"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerEnteredPocketDimensionEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnLeavingPocketDimension(LabApi.Events.Arguments.PlayerEvents.PlayerLeavingPocketDimensionEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.LeavingPocketDimension"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerLeavingPocketDimensionEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnLeftPocketDimension(LabApi.Events.Arguments.PlayerEvents.PlayerLeftPocketDimensionEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.LeftPocketDimension"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerLeftPocketDimensionEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnTriggeringTesla(LabApi.Events.Arguments.PlayerEvents.PlayerTriggeringTeslaEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.TriggeringTesla"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerTriggeringTeslaEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnTriggeredTesla(LabApi.Events.Arguments.PlayerEvents.PlayerTriggeredTeslaEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.TriggeredTesla"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerTriggeredTeslaEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnEscaping(LabApi.Events.Arguments.PlayerEvents.PlayerEscapingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Escaping"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerEscapingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnEscaped(LabApi.Events.Arguments.PlayerEvents.PlayerEscapedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.Escaped"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerEscapedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnFlippingCoin(LabApi.Events.Arguments.PlayerEvents.PlayerFlippingCoinEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.FlippingCoin"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerFlippingCoinEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnFlippedCoin(LabApi.Events.Arguments.PlayerEvents.PlayerFlippedCoinEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.FlippedCoin"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerFlippedCoinEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnSearchingToy(LabApi.Events.Arguments.PlayerEvents.PlayerSearchingToyEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SearchingToy"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSearchingToyEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnSearchedToy(LabApi.Events.Arguments.PlayerEvents.PlayerSearchedToyEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SearchedToy"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSearchedToyEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnSearchToyAborted(LabApi.Events.Arguments.PlayerEvents.PlayerSearchToyAbortedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SearchToyAborted"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSearchToyAbortedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnIdlingTesla(LabApi.Events.Arguments.PlayerEvents.PlayerIdlingTeslaEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.IdlingTesla"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerIdlingTeslaEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnIdledTesla(LabApi.Events.Arguments.PlayerEvents.PlayerIdledTeslaEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.IdledTesla"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerIdledTeslaEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnInteractingDoor(LabApi.Events.Arguments.PlayerEvents.PlayerInteractingDoorEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractingDoor"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingDoorEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnInteractedDoor(LabApi.Events.Arguments.PlayerEvents.PlayerInteractedDoorEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractedDoor"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedDoorEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnInteractingElevator(LabApi.Events.Arguments.PlayerEvents.PlayerInteractingElevatorEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractingElevator"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingElevatorEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnInteractedElevator(LabApi.Events.Arguments.PlayerEvents.PlayerInteractedElevatorEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractedElevator"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedElevatorEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnInteractingGenerator(LabApi.Events.Arguments.PlayerEvents.PlayerInteractingGeneratorEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractingGenerator"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingGeneratorEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnInteractedGenerator(LabApi.Events.Arguments.PlayerEvents.PlayerInteractedGeneratorEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractedGenerator"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedGeneratorEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnOpeningGenerator(LabApi.Events.Arguments.PlayerEvents.PlayerOpeningGeneratorEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.OpeningGenerator"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerOpeningGeneratorEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnOpenedGenerator(LabApi.Events.Arguments.PlayerEvents.PlayerOpenedGeneratorEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.OpenedGenerator"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerOpenedGeneratorEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnActivatingGenerator(LabApi.Events.Arguments.PlayerEvents.PlayerActivatingGeneratorEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ActivatingGenerator"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerActivatingGeneratorEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnActivatedGenerator(LabApi.Events.Arguments.PlayerEvents.PlayerActivatedGeneratorEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ActivatedGenerator"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerActivatedGeneratorEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnDeactivatingGenerator(LabApi.Events.Arguments.PlayerEvents.PlayerDeactivatingGeneratorEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.DeactivatingGenerator"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDeactivatingGeneratorEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnDeactivatedGenerator(LabApi.Events.Arguments.PlayerEvents.PlayerDeactivatedGeneratorEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.DeactivatedGenerator"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDeactivatedGeneratorEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnUnlockingGenerator(LabApi.Events.Arguments.PlayerEvents.PlayerUnlockingGeneratorEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.UnlockingGenerator"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUnlockingGeneratorEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnUnlockedGenerator(LabApi.Events.Arguments.PlayerEvents.PlayerUnlockedGeneratorEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.UnlockedGenerator"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUnlockedGeneratorEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnClosingGenerator(LabApi.Events.Arguments.PlayerEvents.PlayerClosingGeneratorEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ClosingGenerator"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerClosingGeneratorEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnClosedGenerator(LabApi.Events.Arguments.PlayerEvents.PlayerClosedGeneratorEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ClosedGenerator"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerClosedGeneratorEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnInteractingLocker(LabApi.Events.Arguments.PlayerEvents.PlayerInteractingLockerEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractingLocker"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingLockerEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnInteractedLocker(LabApi.Events.Arguments.PlayerEvents.PlayerInteractedLockerEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractedLocker"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedLockerEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnInteractingScp330(LabApi.Events.Arguments.PlayerEvents.PlayerInteractingScp330EventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractingScp330"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingScp330EventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnInteractedScp330(LabApi.Events.Arguments.PlayerEvents.PlayerInteractedScp330EventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractedScp330"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedScp330EventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnInteractingShootingTarget(LabApi.Events.Arguments.PlayerEvents.PlayerInteractingShootingTargetEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractingShootingTarget"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingShootingTargetEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnInteractedShootingTarget(LabApi.Events.Arguments.PlayerEvents.PlayerInteractedShootingTargetEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractedShootingTarget"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedShootingTargetEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnPlacingBlood(LabApi.Events.Arguments.PlayerEvents.PlayerPlacingBloodEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.PlacingBlood"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerPlacingBloodEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnPlacedBlood(LabApi.Events.Arguments.PlayerEvents.PlayerPlacedBloodEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.PlacedBlood"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerPlacedBloodEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnPlacingBulletHole(LabApi.Events.Arguments.PlayerEvents.PlayerPlacingBulletHoleEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.PlacingBulletHole"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerPlacingBulletHoleEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnPlacedBulletHole(LabApi.Events.Arguments.PlayerEvents.PlayerPlacedBulletHoleEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.PlacedBulletHole"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerPlacedBulletHoleEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnSpawningRagdoll(LabApi.Events.Arguments.PlayerEvents.PlayerSpawningRagdollEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SpawningRagdoll"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSpawningRagdollEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnSpawnedRagdoll(LabApi.Events.Arguments.PlayerEvents.PlayerSpawnedRagdollEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.SpawnedRagdoll"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerSpawnedRagdollEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnUnlockingWarheadButton(LabApi.Events.Arguments.PlayerEvents.PlayerUnlockingWarheadButtonEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.UnlockingWarheadButton"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUnlockingWarheadButtonEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnUnlockedWarheadButton(LabApi.Events.Arguments.PlayerEvents.PlayerUnlockedWarheadButtonEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.UnlockedWarheadButton"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerUnlockedWarheadButtonEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnReceivedAchievement(LabApi.Events.Arguments.PlayerEvents.PlayerReceivedAchievementEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ReceivedAchievement"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerReceivedAchievementEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnRoomChanged(LabApi.Events.Arguments.PlayerEvents.PlayerRoomChangedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.RoomChanged"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerRoomChangedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnZoneChanged(LabApi.Events.Arguments.PlayerEvents.PlayerZoneChangedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ZoneChanged"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerZoneChangedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnInteractingWarheadLever(LabApi.Events.Arguments.PlayerEvents.PlayerInteractingWarheadLeverEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractingWarheadLever"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractingWarheadLeverEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnInteractedWarheadLever(LabApi.Events.Arguments.PlayerEvents.PlayerInteractedWarheadLeverEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.InteractedWarheadLever"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerInteractedWarheadLeverEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnChangedSpectator(LabApi.Events.Arguments.PlayerEvents.PlayerChangedSpectatorEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ChangedSpectator"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerChangedSpectatorEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnEnteringHazard(LabApi.Events.Arguments.PlayerEvents.PlayerEnteringHazardEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.EnteringHazard"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerEnteringHazardEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnEnteredHazard(LabApi.Events.Arguments.PlayerEvents.PlayerEnteredHazardEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.EnteredHazard"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerEnteredHazardEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnStayingInHazard(LabApi.Events.Arguments.PlayerEvents.PlayersStayingInHazardEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.StayingInHazard"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayersStayingInHazardEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnLeavingHazard(LabApi.Events.Arguments.PlayerEvents.PlayerLeavingHazardEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.LeavingHazard"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerLeavingHazardEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnLeftHazard(LabApi.Events.Arguments.PlayerEvents.PlayerLeftHazardEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.LeftHazard"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerLeftHazardEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnValidatedVisibility(LabApi.Events.Arguments.PlayerEvents.PlayerValidatedVisibilityEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.ValidatedVisibility"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerValidatedVisibilityEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.PlayerEvents.OnDetectedByScp1344(LabApi.Events.Arguments.PlayerEvents.PlayerDetectedByScp1344EventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.PlayerEvents.DetectedByScp1344"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.PlayerEvents.PlayerDetectedByScp1344EventArgs"/> of the event.</param>
        </member>
        <member name="T:LabApi.Events.Handlers.Scp0492Events">
            <summary>
            Handles all events related to SCP-049-2.
            </summary>
            <inheritdoc />
        </member>
        <member name="E:LabApi.Events.Handlers.Scp0492Events.StartingConsumingCorpse">
            <summary>
            Gets called when SCP-049-2 is starting to consume a corpse.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp0492Events.StartedConsumingCorpse">
            <summary>
            Gets called when SCP-049-2 started to consume a corpse.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp0492Events.ConsumingCorpse">
            <summary>
            Gets called when SCP-049-2 is consuming a corpse.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp0492Events.ConsumedCorpse">
            <summary>
            Gets called when SCP-049-2 consumed a corpse.
            </summary>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp0492Events.OnStartingConsumingCorpse(LabApi.Events.Arguments.Scp0492Events.Scp0492StartingConsumingCorpseEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp0492Events.StartingConsumingCorpse"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp0492Events.Scp0492StartingConsumingCorpseEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp0492Events.OnStartedConsumingCorpse(LabApi.Events.Arguments.Scp0492Events.Scp0492StartedConsumingCorpseEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp0492Events.StartedConsumingCorpse"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp0492Events.Scp0492StartedConsumingCorpseEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp0492Events.OnConsumingCorpse(LabApi.Events.Arguments.Scp0492Events.Scp0492ConsumingCorpseEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp0492Events.ConsumingCorpse"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp0492Events.Scp0492ConsumingCorpseEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp0492Events.OnConsumedCorpse(LabApi.Events.Arguments.Scp0492Events.Scp0492ConsumedCorpseEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp0492Events.ConsumedCorpse"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp0492Events.Scp0492ConsumedCorpseEventArgs"/> of the event.</param>
        </member>
        <member name="T:LabApi.Events.Handlers.Scp049Events">
            <summary>
            Handles all events related to SCP-049.
            </summary>
            <inheritdoc />
        </member>
        <member name="E:LabApi.Events.Handlers.Scp049Events.StartingResurrection">
            <summary>
            Gets called when SCP-049 is starting a resurrection.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp049Events.ResurrectingBody">
            <summary>
            Gets called when SCP-049 has finished resurrecting and is about to resurrect a body.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp049Events.ResurrectedBody">
            <summary>
            Gets called when SCP-049 has resurrected a body.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp049Events.UsingDoctorsCall">
            <summary>
            Gets called when SCP-049 is using its doctors call ability.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp049Events.UsedDoctorsCall">
            <summary>
            Gets called when SCP-049 has used its doctors call ability.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp049Events.UsingSense">
            <summary>
            Gets called when SCP-049 is using its sense ability.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp049Events.UsedSense">
            <summary>
            Gets called when SCP-049 has used its sense ability.
            </summary>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp049Events.OnStartingResurrection(LabApi.Events.Arguments.Scp049Events.Scp049StartingResurrectionEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp049Events.StartingResurrection"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp049Events.Scp049StartingResurrectionEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp049Events.OnResurrectingBody(LabApi.Events.Arguments.Scp049Events.Scp049ResurrectingBodyEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp049Events.ResurrectingBody"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp049Events.Scp049ResurrectingBodyEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp049Events.OnResurrectedBody(LabApi.Events.Arguments.Scp049Events.Scp049ResurrectedBodyEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp049Events.ResurrectedBody"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp049Events.Scp049ResurrectedBodyEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp049Events.OnUsingDoctorsCall(LabApi.Events.Arguments.Scp049Events.Scp049UsingDoctorsCallEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp049Events.UsingDoctorsCall"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp049Events.Scp049UsingDoctorsCallEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp049Events.OnUsedDoctorsCall(LabApi.Events.Arguments.Scp049Events.Scp049UsedDoctorsCallEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp049Events.UsedDoctorsCall"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp049Events.Scp049UsedDoctorsCallEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp049Events.OnUsingSense(LabApi.Events.Arguments.Scp049Events.Scp049UsingSenseEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp049Events.UsingSense"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp049Events.Scp049UsingSenseEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp049Events.OnUsedSense(LabApi.Events.Arguments.Scp049Events.Scp049UsedSenseEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp049Events.UsedSense"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp049Events.Scp049UsedSenseEventArgs"/> of the event.</param>
        </member>
        <member name="T:LabApi.Events.Handlers.Scp079Events">
            <summary>
            Handles all events related to SCP-079.
            </summary>
            <inheritdoc />
        </member>
        <member name="E:LabApi.Events.Handlers.Scp079Events.BlackingOutRoom">
            <summary>
            Gets called when SCP-079 is blacking out a room.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp079Events.BlackedOutRoom">
            <summary>
            Gets called when SCP-079 has blacked out a room.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp079Events.BlackingOutZone">
            <summary>
            Gets called when SCP-079 is blacking out a zone.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp079Events.BlackedOutZone">
            <summary>
            Gets called when SCP-079 has blacked out a zone.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp079Events.ChangingCamera">
            <summary>
            Gets called when SCP-079 is changing a camera.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp079Events.ChangedCamera">
            <summary>
            Gets called when SCP-079 has changed a camera.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp079Events.CancellingRoomLockdown">
            <summary>
            Gets called when SCP-079 is cancelling a room lockdown.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp079Events.CancelledRoomLockdown">
            <summary>
            Gets called when SCP-079 has cancelled a room lockdown.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp079Events.GainingExperience">
            <summary>
            Gets called when SCP-079 is gaining experience.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp079Events.GainedExperience">
            <summary>
            Gets called when SCP-079 has gained experience.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp079Events.LevelingUp">
            <summary>
            Gets called when SCP-079 is leveling up.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp079Events.LeveledUp">
            <summary>
            Gets called when SCP-079 has leveled up.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp079Events.LockingDoor">
            <summary>
            Gets called when SCP-079 is locking a door.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp079Events.LockedDoor">
            <summary>
            Gets called when SCP-079 has locked a door.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp079Events.LockingDownRoom">
            <summary>
            Gets called when SCP-079 is locking down a room.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp079Events.LockedDownRoom">
            <summary>
            Gets called when SCP-079 has locked down a room.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp079Events.Recontaining">
            <summary>
            Gets called when SCP-079 is being recontained.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp079Events.Recontained">
            <summary>
            Gets called when SCP-079 has been recontained.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp079Events.UnlockingDoor">
            <summary>
            Gets called when SCP-079 is unlocking a door.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp079Events.UnlockedDoor">
            <summary>
            Gets called when SCP-079 has unlocked a door.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp079Events.UsingTesla">
            <summary>
            Gets called when SCP-079 is using a tesla.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp079Events.UsedTesla">
            <summary>
            Gets called when SCP-079 has used a tesla.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp079Events.Pinging">
            <summary>
            Gets called when SCP-079 is using ping ability.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp079Events.Pinged">
            <summary>
            Gets called when SCP-079 used ping ability.
            </summary>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp079Events.OnBlackingOutRoom(LabApi.Events.Arguments.Scp079Events.Scp079BlackingOutRoomEventsArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp079Events.BlackingOutRoom"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079BlackingOutRoomEventsArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp079Events.OnBlackedOutRoom(LabApi.Events.Arguments.Scp079Events.Scp079BlackedOutRoomEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp079Events.BlackedOutRoom"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079BlackedOutRoomEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp079Events.OnBlackingOutZone(LabApi.Events.Arguments.Scp079Events.Scp079BlackingOutZoneEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp079Events.BlackingOutZone"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079BlackingOutZoneEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp079Events.OnBlackedOutZone(LabApi.Events.Arguments.Scp079Events.Scp079BlackedOutZoneEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp079Events.BlackedOutZone"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079BlackedOutZoneEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp079Events.OnChangingCamera(LabApi.Events.Arguments.Scp079Events.Scp079ChangingCameraEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp079Events.ChangingCamera"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079ChangingCameraEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp079Events.OnChangedCamera(LabApi.Events.Arguments.Scp079Events.Scp079ChangedCameraEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp079Events.ChangedCamera"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079ChangedCameraEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp079Events.OnCancellingRoomLockdown(LabApi.Events.Arguments.Scp079Events.Scp079CancellingRoomLockdownEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp079Events.CancellingRoomLockdown"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079CancellingRoomLockdownEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp079Events.OnCancelledRoomLockdown(LabApi.Events.Arguments.Scp079Events.Scp079CancelledRoomLockdownEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp079Events.CancelledRoomLockdown"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079CancelledRoomLockdownEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp079Events.OnGainingExperience(LabApi.Events.Arguments.Scp079Events.Scp079GainingExperienceEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp079Events.GainingExperience"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079GainingExperienceEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp079Events.OnGainedExperience(LabApi.Events.Arguments.Scp079Events.Scp079GainedExperienceEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp079Events.GainedExperience"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079GainedExperienceEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp079Events.OnLevelingUp(LabApi.Events.Arguments.Scp079Events.Scp079LevelingUpEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp079Events.LevelingUp"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079LevelingUpEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp079Events.OnLeveledUp(LabApi.Events.Arguments.Scp079Events.Scp079LeveledUpEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp079Events.LeveledUp"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079LeveledUpEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp079Events.OnLockingDoor(LabApi.Events.Arguments.Scp079Events.Scp079LockingDoorEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp079Events.LockingDoor"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079LockingDoorEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp079Events.OnLockedDoor(LabApi.Events.Arguments.Scp079Events.Scp079LockedDoorEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp079Events.LockedDoor"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079LockedDoorEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp079Events.OnLockingDownRoom(LabApi.Events.Arguments.Scp079Events.Scp079LockingDownRoomEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp079Events.LockingDownRoom"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079LockingDownRoomEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp079Events.OnLockedDownRoom(LabApi.Events.Arguments.Scp079Events.Scp079LockedDownRoomEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp079Events.LockedDownRoom"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079LockedDownRoomEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp079Events.OnRecontaining(LabApi.Events.Arguments.Scp079Events.Scp079RecontainingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp079Events.Recontaining"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079RecontainingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp079Events.OnRecontained(LabApi.Events.Arguments.Scp079Events.Scp079RecontainedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp079Events.Recontained"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079RecontainedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp079Events.OnUnlockingDoor(LabApi.Events.Arguments.Scp079Events.Scp079UnlockingDoorEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp079Events.UnlockingDoor"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079UnlockingDoorEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp079Events.OnUnlockedDoor(LabApi.Events.Arguments.Scp079Events.Scp079UnlockedDoorEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp079Events.UnlockedDoor"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079UnlockedDoorEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp079Events.OnUsingTesla(LabApi.Events.Arguments.Scp079Events.Scp079UsingTeslaEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp079Events.UsingTesla"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079UsingTeslaEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp079Events.OnUsedTesla(LabApi.Events.Arguments.Scp079Events.Scp079UsedTeslaEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp079Events.UsedTesla"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079UsedTeslaEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp079Events.OnPinging(LabApi.Events.Arguments.Scp079Events.Scp079PingingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp079Events.Pinging"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079PingingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp079Events.OnPinged(LabApi.Events.Arguments.Scp079Events.Scp079PingedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp079Events.Pinged"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp079Events.Scp079PingedEventArgs"/> of the event.</param>
        </member>
        <member name="T:LabApi.Events.Handlers.Scp096Events">
            <summary>
            Handles all events related to SCP-096.
            </summary>
            <inheritdoc />
        </member>
        <member name="E:LabApi.Events.Handlers.Scp096Events.AddingTarget">
            <summary>
            Gets called when SCP-096 is getting a target added.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp096Events.AddedTarget">
            <summary>
            Gets called when SCP-096 has got a target added.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp096Events.ChangingState">
            <summary>
            Gets called when SCP-096 is changing a state.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp096Events.ChangedState">
            <summary>
            Gets called when SCP-096 has changed a state.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp096Events.Charging">
            <summary>
            Gets called when SCP-096 is charging.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp096Events.Charged">
            <summary>
            Gets called when SCP-096 has charged.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp096Events.Enraging">
            <summary>
            Gets called when SCP-096 is enraging.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp096Events.Enraged">
            <summary>
            Gets called when SCP-096 has enraged.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp096Events.PryingGate">
            <summary>
            Gets called when SCP-096 is prying a gate.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp096Events.PriedGate">
            <summary>
            Gets called when SCP-096 has pried a gate.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp096Events.StartCrying">
            <summary>
            Gets called when SCP-096 starts crying.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp096Events.StartedCrying">
            <summary>
            Gets called when SCP-096 has started crying.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp096Events.TryingNotToCry">
            <summary>
            Gets called when SCP-096 is trying not to cry.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp096Events.TriedNotToCry">
            <summary>
            Gets called when SCP-096 has tried not to cry.
            </summary>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp096Events.OnAddingTarget(LabApi.Events.Arguments.Scp096Events.Scp096AddingTargetEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp096Events.AddingTarget"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp096Events.Scp096AddingTargetEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp096Events.OnAddedTarget(LabApi.Events.Arguments.Scp096Events.Scp096AddedTargetEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp096Events.AddedTarget"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp096Events.Scp096AddedTargetEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp096Events.OnChangingState(LabApi.Events.Arguments.Scp096Events.Scp096ChangingStateEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp096Events.ChangingState"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp096Events.Scp096ChangingStateEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp096Events.OnChangedState(LabApi.Events.Arguments.Scp096Events.Scp096ChangedStateEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp096Events.ChangedState"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp096Events.Scp096ChangedStateEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp096Events.OnCharging(LabApi.Events.Arguments.Scp096Events.Scp096ChargingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp096Events.Charging"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp096Events.Scp096ChargingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp096Events.OnCharged(LabApi.Events.Arguments.Scp096Events.Scp096ChargedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp096Events.Charged"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp096Events.Scp096ChargedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp096Events.OnEnraging(LabApi.Events.Arguments.Scp096Events.Scp096EnragingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp096Events.Enraging"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp096Events.Scp096EnragingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp096Events.OnEnraged(LabApi.Events.Arguments.Scp096Events.Scp096EnragedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp096Events.Enraged"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp096Events.Scp096EnragedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp096Events.OnPryingGate(LabApi.Events.Arguments.Scp096Events.Scp096PryingGateEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp096Events.PryingGate"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp096Events.Scp096PryingGateEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp096Events.OnPriedGate(LabApi.Events.Arguments.Scp096Events.Scp096PriedGateEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp096Events.PriedGate"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp096Events.Scp096PriedGateEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp096Events.OnStartCrying(LabApi.Events.Arguments.Scp096Events.Scp096StartCryingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp096Events.StartCrying"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp096Events.Scp096StartCryingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp096Events.OnStartedCrying(LabApi.Events.Arguments.Scp096Events.Scp096StartedCryingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp096Events.StartedCrying"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp096Events.Scp096StartedCryingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp096Events.OnTryingNotToCry(LabApi.Events.Arguments.Scp096Events.Scp096TryingNotToCryEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp096Events.TryingNotToCry"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp096Events.Scp096TryingNotToCryEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp096Events.OnTriedNotToCry(LabApi.Events.Arguments.Scp096Events.Scp096TriedNotToCryEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp096Events.TriedNotToCry"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp096Events.Scp096TriedNotToCryEventArgs"/> of the event.</param>
        </member>
        <member name="T:LabApi.Events.Handlers.Scp106Events">
            <summary>
            Handles all events related to SCP-106.
            </summary>
            <inheritdoc />
        </member>
        <member name="E:LabApi.Events.Handlers.Scp106Events.ChangingStalkMode">
            <summary>
            Gets called when SCP-106 changes its stalk mode.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp106Events.ChangedStalkMode">
            <summary>
            Gets called when SCP-106 has changed its stalk mode.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp106Events.ChangingVigor">
            <summary>
            Gets called when SCP-106 is changing its vigor.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp106Events.ChangedVigor">
            <summary>
            Gets called when SCP-106 has changed its vigor.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp106Events.UsedHunterAtlas">
            <summary>
            Gets called when SCP-106 uses the Hunter Atlas.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp106Events.UsingHunterAtlas">
            <summary>
            Gets called when SCP-106 is using the Hunter Atlas.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp106Events.ChangingSubmersionStatus">
            <summary>
            Gets called when SCP-106 is changing its submersion status.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp106Events.ChangedSubmersionStatus">
            <summary>
            Gets called when SCP-106 has changed its submersion status.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp106Events.TeleportingPlayer">
            <summary>
            Gets called when SCP-106 is teleporting a player.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp106Events.TeleportedPlayer">
            <summary>
            Gets called when SCP-106 has teleported a player.
            </summary>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp106Events.OnChangingStalkMode(LabApi.Events.Arguments.Scp106Events.Scp106ChangingStalkModeEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp106Events.ChangingStalkMode"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp106Events.Scp106ChangingStalkModeEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp106Events.OnChangedStalkMode(LabApi.Events.Arguments.Scp106Events.Scp106ChangedStalkModeEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp106Events.ChangedStalkMode"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp106Events.Scp106ChangedStalkModeEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp106Events.OnChangingVigor(LabApi.Events.Arguments.Scp106Events.Scp106ChangingVigorEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp106Events.ChangingVigor"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp106Events.Scp106ChangingVigorEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp106Events.OnChangedVigor(LabApi.Events.Arguments.Scp106Events.Scp106ChangedVigorEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp106Events.ChangedVigor"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp106Events.Scp106ChangedVigorEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp106Events.OnUsedHunterAtlas(LabApi.Events.Arguments.Scp106Events.Scp106UsedHunterAtlasEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp106Events.UsedHunterAtlas"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp106Events.Scp106UsedHunterAtlasEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp106Events.OnUsingHunterAtlas(LabApi.Events.Arguments.Scp106Events.Scp106UsingHunterAtlasEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp106Events.UsingHunterAtlas"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp106Events.Scp106UsingHunterAtlasEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp106Events.OnChangingSubmersionStatus(LabApi.Events.Arguments.Scp106Events.Scp106ChangingSubmersionStatusEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp106Events.ChangingSubmersionStatus"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp106Events.Scp106ChangingSubmersionStatusEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp106Events.OnChangedSubmersionStatus(LabApi.Events.Arguments.Scp106Events.Scp106ChangedSubmersionStatusEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp106Events.ChangedSubmersionStatus"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp106Events.Scp106ChangedSubmersionStatusEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp106Events.OnTeleportingPlayer(LabApi.Events.Arguments.Scp106Events.Scp106TeleportingPlayerEvent)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp106Events.TeleportingPlayer"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp106Events.Scp106TeleportingPlayerEvent"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp106Events.OnTeleportedPlayer(LabApi.Events.Arguments.Scp106Events.Scp106TeleportedPlayerEvent)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp106Events.TeleportedPlayer"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp106Events.Scp106TeleportedPlayerEvent"/> of the event.</param>
        </member>
        <member name="T:LabApi.Events.Handlers.Scp127Events">
            <summary>
            Handles all the events related to the SCP-127.
            </summary>
            <inheritdoc />
        </member>
        <member name="E:LabApi.Events.Handlers.Scp127Events.GainingExperience">
            <summary>
            Gets called when the SCP-127 is gaining experience.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp127Events.GainExperience">
            <summary>
            Gets called when the SCP-127 is gained experience.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp127Events.LevellingUp">
            <summary>
            Gets called when the SCP-127 is levelling up.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp127Events.LevelUp">
            <summary>
            Gets called when the SCP-127 level up.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp127Events.Talking">
            <summary>
            Gets called when SCP-127 is about to play a voiceline.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp127Events.Talked">
            <summary>
            Gets called when SCP-127 played a voiceline.
            </summary>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp127Events.OnGainingExperience(LabApi.Events.Arguments.Scp127Events.Scp127GainingExperienceEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp127Events.GainingExperience"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp127Events.Scp127GainingExperienceEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp127Events.OnGainExperience(LabApi.Events.Arguments.Scp127Events.Scp127GainExperienceEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp127Events.GainExperience"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp127Events.Scp127GainExperienceEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp127Events.OnLevellingUp(LabApi.Events.Arguments.Scp127Events.Scp127LevellingUpEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp127Events.LevellingUp"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp127Events.Scp127LevellingUpEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp127Events.OnLevelUp(LabApi.Events.Arguments.Scp127Events.Scp127LevelUpEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp127Events.LevelUp"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp127Events.Scp127LevelUpEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp127Events.OnTalking(LabApi.Events.Arguments.Scp127Events.Scp127TalkingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp127Events.Talking"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp127Events.Scp127TalkingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp127Events.OnTalked(LabApi.Events.Arguments.Scp127Events.Scp127TalkedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp127Events.Talked"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp127Events.Scp127TalkedEventArgs"/> of the event.</param>
        </member>
        <member name="T:LabApi.Events.Handlers.Scp173Events">
            <summary>
            Handles all the events related to SCP-173.
            </summary>
            <inheritdoc />
        </member>
        <member name="E:LabApi.Events.Handlers.Scp173Events.BreakneckSpeedChanging">
            <summary>
            Gets called when the breakneck speed of SCP-173 is changing.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp173Events.BreakneckSpeedChanged">
            <summary>
            Gets called when the breakneck speed of SCP-173 has changed.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp173Events.AddingObserver">
            <summary>
            Gets called when a new observer is being added to SCP-173.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp173Events.AddedObserver">
            <summary>
            Gets called when a new observer has been added to SCP-173.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp173Events.RemovingObserver">
            <summary>
            Gets called when an observer is being removed from SCP-173.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp173Events.RemovedObserver">
            <summary>
            Gets called when an observer has been removed from SCP-173.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp173Events.CreatingTantrum">
            <summary>
            Gets called when SCP-173 is creating a tantrum.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp173Events.CreatedTantrum">
            <summary>
            Gets called when SCP-173 has created a tantrum.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp173Events.PlayingSound">
            <summary>
            Gets called when SCP-173 is playing a sound.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp173Events.PlayedSound">
            <summary>
            Gets called when SCP-173 has played a sound.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp173Events.Teleporting">
            <summary>
            Gets called when SCP-173 is teleporting.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp173Events.Teleported">
            <summary>
            Gets called when SCP-173 has teleported.
            </summary>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp173Events.OnBreakneckSpeedChanging(LabApi.Events.Arguments.Scp173Events.Scp173BreakneckSpeedChangingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp173Events.BreakneckSpeedChanging"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp173Events.Scp173BreakneckSpeedChangingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp173Events.OnBreakneckSpeedChanged(LabApi.Events.Arguments.Scp173Events.Scp173BreakneckSpeedChangedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp173Events.BreakneckSpeedChanged"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp173Events.Scp173BreakneckSpeedChangedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp173Events.OnAddingObserver(LabApi.Events.Arguments.Scp173Events.Scp173AddingObserverEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp173Events.AddingObserver"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp173Events.Scp173AddingObserverEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp173Events.OnAddedObserver(LabApi.Events.Arguments.Scp173Events.Scp173AddedObserverEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp173Events.AddedObserver"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp173Events.Scp173AddedObserverEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp173Events.OnRemovingObserver(LabApi.Events.Arguments.Scp173Events.Scp173RemovingObserverEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp173Events.RemovingObserver"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp173Events.Scp173RemovingObserverEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp173Events.OnRemovedObserver(LabApi.Events.Arguments.Scp173Events.Scp173RemovedObserverEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp173Events.RemovedObserver"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp173Events.Scp173RemovedObserverEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp173Events.OnCreatingTantrum(LabApi.Events.Arguments.Scp173Events.Scp173CreatingTantrumEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp173Events.CreatingTantrum"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp173Events.Scp173CreatingTantrumEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp173Events.OnCreatedTantrum(LabApi.Events.Arguments.Scp173Events.Scp173CreatedTantrumEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp173Events.CreatedTantrum"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp173Events.Scp173CreatedTantrumEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp173Events.OnPlayingSound(LabApi.Events.Arguments.Scp173Events.Scp173PlayingSoundEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp173Events.PlayingSound"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp173Events.Scp173PlayingSoundEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp173Events.OnPlayedSound(LabApi.Events.Arguments.Scp173Events.Scp173PlayedSoundEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp173Events.PlayedSound"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp173Events.Scp173PlayedSoundEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp173Events.OnTeleporting(LabApi.Events.Arguments.Scp173Events.Scp173TeleportingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp173Events.Teleporting"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp173Events.Scp173TeleportingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp173Events.OnTeleported(LabApi.Events.Arguments.Scp173Events.Scp173TeleportedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp173Events.Teleported"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp173Events.Scp173TeleportedEventArgs"/> of the event.</param>
        </member>
        <member name="T:LabApi.Events.Handlers.Scp3114Events">
            <summary>
            Handles all events related to SCP-3114.
            </summary>
            <inheritdoc />
        </member>
        <member name="E:LabApi.Events.Handlers.Scp3114Events.Disguising">
            <summary>
            Gets called when SCP-3114 is disguising itself.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp3114Events.Disguised">
            <summary>
            Gets called when SCP-3114 has disguised itself.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp3114Events.Revealing">
            <summary>
            Gets called when SCP-3114 is revealing itself.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp3114Events.Revealed">
            <summary>
            Gets called when SCP-3114 has revealed itself.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp3114Events.StrangleStarting">
            <summary>
            Gets called when SCP-3114 is starting to strangle a player.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp3114Events.StrangleStarted">
            <summary>
            Gets called when SCP-3114 has started to strangle a player.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp3114Events.StrangleAborting">
            <summary>
            Gets called when SCP-3114 is aborting their strangle on the player.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp3114Events.Dance">
            <summary>
            Gets called when SCP-3114 started dancing.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp3114Events.StartDancing">
            <summary>
            Gets called when SCP-3114 is about to dance.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp3114Events.StrangleAborted">
            <summary>
            Gets called when SCP-3114 has aborted their strangle on the player.
            </summary>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp3114Events.OnDisguising(LabApi.Events.Arguments.Scp3114Events.Scp3114DisguisingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp3114Events.Disguising"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp3114Events.Scp3114DisguisingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp3114Events.OnDisguised(LabApi.Events.Arguments.Scp3114Events.Scp3114DisguisedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp3114Events.Disguised"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp3114Events.Scp3114DisguisedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp3114Events.OnRevealing(LabApi.Events.Arguments.Scp3114Events.Scp3114RevealingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp3114Events.Revealing"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp3114Events.Scp3114RevealingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp3114Events.OnRevealed(LabApi.Events.Arguments.Scp3114Events.Scp3114RevealedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp3114Events.Revealed"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp3114Events.Scp3114RevealedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp3114Events.OnStrangleStarting(LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleStartingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp3114Events.StrangleStarting"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleStartingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp3114Events.OnStrangleStarted(LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleStartedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp3114Events.StrangleStarted"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleStartedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp3114Events.OnStrangleAborting(LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleAbortingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp3114Events.StrangleAborting"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleAbortingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp3114Events.OnDance(LabApi.Events.Arguments.Scp3114Events.Scp3114StartedDanceEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp3114Events.Dance"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp3114Events.Scp3114StartedDanceEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp3114Events.OnStartDancing(LabApi.Events.Arguments.Scp3114Events.Scp3114StartingDanceEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp3114Events.StartDancing"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp3114Events.Scp3114StartingDanceEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp3114Events.OnStrangleAborted(LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleAbortedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp3114Events.StrangleAborted"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp3114Events.Scp3114StrangleAbortedEventArgs"/> of the event.</param>
        </member>
        <member name="T:LabApi.Events.Handlers.Scp914Events">
            <summary>
            Handles all events related to SCP-914.
            </summary>
            <inheritdoc />
        </member>
        <member name="E:LabApi.Events.Handlers.Scp914Events.Activating">
            <summary>
            Gets called when SCP-914 is being activated.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp914Events.Activated">
            <summary>
            Gets called when SCP-914 is activated.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp914Events.KnobChanging">
            <summary>
            Gets called when SCP-914's knob is changing.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp914Events.KnobChanged">
            <summary>
            Gets called when SCP-914's knob has changed.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp914Events.ProcessingPickup">
            <summary>
            Gets called when SCP-914 is processing a pickup.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp914Events.ProcessedPickup">
            <summary>
            Gets called when SCP-914 has processed a pickup.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp914Events.ProcessingPlayer">
            <summary>
            Gets called when SCP-914 is processing a player.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp914Events.ProcessedPlayer">
            <summary>
            Gets called when SCP-914 has processed a player.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp914Events.ProcessingInventoryItem">
            <summary>
            Gets called when SCP-914 is processing an inventory item.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp914Events.ProcessedInventoryItem">
            <summary>
            Gets called when SCP-914 has processed an inventory item.
            </summary>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp914Events.OnActivating(LabApi.Events.Arguments.Scp914Events.Scp914ActivatingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp914Events.Activating"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp914Events.Scp914ActivatingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp914Events.OnActivated(LabApi.Events.Arguments.Scp914Events.Scp914ActivatedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp914Events.Activated"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp914Events.Scp914ActivatedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp914Events.OnKnobChanging(LabApi.Events.Arguments.Scp914Events.Scp914KnobChangingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp914Events.KnobChanging"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp914Events.Scp914KnobChangingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp914Events.OnKnobChanged(LabApi.Events.Arguments.Scp914Events.Scp914KnobChangedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp914Events.KnobChanged"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp914Events.Scp914KnobChangedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp914Events.OnProcessingPickup(LabApi.Events.Arguments.Scp914Events.Scp914ProcessingPickupEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp914Events.ProcessingPickup"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp914Events.Scp914ProcessingPickupEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp914Events.OnProcessedPickup(LabApi.Events.Arguments.Scp914Events.Scp914ProcessedPickupEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp914Events.ProcessedPickup"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp914Events.Scp914ProcessedPickupEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp914Events.OnProcessingPlayer(LabApi.Events.Arguments.Scp914Events.Scp914ProcessingPlayerEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp914Events.ProcessingPlayer"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp914Events.Scp914ProcessingPlayerEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp914Events.OnProcessedPlayer(LabApi.Events.Arguments.Scp914Events.Scp914ProcessedPlayerEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp914Events.ProcessedPlayer"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp914Events.Scp914ProcessedPlayerEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp914Events.OnProcessingInventoryItem(LabApi.Events.Arguments.Scp914Events.Scp914ProcessingInventoryItemEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp914Events.ProcessingInventoryItem"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp914Events.Scp914ProcessingInventoryItemEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp914Events.OnProcessedInventoryItem(LabApi.Events.Arguments.Scp914Events.Scp914ProcessedInventoryItemEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp914Events.ProcessedInventoryItem"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp914Events.Scp914ProcessedInventoryItemEventArgs"/> of the event.</param>
        </member>
        <member name="T:LabApi.Events.Handlers.Scp939Events">
            <summary>
            Handles all the events related to SCP-939.
            </summary>
            <inheritdoc />
        </member>
        <member name="E:LabApi.Events.Handlers.Scp939Events.Attacking">
            <summary>
            Gets called when SCP-939 is attacking.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp939Events.Attacked">
            <summary>
            Gets called when SCP-939 has attacked.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp939Events.CreatingAmnesticCloud">
            <summary>
            Gets called when SCP-939 is creating an amnestic cloud.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp939Events.CreatedAmnesticCloud">
            <summary>
            Gets called when SCP-939 has created an amnestic cloud.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp939Events.Lunging">
            <summary>
            Gets called when SCP-939 is lunging.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.Scp939Events.Lunged">
            <summary>
            Gets called when SCP-939 has lunged.
            </summary>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp939Events.OnAttacking(LabApi.Events.Arguments.Scp939Events.Scp939AttackingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp939Events.Attacking"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp939Events.Scp939AttackingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp939Events.OnAttacked(LabApi.Events.Arguments.Scp939Events.Scp939AttackedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp939Events.Attacked"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp939Events.Scp939AttackedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp939Events.OnCreatingAmnesticCloud(LabApi.Events.Arguments.Scp939Events.Scp939CreatingAmnesticCloudEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp939Events.CreatingAmnesticCloud"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp939Events.Scp939CreatingAmnesticCloudEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp939Events.OnCreatedAmnesticCloud(LabApi.Events.Arguments.Scp939Events.Scp939CreatedAmnesticCloudEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp939Events.CreatedAmnesticCloud"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp939Events.Scp939CreatedAmnesticCloudEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp939Events.OnLunging(LabApi.Events.Arguments.Scp939Events.Scp939LungingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp939Events.Lunging"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp939Events.Scp939LungingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.Scp939Events.OnLunged(LabApi.Events.Arguments.Scp939Events.Scp939LungedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.Scp939Events.Lunged"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.Scp939Events.Scp939LungedEventArgs"/> of the event.</param>
        </member>
        <member name="T:LabApi.Events.Handlers.ServerEvents">
            <summary>
            Handles all the events related to the server.
            </summary>
            <inheritdoc />
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.WaitingForPlayers">
            <summary>
            Gets called when the server is loaded and waiting for players.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.RoundRestarted">
            <summary>
            Gets called when the round is restarted.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.RoundEndingConditionsCheck">
            <summary>
            Gets called when round end conditions are checked.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.RoundEnding">
            <summary>
            Gets called when the round is ending.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.RoundEnded">
            <summary>
            Gets called when the round has ended.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.RoundStarting">
            <summary>
            Gets called when the round is starting.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.RoundStarted">
            <summary>
            Gets called when the round has started.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.BanIssuing">
            <summary>
            Gets called when the server is issuing a ban.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.BanIssued">
            <summary>
            Gets called when the server has issued a ban.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.BanRevoking">
            <summary>
            Gets called when the server is revoking a ban.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.BanRevoked">
            <summary>
            Gets called when the server has revoked a ban.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.BanUpdating">
            <summary>
            Gets called when the server is updating a ban.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.BanUpdated">
            <summary>
            Gets called when the server has updated a ban.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.CommandExecuting">
            <summary>
            Gets called when the server is executing a command.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.CommandExecuted">
            <summary>
            Gets called when the server has executed a command.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.CassieQueuingScpTermination">
            <summary>
            Gets called when the server is queuing a C.A.S.S.I.E SCP termination announcement.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.CassieQueuedScpTermination">
            <summary>
            Gets called when the server has queued a C.A.S.S.I.E SCP termination announcement.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.WaveRespawning">
            <summary>
            Gets called when the server is respawning a wave.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.WaveRespawned">
            <summary>
            Gets called when the server has respawned a wave.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.WaveTeamSelecting">
            <summary>
            Gets called when the server is selecting a team for the wave.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.WaveTeamSelected">
            <summary>
            Gets called when the server has selected a team for the wave.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.LczDecontaminationAnnounced">
            <summary>
            Gets called when the server announced LCZ decontamination.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.LczDecontaminationStarting">
            <summary>
            Gets called when the server starts LCZ decontamination.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.LczDecontaminationStarted">
            <summary>
            Gets called when the server started LCZ decontamination.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.MapGenerating">
            <summary>
            Gets called when the server starts generating map.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.MapGenerated">
            <summary>
            Gets called when the server generated map.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.PickupCreated">
            <summary>
            Gets called when the server has created a new pickup.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.PickupDestroyed">
            <summary>
            Gets called when the server has destroyed a pickup.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.SendingAdminChat">
            <summary>
            Gets called when the server is sending an Admin Chat message.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.SentAdminChat">
            <summary>
            Gets called when the server sent an Admin Chat message.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.ItemSpawning">
            <summary>
            Gets called when the server is spawning item on map.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.ItemSpawned">
            <summary>
            Gets called when the server spawned item on map.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.CassieAnnouncing">
            <summary>
            Gets called when the server starts playing C.A.S.S.I.E sentence.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.CassieAnnounced">
            <summary>
            Gets called when the server played C.A.S.S.I.E sentence.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.ProjectileExploding">
            <summary>
            Gets called when the server will explode projectile.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.ProjectileExploded">
            <summary>
            Gets called when the server exploded projectile.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.ExplosionSpawning">
            <summary>
            Gets called when harmable explosion is spawning.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.ExplosionSpawned">
            <summary>
            Gets called when explosion has spawned.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.GeneratorActivating">
            <summary>
            Gets called when the server will activate generator.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.GeneratorActivated">
            <summary>
            Gets called when the server activated generator.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.ServerEvents.ElevatorSequenceChanged">
            <summary>
            Gets called when elevator's sequence has changed.
            </summary>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnWaitingForPlayers">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.WaitingForPlayers"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnRoundRestarted">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.RoundRestarted"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnRoundEndingConditionsCheck(LabApi.Events.Arguments.ServerEvents.RoundEndingConditionsCheckEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.RoundEndingConditionsCheck"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.RoundEndingConditionsCheckEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnRoundEnding(LabApi.Events.Arguments.ServerEvents.RoundEndingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.RoundEnding"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.RoundEndingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnRoundEnded(LabApi.Events.Arguments.ServerEvents.RoundEndedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.RoundEnded"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.RoundEndedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnRoundStarting(LabApi.Events.Arguments.ServerEvents.RoundStartingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.RoundStarting"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.RoundStartingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnRoundStarted">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.RoundStarted"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnBanIssuing(LabApi.Events.Arguments.ServerEvents.BanIssuingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.BanIssuing"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.BanIssuingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnBanIssued(LabApi.Events.Arguments.ServerEvents.BanIssuedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.BanIssued"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.BanIssuedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnBanRevoking(LabApi.Events.Arguments.ServerEvents.BanRevokingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.BanRevoking"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.BanRevokingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnBanRevoked(LabApi.Events.Arguments.ServerEvents.BanRevokedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.BanRevoked"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.BanRevokedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnBanUpdating(LabApi.Events.Arguments.ServerEvents.BanUpdatingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.BanUpdating"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.BanUpdatingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnBanUpdated(LabApi.Events.Arguments.ServerEvents.BanUpdatedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.BanUpdated"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.BanUpdatedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnCommandExecuting(LabApi.Events.Arguments.ServerEvents.CommandExecutingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.CommandExecuting"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.CommandExecutingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnCommandExecuted(LabApi.Events.Arguments.ServerEvents.CommandExecutedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.CommandExecuted"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.CommandExecutedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnCassieQueuingScpTermination(LabApi.Events.Arguments.ServerEvents.CassieQueuingScpTerminationEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.CassieQueuingScpTermination"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.CassieQueuingScpTerminationEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnCassieQueuedScpTermination(LabApi.Events.Arguments.ServerEvents.CassieQueuedScpTerminationEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.CassieQueuedScpTermination"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.CassieQueuedScpTerminationEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnWaveRespawning(LabApi.Events.Arguments.ServerEvents.WaveRespawningEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.WaveRespawning"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.WaveRespawningEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnWaveRespawned(LabApi.Events.Arguments.ServerEvents.WaveRespawnedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.WaveRespawned"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.WaveRespawnedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnWaveTeamSelecting(LabApi.Events.Arguments.ServerEvents.WaveTeamSelectingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.WaveTeamSelecting"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.WaveTeamSelectingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnWaveTeamSelected(LabApi.Events.Arguments.ServerEvents.WaveTeamSelectedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.WaveTeamSelected"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.WaveTeamSelectedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnLczDecontaminationAnnounced(LabApi.Events.Arguments.ServerEvents.LczDecontaminationAnnouncedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.LczDecontaminationAnnounced"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.LczDecontaminationAnnouncedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnLczDecontaminationStarting(LabApi.Events.Arguments.ServerEvents.LczDecontaminationStartingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.LczDecontaminationStarting"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.LczDecontaminationStartingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnLczDecontaminationStarted">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.LczDecontaminationStarted"/> event.
            </summary>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnMapGenerating(LabApi.Events.Arguments.ServerEvents.MapGeneratingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.MapGenerating"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.MapGeneratingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnMapGenerated(LabApi.Events.Arguments.ServerEvents.MapGeneratedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.MapGenerated"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.MapGeneratedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnPickupCreated(LabApi.Events.Arguments.ServerEvents.PickupCreatedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.PickupCreated"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.PickupCreatedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnPickupDestroyed(LabApi.Events.Arguments.ServerEvents.PickupDestroyedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.PickupDestroyed"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.PickupDestroyedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnSendingAdminChat(LabApi.Events.Arguments.ServerEvents.SendingAdminChatEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.SendingAdminChat"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.SendingAdminChatEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnSentAdminChat(LabApi.Events.Arguments.ServerEvents.SentAdminChatEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.SentAdminChat"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.SentAdminChatEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnItemSpawning(LabApi.Events.Arguments.ServerEvents.ItemSpawningEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.ItemSpawning"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.ItemSpawningEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnItemSpawned(LabApi.Events.Arguments.ServerEvents.ItemSpawnedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.ItemSpawned"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.ItemSpawnedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnCassieAnnouncing(LabApi.Events.Arguments.ServerEvents.CassieAnnouncingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.CassieAnnouncing"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.CassieAnnouncingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnCassieAnnounced(LabApi.Events.Arguments.ServerEvents.CassieAnnouncedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.CassieAnnounced"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.CassieAnnouncedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnProjectileExploding(LabApi.Events.Arguments.ServerEvents.ProjectileExplodingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.ProjectileExploding"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.ProjectileExplodingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnProjectileExploded(LabApi.Events.Arguments.ServerEvents.ProjectileExplodedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.ProjectileExploded"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.ProjectileExplodedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnExplosionSpawning(LabApi.Events.Arguments.ServerEvents.ExplosionSpawningEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.ExplosionSpawning"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.ExplosionSpawningEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnExplosionSpawned(LabApi.Events.Arguments.ServerEvents.ExplosionSpawnedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.ExplosionSpawned"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.ExplosionSpawnedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnGeneratorActivating(LabApi.Events.Arguments.ServerEvents.GeneratorActivatingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.GeneratorActivating"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.GeneratorActivatingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnGeneratorActivated(LabApi.Events.Arguments.ServerEvents.GeneratorActivatedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.GeneratorActivated"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.GeneratorActivatedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.ServerEvents.OnElevatorSequenceChanged(LabApi.Events.Arguments.ServerEvents.ElevatorSequenceChangedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.ServerEvents.ElevatorSequenceChanged"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.ServerEvents.ElevatorSequenceChangedEventArgs"/> of the event.</param>
        </member>
        <member name="T:LabApi.Events.Handlers.WarheadEvents">
            <summary>
            Handles all the events related to the warhead.
            </summary>
            <inheritdoc />
        </member>
        <member name="E:LabApi.Events.Handlers.WarheadEvents.Starting">
            <summary>
            Gets called when the warhead countdown is starting.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.WarheadEvents.Started">
            <summary>
            Gets called when the warhead countdown has started.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.WarheadEvents.Stopping">
            <summary>
            Gets called when the warhead countdown is stopping.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.WarheadEvents.Stopped">
            <summary>
            Gets called when the warhead countdown has stopped.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.WarheadEvents.Detonating">
            <summary>
            Gets called when the warhead is being detonated.
            </summary>
        </member>
        <member name="E:LabApi.Events.Handlers.WarheadEvents.Detonated">
            <summary>
            Gets called when the warhead has been detonated.
            </summary>
        </member>
        <member name="M:LabApi.Events.Handlers.WarheadEvents.OnStarting(LabApi.Events.Arguments.WarheadEvents.WarheadStartingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.WarheadEvents.Starting"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.WarheadEvents.WarheadStartingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.WarheadEvents.OnStarted(LabApi.Events.Arguments.WarheadEvents.WarheadStartedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.WarheadEvents.Started"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.WarheadEvents.WarheadStartedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.WarheadEvents.OnStopping(LabApi.Events.Arguments.WarheadEvents.WarheadStoppingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.WarheadEvents.Stopping"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.WarheadEvents.WarheadStoppingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.WarheadEvents.OnStopped(LabApi.Events.Arguments.WarheadEvents.WarheadStoppedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.WarheadEvents.Stopped"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.WarheadEvents.WarheadStoppedEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.WarheadEvents.OnDetonating(LabApi.Events.Arguments.WarheadEvents.WarheadDetonatingEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.WarheadEvents.Detonating"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.WarheadEvents.WarheadDetonatingEventArgs"/> of the event.</param>
        </member>
        <member name="M:LabApi.Events.Handlers.WarheadEvents.OnDetonated(LabApi.Events.Arguments.WarheadEvents.WarheadDetonatedEventArgs)">
            <summary>
            Invokes the <see cref="E:LabApi.Events.Handlers.WarheadEvents.Detonated"/> event.
            </summary>
            <param name="ev">The <see cref="T:LabApi.Events.Arguments.WarheadEvents.WarheadDetonatedEventArgs"/> of the event.</param>
        </member>
        <member name="T:LabApi.Events.LabEventHandler">
            <summary>
            LabAPI's event handler.
            Called when an event is triggered.
            </summary>
        </member>
        <member name="T:LabApi.Events.LabEventHandler`1">
            <summary>
            LabAPI's event handler with a <see cref="T:System.EventArgs"/> parameter.
            Called when an event is with the specified <see cref="T:System.EventArgs"/> triggered .
            </summary>
            <param name="ev">The event arg instance.</param>
            <typeparam name="TEventArgs">The type of the <see cref="T:System.EventArgs"/> of the event.</typeparam>
        </member>
        <member name="T:LabApi.Features.Audio.AudioTransmitter">
            <summary>
            Encodes and sends audio to certain players which plays on speakers with the specified controller id.
            </summary>
            <remarks>
            Its possible to create multiple transmitters with the same controller id, but you must filter the receiving players such that no one player receives audio from multiple transmitters.
            This is done to allow you to send different audio to certain players using the same speakers.
            </remarks>
        </member>
        <member name="F:LabApi.Features.Audio.AudioTransmitter.SampleRate">
            <summary>
            The sample rate in samples per second.
            </summary>
        </member>
        <member name="F:LabApi.Features.Audio.AudioTransmitter.FrameSize">
            <summary>
            The number of samples per audio frame.
            </summary>
        </member>
        <member name="F:LabApi.Features.Audio.AudioTransmitter.FramePeriod">
            <summary>
            The number of seconds between each audio frame.
            </summary>
        </member>
        <member name="F:LabApi.Features.Audio.AudioTransmitter.MaxEncodedSize">
            <summary>
            The max number of bytes allowed to be encoded per audio frame.
            </summary>
        </member>
        <member name="M:LabApi.Features.Audio.AudioTransmitter.#ctor(System.Byte,VoiceChat.Codec.Enums.OpusApplicationType)">
            <summary>
            Creates a new audio transmitter for the specified controller.
            </summary>
            <param name="controllerId">The controller specified by its Id.</param>
            <param name="type">What kind of audio the encoder should optimise's for.</param>
        </member>
        <member name="P:LabApi.Features.Audio.AudioTransmitter.ControllerId">
            <summary>
            The <see cref="P:LabApi.Features.Wrappers.SpeakerToy.ControllerId"/> of the speakers to play the audio on.
            </summary>
        </member>
        <member name="P:LabApi.Features.Audio.AudioTransmitter.AudioClipSamples">
            <summary>
            The queued audio clips.
            Includes the current playing clip.
            </summary>
        </member>
        <member name="P:LabApi.Features.Audio.AudioTransmitter.ValidPlayers">
            <summary>
            The predicate for determining which players receive audio.
            </summary>
            <remarks>
            If <see langword="null"/>, all authenticated players will receive audio packets.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Audio.AudioTransmitter.Looping">
            <summary>
            Whether the last queued clip will loop.
            </summary>
        </member>
        <member name="P:LabApi.Features.Audio.AudioTransmitter.CurrentPosition">
            <summary>
            The position in samples of the current clip.
            </summary>
        </member>
        <member name="P:LabApi.Features.Audio.AudioTransmitter.CurrentSampleCount">
            <summary>
            Number of samples in the current clip.
            </summary>
        </member>
        <member name="P:LabApi.Features.Audio.AudioTransmitter.IsPlaying">
            <summary>
            Whether playback is active and can be stopped or paused.
            </summary>
        </member>
        <member name="P:LabApi.Features.Audio.AudioTransmitter.IsPaused">
            <summary>
            Whether playback is paused and can be resumed.
            </summary>
        </member>
        <member name="M:LabApi.Features.Audio.AudioTransmitter.Play(System.Single[],System.Boolean,System.Boolean)">
            <summary>
            Plays the PCM samples on the current controller.
            </summary>
            <remarks>
            Samples are played at a sample rate of <see cref="F:LabApi.Features.Audio.AudioTransmitter.SampleRate"/>, mono channel (non interleaved data) with ranges from -1.0f to 1.0f.
            </remarks>
            <param name="samples">The PCM samples.</param>
            <param name="queue">Whether to queue the audio if audio is already playing, otherwise overrides the current audio.</param>
            <param name="loop">
            Whether to loop this clip.
            Loop ends if another clip is played either immediately if not queued or at the end of the loop if next clip was queued.
            </param>
        </member>
        <member name="M:LabApi.Features.Audio.AudioTransmitter.Pause">
            <summary>
            Pauses transmission of audio.
            </summary>
        </member>
        <member name="M:LabApi.Features.Audio.AudioTransmitter.Resume">
            <summary>
            Resumes transmission of audio.
            </summary>
        </member>
        <member name="M:LabApi.Features.Audio.AudioTransmitter.Skip(System.Int32)">
            <summary>
            Skips the current or queued clips.
            Includes the current clip.
            </summary>
            <param name="count">The number of queued audios clips to skip.</param>
        </member>
        <member name="M:LabApi.Features.Audio.AudioTransmitter.Stop">
            <summary>
            Stops transmission of audio.
            </summary>
        </member>
        <member name="T:LabApi.Features.Console.Logger">
            <summary>
            LabAPIs console logger.
            Used to log messages to the server console.
            </summary>
        </member>
        <member name="M:LabApi.Features.Console.Logger.Raw(System.String,System.ConsoleColor)">
            <summary>
            Logs a message to the server console with the specified color.
            </summary>
            <param name="message">The message to log.</param>
            <param name="color">The color of the message.</param>
        </member>
        <member name="M:LabApi.Features.Console.Logger.Debug(System.Object,System.Boolean)">
            <summary>
            Logs a debug message to the server console.
            </summary>
            <param name="message">The message to log.</param>
            <param name="canBePrinted">Whether the message can be printed.</param>
        </member>
        <member name="M:LabApi.Features.Console.Logger.Info(System.Object)">
            <summary>
            Logs an info message to the server console.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:LabApi.Features.Console.Logger.Warn(System.Object)">
            <summary>
            Logs a warning message to the server console.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:LabApi.Features.Console.Logger.Error(System.Object)">
            <summary>
            Logs an error message to the server console.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:LabApi.Features.Console.Logger.InternalWarn(System.Object)">
            <summary>
            Logs an internal warning message to the server console.
            </summary>
            <remarks>
            Should only be used when an issue is caused by an internal fault and not one caused by improper use of the API.
            </remarks>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:LabApi.Features.Console.Logger.InternalError(System.Object)">
            <summary>
            Logs an internal error message to the server console.
            </summary>
            <remarks>
            Should only be used when an exception is caused by an internal fault and not one caused by improper use of the API.
            </remarks>
            <param name="message">The message to log.</param>
        </member>
        <member name="T:LabApi.Features.Enums.CommandType">
            <summary>
            Represents the type of command that can be executed.
            </summary>
        </member>
        <member name="F:LabApi.Features.Enums.CommandType.Console">
            <summary>
            A command that is executed from the server console.
            </summary>
        </member>
        <member name="F:LabApi.Features.Enums.CommandType.RemoteAdmin">
            <summary>
            A command that is executed from the remote admin.
            <para>Also called slash command.</para>
            </summary>
        </member>
        <member name="F:LabApi.Features.Enums.CommandType.Client">
            <summary>
            A command that is executed from the players console.
            <para>Also called dot command.</para>
            </summary>
        </member>
        <member name="T:LabApi.Features.Enums.DoorName">
            <summary>
            Enum type that represents all the door name tags defined in the game.
            </summary>
        </member>
        <member name="T:LabApi.Features.Enums.PlayerSearchFlags">
            <summary>
            Flags used to choose which players to return from <see cref="M:LabApi.Features.Wrappers.Player.GetAll(LabApi.Features.Enums.PlayerSearchFlags)"/>.
            </summary>
        </member>
        <member name="F:LabApi.Features.Enums.PlayerSearchFlags.None">
            <summary>
            No search flags, includes no players.
            </summary>
        </member>
        <member name="F:LabApi.Features.Enums.PlayerSearchFlags.AuthenticatedPlayers">
            <summary>
            Includes all authenticated real players, see <see cref="P:LabApi.Features.Wrappers.Player.IsPlayer"/> and <see cref="P:LabApi.Features.Wrappers.Player.IsReady"/>.
            </summary>
            <remarks>
            Same filtering used for <see cref="!:Player.AuthenticatedList"/>.
            </remarks>
        </member>
        <member name="F:LabApi.Features.Enums.PlayerSearchFlags.UnauthenticatedPlayers">
            <summary>
            Includes all unauthenticated real players, see <see cref="P:LabApi.Features.Wrappers.Player.IsPlayer"/> and <see cref="P:LabApi.Features.Wrappers.Player.IsReady"/>.
            </summary>
            <remarks>
            Same filtering used for <see cref="P:LabApi.Features.Wrappers.Player.UnauthenticatedList"/>.
            </remarks>
        </member>
        <member name="F:LabApi.Features.Enums.PlayerSearchFlags.DummyNpcs">
            <summary>
            Includes all dummy NPCs, see <see cref="P:LabApi.Features.Wrappers.Player.IsNpc"/> and <see cref="P:LabApi.Features.Wrappers.Player.IsDummy"/>.
            </summary>
            <remarks>
            Same filtering used for <see cref="P:LabApi.Features.Wrappers.Player.DummyList"/>.
            </remarks>
        </member>
        <member name="F:LabApi.Features.Enums.PlayerSearchFlags.RegularNpcs">
            <summary>
            Includes all non dummy NPCs, see <see cref="P:LabApi.Features.Wrappers.Player.IsNpc"/> and <see cref="P:LabApi.Features.Wrappers.Player.IsDummy"/>.
            </summary>
            <remarks>
            Same filtering used for <see cref="P:LabApi.Features.Wrappers.Player.RegularNpcList"/>.
            </remarks>
        </member>
        <member name="F:LabApi.Features.Enums.PlayerSearchFlags.Host">
            <summary>
            Includes the host player, see <see cref="P:LabApi.Features.Wrappers.Player.IsHost"/>.
            </summary>
        </member>
        <member name="F:LabApi.Features.Enums.PlayerSearchFlags.AuthenticatedAndDummy">
            <summary>
            Includes all authenticated real players and all dummy NPCs, see <see cref="F:LabApi.Features.Enums.PlayerSearchFlags.AuthenticatedPlayers"/> and <see cref="F:LabApi.Features.Enums.PlayerSearchFlags.DummyNpcs"/>.
            </summary>
            <remarks>
            Same filtering used for <see cref="P:LabApi.Features.Wrappers.Player.ReadyList"/>.
            </remarks>
        </member>
        <member name="T:LabApi.Features.Enums.Scp079PingType">
            <summary>
            Enum used for type of the ping.
            </summary>
        </member>
        <member name="F:LabApi.Features.Enums.Scp079PingType.Generator">
            <summary>
            <see cref="T:LabApi.Features.Wrappers.Generator"/> ping.
            </summary>
        </member>
        <member name="F:LabApi.Features.Enums.Scp079PingType.Projectile">
            <summary>
            <see cref="T:LabApi.Features.Wrappers.ExplosiveGrenadeProjectile"/> and <see cref="T:LabApi.Features.Wrappers.FlashbangProjectile"/> pings.
            </summary>
        </member>
        <member name="F:LabApi.Features.Enums.Scp079PingType.MicroHid">
            <summary>
            Micro-HID ping.
            </summary>
        </member>
        <member name="F:LabApi.Features.Enums.Scp079PingType.Human">
            <summary>
            <see cref="T:LabApi.Features.Wrappers.Player"/> human role ping.
            </summary>
        </member>
        <member name="F:LabApi.Features.Enums.Scp079PingType.Elevator">
            <summary>
            <see cref="T:LabApi.Features.Wrappers.Elevator"/> ping.
            </summary>
        </member>
        <member name="F:LabApi.Features.Enums.Scp079PingType.Door">
            <summary>
            <see cref="T:LabApi.Features.Wrappers.Door"/> ping.
            </summary>
        </member>
        <member name="F:LabApi.Features.Enums.Scp079PingType.Default">
            <summary>
            Default "i" icon ping.
            </summary>
        </member>
        <member name="T:LabApi.Features.Extensions.LinqExtensions">
            <summary>
            Extensions for Linq.
            </summary>
        </member>
        <member name="M:LabApi.Features.Extensions.LinqExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Finds smallest value by a specified key.
            If 2 or more occurrences have the same minimum value then the first one in the collection is returned.
            </summary>
            <typeparam name="T">The type to compare and select.</typeparam>
            <typeparam name="TKey">The value to compare the keys.</typeparam>
            <param name="enumerable">The enumerable collection.</param>
            <param name="selectFunc">The selection function.</param>
            <returns>Minimum value or <see langword="null"/> if the collection is empty.</returns>
        </member>
        <member name="M:LabApi.Features.Extensions.LinqExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Finds largest value by a specified key.
            If 2 or more occurrences have the same minimum value then the first one in the collection is returned.
            </summary>
            <typeparam name="T">The type to compare and select.</typeparam>
            <typeparam name="TKey">The value to compare the keys.</typeparam>
            <param name="enumerable">The enumerable collection.</param>
            <param name="selectFunc">The selection function.</param>
            <returns>Maximum value or <see langword="null"/> if the collection is empty.</returns>
        </member>
        <member name="T:LabApi.Features.Extensions.PriorityQueue`1">
            <summary>
            Priority queue class.
            </summary>
            <typeparam name="T">Data type to store in the queue.</typeparam>
        </member>
        <member name="M:LabApi.Features.Extensions.PriorityQueue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Features.Extensions.PriorityQueue`1"/> class.
            </summary>
        </member>
        <member name="P:LabApi.Features.Extensions.PriorityQueue`1.Count">
            <summary>
            Gets the number of items currently in the queue.
            </summary>
        </member>
        <member name="M:LabApi.Features.Extensions.PriorityQueue`1.Enqueue(`0,System.Int32)">
            <summary>
            Adds an item to the priority queue with the specified priority.
            Smaller numbers indicate higher priority.
            </summary>
            <param name="item">The item to add.</param>
            <param name="priority">The priority of the item.</param>
        </member>
        <member name="M:LabApi.Features.Extensions.PriorityQueue`1.Dequeue">
            <summary>
            Removes and returns the item with the highest priority (smallest priority value) from the queue.
            </summary>
            <returns>The item with the highest priority.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the queue is empty.</exception>
        </member>
        <member name="M:LabApi.Features.Extensions.PriorityQueue`1.Clear">
            <summary>
            Clears all items from the queue.
            </summary>
        </member>
        <member name="T:LabApi.Features.Extensions.PriorityQueuePool`1">
            <summary>
            Pool for <see cref="T:LabApi.Features.Extensions.PriorityQueue`1"/>.
            </summary>
            <typeparam name="T">Type of the queue.</typeparam>
        </member>
        <member name="F:LabApi.Features.Extensions.PriorityQueuePool`1.Shared">
            <summary>
            Gets a shared <see cref="T:LabApi.Features.Extensions.PriorityQueue`1"/> instance.
            </summary>
        </member>
        <member name="M:LabApi.Features.Extensions.PriorityQueuePool`1.Rent">
            <summary>
            Gives a pooled <see cref="T:LabApi.Features.Extensions.PriorityQueue`1"/> or creates a new one if the pool is empty.
            </summary>
            <returns>A <see cref="T:LabApi.Features.Extensions.PriorityQueue`1"/> instance from the pool.</returns>
        </member>
        <member name="M:LabApi.Features.Extensions.PriorityQueuePool`1.Return(LabApi.Features.Extensions.PriorityQueue{`0})">
            <summary>
            Returns a <see cref="T:LabApi.Features.Extensions.PriorityQueue`1"/> to the pool for reuse.
            </summary>
            <param name="queue">The <see cref="T:LabApi.Features.Extensions.PriorityQueue`1"/> to return to the pool.</param>
        </member>
        <member name="T:LabApi.Features.Extensions.RoleExtensions">
            <summary>
            Adds extension methods to access information about <see cref="T:PlayerRoles.RoleTypeId"/>s.
            </summary>
        </member>
        <member name="M:LabApi.Features.Extensions.RoleExtensions.GetRoleBase(PlayerRoles.RoleTypeId)">
            <summary>
            Gets the <see cref="T:PlayerRoles.PlayerRoleBase"/> from a <see cref="T:PlayerRoles.RoleTypeId"/>.
            </summary>
            <param name="roleType">The <see cref="T:PlayerRoles.RoleTypeId"/>.</param>
            <returns>The <see cref="T:PlayerRoles.PlayerRoleBase"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Extensions.RoleExtensions.GetFullName(PlayerRoles.RoleTypeId)">
            <summary>
            Gets the human-readable version of a <see cref="T:PlayerRoles.RoleTypeId"/>'s name.
            </summary>
            <param name="roleType">The <see cref="T:PlayerRoles.RoleTypeId"/>.</param>
            <returns>The name of the role.</returns>
        </member>
        <member name="M:LabApi.Features.Extensions.RoleExtensions.IsScp(PlayerRoles.RoleTypeId)">
            <summary>
            Checks if the role is an SCP role.
            </summary>
            <param name="roleType">The <see cref="T:PlayerRoles.RoleTypeId"/>.</param>
            <returns>A boolean which is true when the role is an SCP role.</returns>
        </member>
        <member name="M:LabApi.Features.Extensions.RoleExtensions.IsDead(PlayerRoles.RoleTypeId)">
            <summary>
            Checks if the role is a dead role.
            </summary>
            <param name="roleType">The <see cref="T:PlayerRoles.RoleTypeId"/>.</param>
            <returns>A boolean which is true when the role is a dead role.</returns>
        </member>
        <member name="M:LabApi.Features.Extensions.RoleExtensions.IsNtf(PlayerRoles.RoleTypeId)">
            <summary>
            Checks if the role is an NTF role.
            </summary>
            <param name="roleType">The <see cref="T:PlayerRoles.RoleTypeId"/>.</param>
            <returns>A boolean which is true when the role is an NTF role. Does not include Facility Guards.</returns>
        </member>
        <member name="M:LabApi.Features.Extensions.RoleExtensions.IsChaos(PlayerRoles.RoleTypeId)">
            <summary>
            Checks if the role is a Chaos role.
            </summary>
            <param name="roleType">The <see cref="T:PlayerRoles.RoleTypeId"/>.</param>
            <returns>A boolean which is true when the role is a Chaos role.</returns>
        </member>
        <member name="M:LabApi.Features.Extensions.RoleExtensions.IsMilitary(PlayerRoles.RoleTypeId)">
            <summary>
            Checks if the role is a military role (Chaos Insurgency or NTF).
            </summary>
            <param name="roleType">The <see cref="T:PlayerRoles.RoleTypeId"/>.</param>
            <returns>A boolean which is true when the role is a military role.</returns>
        </member>
        <member name="M:LabApi.Features.Extensions.RoleExtensions.IsCivilian(PlayerRoles.RoleTypeId)">
            <summary>
            Checks if the role is a civilian role (Scientists and Class-D).
            </summary>
            <param name="roleType">The <see cref="T:PlayerRoles.RoleTypeId"/>.</param>
            <returns>A boolean which is true when the role is a civilian role.</returns>
        </member>
        <member name="T:LabApi.Features.Interfaces.IScp914ItemProcessor">
            <summary>
            An interface for creating custom SCP-914 Item upgrade processors.
            </summary>
        </member>
        <member name="P:LabApi.Features.Interfaces.IScp914ItemProcessor.MoveVector">
            <summary>
            The amount of world space position that needs to be added to move a pickup item from the input chamber to the output chamber.
            </summary>
        </member>
        <member name="P:LabApi.Features.Interfaces.IScp914ItemProcessor.UsePickupMethodOnly">
            <summary>
            Whether to use the <see cref="M:LabApi.Features.Interfaces.IScp914ItemProcessor.UpgradePickup(Scp914.Scp914KnobSetting,LabApi.Features.Wrappers.Pickup)"/> for inventory items and skip using <see cref="M:LabApi.Features.Interfaces.IScp914ItemProcessor.UpgradeItem(Scp914.Scp914KnobSetting,LabApi.Features.Wrappers.Item)"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Interfaces.IScp914ItemProcessor.UpgradeItem(Scp914.Scp914KnobSetting,LabApi.Features.Wrappers.Item)">
            <summary>
            Called for each players items in the intake chamber of SCP-914 if the <see cref="P:LabApi.Features.Wrappers.Scp914.Mode"/> allows so.
            </summary>
            <param name="setting">The <see cref="T:Scp914.Scp914KnobSetting"/> used for this upgrade.</param>
            <param name="item">The <see cref="T:LabApi.Features.Wrappers.Item"/> to upgraded.</param>
            <returns>The upgrade result.</returns>
            <remarks>
            This is not called if <see cref="P:LabApi.Features.Interfaces.IScp914ItemProcessor.UsePickupMethodOnly"/> is true.
            Instead, items are converted to pickups and <see cref="M:LabApi.Features.Interfaces.IScp914ItemProcessor.UpgradePickup(Scp914.Scp914KnobSetting,LabApi.Features.Wrappers.Pickup)"/> is used, and then the pickups are converted back to items.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Interfaces.IScp914ItemProcessor.UpgradePickup(Scp914.Scp914KnobSetting,LabApi.Features.Wrappers.Pickup)">
            <summary>
            Called for each pickup in the intake chamber if the <see cref="P:LabApi.Features.Wrappers.Scp914.Mode"/> allows so.
            </summary>
            <remarks>
            Add <see cref="P:LabApi.Features.Interfaces.IScp914ItemProcessor.MoveVector"/> to the pickups world position to move pickup from the input chamber to the output.
            </remarks>
            <param name="setting">The <see cref="T:Scp914.Scp914KnobSetting"/> used for this upgrade.</param>
            <param name="pickup">The <see cref="T:LabApi.Features.Wrappers.Pickup"/> to upgrade.</param>
            <returns>The upgrade result.</returns>
        </member>
        <member name="T:LabApi.Features.LabApiProperties">
            <summary>
            Contains LabAPI properties which can be accessed by plugins.
            </summary>
            <para>Those properties are a mix of constants and static fields such as <see cref="F:LabApi.Features.LabApiProperties.CompiledVersion"/>.</para>
        </member>
        <member name="F:LabApi.Features.LabApiProperties.CompiledVersion">
             <summary>
             The version of the loader, stored during its compilation.
            
             <para>Due to being a constant, the value of this field will always be that of its compilation time version.</para>
             </summary>
        </member>
        <member name="F:LabApi.Features.LabApiProperties.CurrentVersion">
            <summary>
            Indicates the value of <see cref="F:LabApi.Features.LabApiProperties.CompiledVersion"/> the server is currently using.
            </summary>
        </member>
        <member name="T:LabApi.Features.Permissions.IPermissionsProvider">
            <summary>
            Represents a provider of user permissions.
            </summary>
        </member>
        <member name="M:LabApi.Features.Permissions.IPermissionsProvider.GetPermissions(LabApi.Features.Wrappers.Player)">
            <summary>
            Retrieves all the permissions of the given <paramref name="player"/>.
            </summary>
            <param name="player">The player to retrieve the permissions for.</param>
            <returns>An array of all the permissions of the given <paramref name="player"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Permissions.IPermissionsProvider.HasPermissions(LabApi.Features.Wrappers.Player,System.String[])">
            <summary>
            Whether the given <paramref name="player"/> has all the given <paramref name="permissions"/>.
            </summary>
            <param name="player">The player to check the permissions for.</param>
            <param name="permissions">The permissions to check.</param>
            <returns>True if the <paramref name="player"/> has all the <paramref name="permissions"/>; otherwise, false.</returns>
        </member>
        <member name="M:LabApi.Features.Permissions.IPermissionsProvider.HasAnyPermission(LabApi.Features.Wrappers.Player,System.String[])">
            <summary>
            Whether the given <paramref name="player"/> has any of the given <paramref name="permissions"/>.
            </summary>
            <param name="player">The player to check the permissions for.</param>
            <param name="permissions">The permissions to check.</param>
            <returns>True if the <paramref name="player"/> has any of the <paramref name="permissions"/>; otherwise, false.</returns>
        </member>
        <member name="M:LabApi.Features.Permissions.IPermissionsProvider.AddPermissions(LabApi.Features.Wrappers.Player,System.String[])">
            <summary>
            Adds all the given <paramref name="permissions"/> to the given <paramref name="player"/>.
            </summary>
            <param name="player">The player to add the permissions to.</param>
            <param name="permissions">The permissions to add.</param>
        </member>
        <member name="M:LabApi.Features.Permissions.IPermissionsProvider.RemovePermissions(LabApi.Features.Wrappers.Player,System.String[])">
            <summary>
            Removes all the given <paramref name="permissions"/> from the given <paramref name="player"/>.
            </summary>
            <param name="player">The player to remove the permissions from.</param>
            <param name="permissions">The permissions to remove.</param>
        </member>
        <member name="M:LabApi.Features.Permissions.IPermissionsProvider.ReloadPermissions">
            <summary>
            Reloads the permissions.
            </summary>
        </member>
        <member name="T:LabApi.Features.Permissions.PermissionsExtensions">
            <summary>
            Represents extension methods for the permissions system.
            </summary>
        </member>
        <member name="M:LabApi.Features.Permissions.PermissionsExtensions.GetPermissionsByProvider(CommandSystem.ICommandSender)">
            <inheritdoc cref="M:LabApi.Features.Permissions.PermissionsManager.GetPermissionsByProvider(LabApi.Features.Wrappers.Player)"/>
        </member>
        <member name="M:LabApi.Features.Permissions.PermissionsExtensions.GetPermissions(CommandSystem.ICommandSender)">
            <inheritdoc cref="M:LabApi.Features.Permissions.IPermissionsProvider.GetPermissions(LabApi.Features.Wrappers.Player)"/>
        </member>
        <member name="M:LabApi.Features.Permissions.PermissionsExtensions.HasPermissions(CommandSystem.ICommandSender,System.String[])">
            <inheritdoc cref="M:LabApi.Features.Permissions.IPermissionsProvider.HasPermissions(LabApi.Features.Wrappers.Player,System.String[])"/>
        </member>
        <member name="M:LabApi.Features.Permissions.PermissionsExtensions.HasAnyPermission(CommandSystem.ICommandSender,System.String[])">
            <inheritdoc cref="M:LabApi.Features.Permissions.IPermissionsProvider.HasAnyPermission(LabApi.Features.Wrappers.Player,System.String[])"/>
        </member>
        <member name="M:LabApi.Features.Permissions.PermissionsExtensions.AddPermissions(CommandSystem.ICommandSender,System.String[])">
            <inheritdoc cref="M:LabApi.Features.Permissions.IPermissionsProvider.AddPermissions(LabApi.Features.Wrappers.Player,System.String[])"/>
        </member>
        <member name="M:LabApi.Features.Permissions.PermissionsExtensions.RemovePermissions(CommandSystem.ICommandSender,System.String[])">
            <inheritdoc cref="M:LabApi.Features.Permissions.IPermissionsProvider.RemovePermissions(LabApi.Features.Wrappers.Player,System.String[])"/>
        </member>
        <member name="T:LabApi.Features.Permissions.PermissionsManager">
            <summary>
            Handles the registration and management of permissions and permission providers.
            </summary>
        </member>
        <member name="F:LabApi.Features.Permissions.PermissionsManager.PermissionProviders">
            <summary>
            Internal dictionary to store the registered permission providers.
            </summary>
        </member>
        <member name="M:LabApi.Features.Permissions.PermissionsManager.RegisterProvider``1">
            <summary>
            Registers the given <see cref="T:LabApi.Features.Permissions.IPermissionsProvider"/>.
            </summary>
            <typeparam name="T">The type of the permission provider to register.</typeparam>
        </member>
        <member name="M:LabApi.Features.Permissions.PermissionsManager.UnregisterProvider``1">
            <summary>
            Unregisters the given <see cref="T:LabApi.Features.Permissions.IPermissionsProvider"/>.
            </summary>
            <typeparam name="T">The type of the permission provider to unregister.</typeparam>
        </member>
        <member name="M:LabApi.Features.Permissions.PermissionsManager.GetProvider``1">
            <summary>
            Retrieves the registered <see cref="T:LabApi.Features.Permissions.IPermissionsProvider"/> of the given type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the permission provider to retrieve.</typeparam>
            <returns>The registered <see cref="T:LabApi.Features.Permissions.IPermissionsProvider"/> of the given type <typeparamref name="T"/>; otherwise, null.</returns>
        </member>
        <member name="M:LabApi.Features.Permissions.PermissionsManager.GetPermissionsByProvider(LabApi.Features.Wrappers.Player)">
            <summary>
            Gets all the permissions of the given <paramref name="player"/> by each registered <see cref="T:LabApi.Features.Permissions.IPermissionsProvider"/>.
            </summary>
            <param name="player">The player to retrieve the permissions for.</param>
            <returns>A dictionary of all the permissions of the given <paramref name="player"/> by each registered <see cref="T:LabApi.Features.Permissions.IPermissionsProvider"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Permissions.PermissionsManager.GetPermissions(LabApi.Features.Wrappers.Player)">
            <inheritdoc cref="M:LabApi.Features.Permissions.IPermissionsProvider.GetPermissions(LabApi.Features.Wrappers.Player)"/>
        </member>
        <member name="M:LabApi.Features.Permissions.PermissionsManager.HasPermissions(LabApi.Features.Wrappers.Player,System.String[])">
            <inheritdoc cref="M:LabApi.Features.Permissions.IPermissionsProvider.HasPermissions(LabApi.Features.Wrappers.Player,System.String[])"/>
        </member>
        <member name="M:LabApi.Features.Permissions.PermissionsManager.HasAnyPermission(LabApi.Features.Wrappers.Player,System.String[])">
            <inheritdoc cref="M:LabApi.Features.Permissions.IPermissionsProvider.HasAnyPermission(LabApi.Features.Wrappers.Player,System.String[])"/>
        </member>
        <member name="M:LabApi.Features.Permissions.PermissionsManager.AddPermissions(LabApi.Features.Wrappers.Player,System.String[])">
            <inheritdoc cref="M:LabApi.Features.Permissions.IPermissionsProvider.AddPermissions(LabApi.Features.Wrappers.Player,System.String[])"/>
        </member>
        <member name="M:LabApi.Features.Permissions.PermissionsManager.RemovePermissions(LabApi.Features.Wrappers.Player,System.String[])">
            <inheritdoc cref="M:LabApi.Features.Permissions.IPermissionsProvider.RemovePermissions(LabApi.Features.Wrappers.Player,System.String[])"/>
        </member>
        <member name="M:LabApi.Features.Permissions.PermissionsManager.ReloadAllPermissionsProviders">
            <summary>
            Reloads all the registered <see cref="T:LabApi.Features.Permissions.IPermissionsProvider"/>s.
            </summary>
        </member>
        <member name="T:LabApi.Features.Permissions.Providers.DefaultPermissionsProvider">
            <summary>
            Grants a default permission provider.
            Server host friendly and easily configurable from the file system.
            </summary>
        </member>
        <member name="M:LabApi.Features.Permissions.Providers.DefaultPermissionsProvider.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:LabApi.Features.Permissions.Providers.DefaultPermissionsProvider"/> class.
            </summary>
        </member>
        <member name="M:LabApi.Features.Permissions.Providers.DefaultPermissionsProvider.GetPermissions(LabApi.Features.Wrappers.Player)">
            <inheritdoc cref="M:LabApi.Features.Permissions.IPermissionsProvider.GetPermissions(LabApi.Features.Wrappers.Player)"/>
        </member>
        <member name="M:LabApi.Features.Permissions.Providers.DefaultPermissionsProvider.HasPermissions(LabApi.Features.Wrappers.Player,System.String[])">
            <inheritdoc cref="M:LabApi.Features.Permissions.IPermissionsProvider.HasPermissions(LabApi.Features.Wrappers.Player,System.String[])"/>
        </member>
        <member name="M:LabApi.Features.Permissions.Providers.DefaultPermissionsProvider.HasAnyPermission(LabApi.Features.Wrappers.Player,System.String[])">
            <inheritdoc cref="M:LabApi.Features.Permissions.IPermissionsProvider.HasAnyPermission(LabApi.Features.Wrappers.Player,System.String[])"/>
        </member>
        <member name="M:LabApi.Features.Permissions.Providers.DefaultPermissionsProvider.AddPermissions(LabApi.Features.Wrappers.Player,System.String[])">
            <inheritdoc cref="M:LabApi.Features.Permissions.IPermissionsProvider.AddPermissions(LabApi.Features.Wrappers.Player,System.String[])"/>
        </member>
        <member name="M:LabApi.Features.Permissions.Providers.DefaultPermissionsProvider.RemovePermissions(LabApi.Features.Wrappers.Player,System.String[])">
            <inheritdoc cref="M:LabApi.Features.Permissions.IPermissionsProvider.RemovePermissions(LabApi.Features.Wrappers.Player,System.String[])"/>
        </member>
        <member name="M:LabApi.Features.Permissions.Providers.DefaultPermissionsProvider.LabApi#Features#Permissions#IPermissionsProvider#ReloadPermissions">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Features.Permissions.Providers.PermissionGroup">
            <summary>
            Represents a group of permissions. They are linked to RA user groups.
            </summary>
        </member>
        <member name="P:LabApi.Features.Permissions.Providers.PermissionGroup.Default">
            <summary>
            Gets the default permission group.
            </summary>
        </member>
        <member name="P:LabApi.Features.Permissions.Providers.PermissionGroup.DefaultPermissionGroups">
            <summary>
            Generates the default permission groups based on the available groups in the RA settings.
            </summary>
        </member>
        <member name="M:LabApi.Features.Permissions.Providers.PermissionGroup.#ctor">
            <summary>
            Constructor for deserialization.
            </summary>
        </member>
        <member name="M:LabApi.Features.Permissions.Providers.PermissionGroup.#ctor(System.String[],System.String[])">
            <summary>
            Represents a group of permissions. They are linked to RA user groups.
            </summary>
            <param name="inheritedGroups">Array of groups that should be inherited.</param>
            <param name="permissions">Array of permissions this group should have.</param>
        </member>
        <member name="P:LabApi.Features.Permissions.Providers.PermissionGroup.InheritedGroups">
            <summary>
            The inherited groups of the group.
            </summary>
        </member>
        <member name="P:LabApi.Features.Permissions.Providers.PermissionGroup.Permissions">
            <summary>
            The permissions of the group.
            </summary>
        </member>
        <member name="P:LabApi.Features.Permissions.Providers.PermissionGroup.IsRoot">
            <summary>
            Whether the user has all access to all permissions (*).
            </summary>
        </member>
        <member name="P:LabApi.Features.Permissions.Providers.PermissionGroup.SpecialPermissionsSuperset">
            <summary>
            An internal dictionary that saves special permissions. (x.*).
            </summary>
        </member>
        <member name="T:LabApi.Features.Stores.CustomDataStore">
            <summary>
            Represents a Custom Data Store that plugins can use to store data with a player.
            </summary>
        </member>
        <member name="M:LabApi.Features.Stores.CustomDataStore.GetOrAdd``1(LabApi.Features.Wrappers.Player)">
            <summary>
            Gets the <see cref="T:LabApi.Features.Stores.CustomDataStore"/> for the specified <see cref="T:LabApi.Features.Wrappers.Player"/>, or creates a new one if it doesn't exist.
            </summary>
            <param name="player">The <see cref="T:LabApi.Features.Wrappers.Player"/> to get the <see cref="T:LabApi.Features.Stores.CustomDataStore"/> for.</param>
            <typeparam name="TStore">The type of the <see cref="T:LabApi.Features.Stores.CustomDataStore"/>.</typeparam>
            <returns>The <see cref="T:LabApi.Features.Stores.CustomDataStore"/> for the specified <see cref="T:LabApi.Features.Wrappers.Player"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Stores.CustomDataStore.Destroy``1(LabApi.Features.Wrappers.Player)">
            <summary>
            Destroys the <see cref="T:LabApi.Features.Stores.CustomDataStore"/> for the specified <see cref="T:LabApi.Features.Wrappers.Player"/>.
            </summary>
            <param name="player">The <see cref="T:LabApi.Features.Wrappers.Player"/> to destroy the <see cref="T:LabApi.Features.Stores.CustomDataStore"/> for.</param>
            <typeparam name="TStore">The type of the <see cref="T:LabApi.Features.Stores.CustomDataStore"/>.</typeparam>
        </member>
        <member name="M:LabApi.Features.Stores.CustomDataStore.DestroyAll``1">
            <summary>
            Destroys all instances of the <see cref="T:LabApi.Features.Stores.CustomDataStore"/> for the specified type.
            </summary>
            <typeparam name="TStore">The type of the <see cref="T:LabApi.Features.Stores.CustomDataStore"/>.</typeparam>
        </member>
        <member name="M:LabApi.Features.Stores.CustomDataStore.#ctor(LabApi.Features.Wrappers.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Features.Stores.CustomDataStore"/> class.
            </summary>
            <param name="owner">The <see cref="T:LabApi.Features.Wrappers.Player"/> that this instance is associated with.</param>
        </member>
        <member name="P:LabApi.Features.Stores.CustomDataStore.Owner">
            <summary>
            Gets the <see cref="T:LabApi.Features.Wrappers.Player"/> that this instance is associated with.
            </summary>
        </member>
        <member name="M:LabApi.Features.Stores.CustomDataStore.Destroy">
            <summary>
            Destroys this instance of the <see cref="T:LabApi.Features.Stores.CustomDataStore"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Stores.CustomDataStore.OnInstanceCreated">
            <summary>
            Called when a new instance of the <see cref="T:LabApi.Features.Stores.CustomDataStore"/> is created.
            </summary>
        </member>
        <member name="M:LabApi.Features.Stores.CustomDataStore.OnInstanceDestroyed">
            <summary>
            Called when an instance of the <see cref="T:LabApi.Features.Stores.CustomDataStore"/> is going to be destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Stores.CustomDataStoreManager">
            <summary>
            Handles the registration and management of custom data stores.
            </summary>
        </member>
        <member name="M:LabApi.Features.Stores.CustomDataStoreManager.RegisterStore``1">
            <summary>
            Registers a custom data store.
            </summary>
            <typeparam name="T">The type of the custom data store.</typeparam>
            <returns>Whether the store was successfully registered.</returns>
        </member>
        <member name="M:LabApi.Features.Stores.CustomDataStoreManager.UnregisterStore``1">
            <summary>
            Unregisters a custom data store.
            </summary>
            <typeparam name="T">The type of the custom data store.</typeparam>
        </member>
        <member name="M:LabApi.Features.Stores.CustomDataStoreManager.AddPlayer(LabApi.Features.Wrappers.Player)">
            <summary>
            Method used to initialize stores when a new player joins the server.
            </summary>
            <param name="player">The player added to the game.</param>
        </member>
        <member name="M:LabApi.Features.Stores.CustomDataStoreManager.RemovePlayer(LabApi.Features.Wrappers.Player)">
            <summary>
            Method used to destroy stores when an existing player leaves the server.
            </summary>
            <param name="player">The player removed from the game.</param>
        </member>
        <member name="M:LabApi.Features.Stores.CustomDataStoreManager.IsRegistered(System.Type)">
            <summary>
            Whether the store type had been registered.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the store.</param>
            <returns><see langword="true"/> if registered; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Stores.CustomDataStoreManager.IsRegistered``1">
            <summary>
            Whether the store type had been registered.
            </summary>
            <typeparam name="T">The stores type.</typeparam>
            <returns><see langword="true"/> if registered; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:LabApi.Features.Stores.CustomDataStore`1">
            <summary>
            Represents a Custom Data Store that plugins can use to store data with a player.
            </summary>
            <typeparam name="TStore">The type of the <see cref="T:LabApi.Features.Stores.CustomDataStore"/>.</typeparam>
        </member>
        <member name="M:LabApi.Features.Stores.CustomDataStore`1.Get(LabApi.Features.Wrappers.Player)">
            <summary>
            Gets the <see cref="T:LabApi.Features.Stores.CustomDataStore"/> for the specified <see cref="T:LabApi.Features.Wrappers.Player"/>.
            </summary>
            <param name="player">The <see cref="T:LabApi.Features.Wrappers.Player"/> to get the <see cref="T:LabApi.Features.Stores.CustomDataStore"/> for.</param>
            <returns>The <see cref="T:LabApi.Features.Stores.CustomDataStore"/> for the specified <see cref="T:LabApi.Features.Wrappers.Player"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Stores.CustomDataStore`1.#ctor(LabApi.Features.Wrappers.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:LabApi.Features.Stores.CustomDataStore"/> class.
            </summary>
            <param name="owner">The <see cref="T:LabApi.Features.Wrappers.Player"/> that this instance is associated with.</param>
        </member>
        <member name="T:LabApi.Features.Wrappers.AdminToy">
            <summary>
            Wrapper for the <see cref="T:AdminToys.AdminToyBase"/> class.
            </summary>
        </member>
        <member name="F:LabApi.Features.Wrappers.AdminToy._typeWrappers">
            <summary>
            Contains all the handlers for constructing wrappers for the associated base game types.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.AdminToy.Dictionary">
            <summary>
            Contains all the cached admin toys, accessible through their <see cref="P:LabApi.Features.Wrappers.AdminToy.Base"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.AdminToy.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.AdminToy"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.AdminToy.Get(AdminToys.AdminToyBase)">
            <summary>
            Gets the admin toy wrapper from the <see cref="P:LabApi.Features.Wrappers.AdminToy.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:AdminToys.AdminToyBase"/> was not <see langword="null"/>.
            </summary>
            <param name="adminToyBase">The <see cref="P:LabApi.Features.Wrappers.AdminToy.Base"/> of the admin toy.</param>
            <returns>The requested admin toy or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.AdminToy.TryGet(AdminToys.AdminToyBase,LabApi.Features.Wrappers.AdminToy@)">
            <summary>
            Tries to get the admin toy wrapper from the <see cref="P:LabApi.Features.Wrappers.AdminToy.Dictionary"/>.
            </summary>
            <param name="adminToyBase">The <see cref="P:LabApi.Features.Wrappers.AdminToy.Base"/> of the admin toy.</param>
            <param name="adminToy">The requested admin toy.</param>
            <returns>True if the admin toy exists, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.AdminToy.Initialize">
            <summary>
            Initializes the <see cref="T:LabApi.Features.Wrappers.AdminToy"/> class.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.AdminToy.Create``1(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform)">
            <summary>
            Instantiates a new base game admin toy object.
            </summary>
            <typeparam name="T">The base game admin toy type.</typeparam>
            <param name="position">The initial local position.</param>
            <param name="rotation">The initial local rotation.</param>
            <param name="scale">The initial local scale.</param>
            <param name="parent">The parent transform.</param>
            <returns>The instantiated admin toy.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.AdminToy.CreateAdminToyWrapper(AdminToys.AdminToyBase)">
            <summary>
            Creates a new wrapper from the base admin toy object.
            </summary>
            <param name="adminToyBase">The base object.</param>
            <returns>The newly created wrapper.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.AdminToy.AddAdminToy(AdminToys.AdminToyBase)">
            <summary>
            A private method to handle the creation of new admin toys in the server.
            </summary>
            <param name="adminToyBase">The created <see cref="T:AdminToys.AdminToyBase"/> instance.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.AdminToy.RemoveAdminToy(AdminToys.AdminToyBase)">
            <summary>
            A private method to handle the removal of admin toys from the server.
            </summary>
            <param name="adminToyBase">The to be destroyed <see cref="T:AdminToys.AdminToyBase"/> instance.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.AdminToy.Register``1(System.Func{``0,LabApi.Features.Wrappers.AdminToy})">
            <summary>
            A private method to handle the addition of wrapper handlers.
            </summary>
            <typeparam name="T">The derived base game type to handle.</typeparam>
            <param name="constructor">A handler to construct the wrapper with the base game instance.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.AdminToy.#ctor(AdminToys.AdminToyBase)">
            <summary>
            A protected constructor to prevent external instantiation.
            </summary>
            <param name="adminToyBase">The base object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.AdminToy.Base">
            <summary>
            The <see cref="T:AdminToys.AdminToyBase">base</see> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.AdminToy.GameObject">
            <summary>
            The <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.AdminToy.Transform">
            <summary>
            The admin toys <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.AdminToy.IsDestroyed">
            <summary>
            Whether the <see cref="P:LabApi.Features.Wrappers.AdminToy.Base"/> was destroyed.
            </summary>
            <remarks>
            A destroyed object may not be used.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.AdminToy.Position">
            <summary>
            Gets or sets the local position of the admin toy.
            Position is relative to its parent if it has one, otherwise its the world position.
            </summary>
            <remarks>
            If <see cref="P:LabApi.Features.Wrappers.AdminToy.IsStatic"/> is <see langword="true"/> client wont update its position.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.AdminToy.Rotation">
            <summary>
            Gets or sets the local rotation of the admin toy.
            Rotation is relative to its parent if it has one, otherwise its the world rotation.
            </summary>
            <remarks>
            If <see cref="P:LabApi.Features.Wrappers.AdminToy.IsStatic"/> is <see langword="true"/> client wont update its rotation.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.AdminToy.Scale">
            <summary>
            Gets or sets the local scale of the admin toy.
            Scale is relative to its parent if it has one, otherwise its the world scale.
            </summary>
            <remarks>
            If <see cref="P:LabApi.Features.Wrappers.AdminToy.IsStatic"/> is <see langword="true"/> client wont update its scale.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.AdminToy.Parent">
            <summary>
            Gets or sets the parent of the admin toy.
            </summary>
            <remarks>
            If the parent object contains a <see cref="T:Mirror.NetworkIdentity"/> component and has been <see cref="M:Mirror.NetworkServer.Spawn(UnityEngine.GameObject,UnityEngine.GameObject)"/> the parent is synced with the client.
            <para>
            Can be used even if <see cref="P:LabApi.Features.Wrappers.AdminToy.IsStatic"/> is <see langword="true"/>.
            When changing parent the toys relative <see cref="P:LabApi.Features.Wrappers.AdminToy.Position"/>, <see cref="P:LabApi.Features.Wrappers.AdminToy.Rotation"/> and <see cref="P:LabApi.Features.Wrappers.AdminToy.Scale"/> are retained.
            Note that if the parent has <see cref="M:Mirror.NetworkServer.Destroy(UnityEngine.GameObject)"/> called on it this object automatically has <see cref="M:Mirror.NetworkServer.Destroy(UnityEngine.GameObject)"/> called on itself.
            To prevent destruction make sure you unparent it before that happens.
            </para>
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.AdminToy.MovementSmoothing">
            <summary>
            Gets or sets the movement smoothing value.
            </summary>
            <remarks>
            Smooths the transitions between positions, rotations and scales.
            Higher values means more smoothing.
            0 means no movement smoothing so it will snap between positions, rotations and scales.
            Smoothing does not work with parenting changes so changing parent will always cause a teleport.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.AdminToy.IsStatic">
            <summary>
            Gets or sets whether the admin toy is static.
            This should be enabled on as many toys possible to increase performance.
            Static is only applies to the local transformations so parenting to something that moves will still causes it to move while retaining the performance boost.
            </summary>
            <remarks>
            A static admin toy will not process <see cref="P:LabApi.Features.Wrappers.AdminToy.Position"/>, <see cref="P:LabApi.Features.Wrappers.AdminToy.Rotation"/> or <see cref="P:LabApi.Features.Wrappers.AdminToy.Scale"/> on both server and client drastically increasing performance.
            <see cref="P:LabApi.Features.Wrappers.AdminToy.Parent"/> can still be used even if static is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.AdminToy.SyncInterval">
            <summary>
            Time interval in seconds for sending updated values to the client.
            0 means update every frame while 0.5 means update every 500ms.
            Lower values increase network usage but mean the client receives the most up to date state from the server.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.AdminToy.CanCache">
            <summary>
            Whether to cache this wrapper.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.AdminToy.Spawn">
            <summary>
            Spawns the toy on the client.
            </summary>
            <remarks>
            Spawn wont cascade to children toy objects, so if they are not spawned you have to call spawn on all of them.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.AdminToy.Destroy">
            <summary>
            Destroys the toy on server and client.
            </summary>
            <remarks>
            Cascades to all children toy objects, be sure to unparent children if you don't intend to destroy them.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.AdminToy.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.AdminToy.PrefabCache`1">
            <summary>
            Static prefab cache used to speed up prefab search.
            </summary>
            <typeparam name="T">The base game component type of the prefab.</typeparam>
        </member>
        <member name="P:LabApi.Features.Wrappers.AdminToy.PrefabCache`1.Prefab">
            <summary>
            Cached prefab instance for type T.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.CameraToy">
            <summary>
            The wrapper for the <see cref="T:AdminToys.Scp079CameraToy"/> class.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.CameraToy.Dictionary">
            <summary>
            Contains all the camera toys, accessible through their <see cref="P:LabApi.Features.Wrappers.CameraToy.Base"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.CameraToy.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.CameraToy"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.CameraToy.Create(UnityEngine.Transform,System.Boolean)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.CameraToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.CameraToy.Create(UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.CameraToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.CameraToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform,System.Boolean)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.CameraToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.CameraToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)">
            <summary>
            Creates a new camera toy.
            </summary>
            <param name="position">The initial local position.</param>
            <param name="rotation">The initial local rotation.</param>
            <param name="scale">The initial local scale.</param>
            <param name="parent">The parent transform.</param>
            <param name="networkSpawn">Whether to spawn the toy on the client.</param>
            <returns>The created camera toy.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.CameraToy.Get(AdminToys.Scp079CameraToy)">
            <summary>
            Gets the camera toy wrapper from the <see cref="P:LabApi.Features.Wrappers.CameraToy.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:AdminToys.Scp079CameraToy"/> was not <see langword="null"/>.
            </summary>
            <param name="baseCameraToy">The <see cref="P:LabApi.Features.Wrappers.CameraToy.Base"/> of the camera toy.</param>
            <returns>The requested camera toy or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.CameraToy.TryGet(AdminToys.Scp079CameraToy,LabApi.Features.Wrappers.CameraToy@)">
            <summary>
            Tries to get the camera toy wrapper from the <see cref="P:LabApi.Features.Wrappers.CameraToy.Dictionary"/>.
            </summary>
            <param name="baseCameraToy">The <see cref="P:LabApi.Features.Wrappers.CameraToy.Base"/> of the camera toy.</param>
            <param name="cameraToy">The requested camera toy.</param>
            <returns>True if the camera toy exists, otherwise false.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.CameraToy.#ctor(AdminToys.Scp079CameraToy)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseCameraToy">The base <see cref="T:AdminToys.Scp079CameraToy"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.CameraToy.Base">
            <summary>
            The <see cref="T:AdminToys.Scp079CameraToy"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.CameraToy.Label">
            <summary>
            Gets or sets the label of the camera displayed to SCP-079 on HUD.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.CameraToy.Room">
            <summary>
            Gets or sets the room associated with this camera.
            </summary>
            <remarks>
            Room will never be <see langword="null"/>.
            This determines what cameras are visible to SCP-079 for what room.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.CameraToy.VerticalConstraints">
            <summary>
            Gets or sets how high and low the camera can move from its initial rotation in degrees.
            </summary>
            <remarks>
            X should be less than or equal to y. e.g. <c>Vector2(-10, 30)</c> means you can look up 10 degrees and down 30.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.CameraToy.HorizontalConstraint">
            <summary>
            Gets or sets how left and right the camera can move from its initial rotation in degrees.
            </summary>
            <remarks>
            X should be less than or equal to y. e.g. <c>Vector2(-10, 30)</c> means you can look left 10 degrees and right 30.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.CameraToy.ZoomConstraints">
            <summary>
            Gets or set the min and max zoom level of the camera.
            </summary>
            <remarks>
            Values range from 0.0 to 1.0, with zero being the minimum zoom, and 1 being the maximum zoom.
            X should be less than or equal to y.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.CameraToy.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.CapybaraToy">
            <summary>
            Wrapper for the <see cref="T:AdminToys.CapybaraToy"/> class.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.CapybaraToy.Dictionary">
            <summary>
            Contains all the capybara toys, accessible through their <see cref="P:LabApi.Features.Wrappers.CapybaraToy.Base"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.CapybaraToy.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.CapybaraToy"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.CapybaraToy.Create(UnityEngine.Transform,System.Boolean)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.CapybaraToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.CapybaraToy.Create(UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.CapybaraToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.CapybaraToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform,System.Boolean)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.CapybaraToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.CapybaraToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)">
            <summary>
            Creates a new capybara toy.
            </summary>
            <param name="position">The initial local position.</param>
            <param name="rotation">The initial local rotation.</param>
            <param name="scale">The initial local scale.</param>
            <param name="parent">The parent transform.</param>
            <param name="networkSpawn">Whether to spawn the toy on the client.</param>
            <returns>The created capybara toy.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.CapybaraToy.Get(AdminToys.CapybaraToy)">
            <summary>
            Gets the capybara toy wrapper from the <see cref="P:LabApi.Features.Wrappers.CapybaraToy.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:AdminToys.CapybaraToy"/> was not <see langword="null"/>.
            </summary>
            <param name="baseCapybaraToy">The <see cref="P:LabApi.Features.Wrappers.CapybaraToy.Base"/> of the speaker toy.</param>
            <returns>The requested capybara toy or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.CapybaraToy.#ctor(AdminToys.CapybaraToy)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseCapybaraToy">The base <see cref="T:AdminToys.CapybaraToy"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.CapybaraToy.Base">
            <summary>
            The <see cref="T:AdminToys.CapybaraToy"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.CapybaraToy.CollidersEnabled">
            <summary>
            Gets or sets whether the capybara has enabled colliders.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.CapybaraToy.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.InteractableToy">
            <summary>
            Wrapper for the <see cref="T:AdminToys.InvisibleInteractableToy"/> class.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.InteractableToy.Dictionary">
            <summary>
            Contains all the interactable toys, accessible through their <see cref="P:LabApi.Features.Wrappers.InteractableToy.Base"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.InteractableToy.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.InteractableToy"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.InteractableToy.Create(UnityEngine.Transform,System.Boolean)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.InteractableToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.InteractableToy.Create(UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.InteractableToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.InteractableToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform,System.Boolean)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.InteractableToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.InteractableToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)">
            <summary>
            Creates a new interactable toy.
            </summary>
            <param name="position">The initial local position.</param>
            <param name="rotation">The initial local rotation.</param>
            <param name="scale">The initial local scale.</param>
            <param name="parent">The parent transform.</param>
            <param name="networkSpawn">Whether to spawn the toy on the client.</param>
            <returns>The created interactable toy.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.InteractableToy.Get(AdminToys.InvisibleInteractableToy)">
            <summary>
            Gets the interactable toy wrapper from the <see cref="P:LabApi.Features.Wrappers.InteractableToy.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:AdminToys.InvisibleInteractableToy"/> was not <see langword="null"/>.
            </summary>
            <param name="baseInteractableToy">The <see cref="P:LabApi.Features.Wrappers.InteractableToy.Base"/> of the interactable toy.</param>
            <returns>The requested interactable toy or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.InteractableToy.TryGet(AdminToys.InvisibleInteractableToy,LabApi.Features.Wrappers.InteractableToy@)">
            <summary>
            Tries to get the interactable toy wrapper from the <see cref="P:LabApi.Features.Wrappers.InteractableToy.Dictionary"/>.
            </summary>
            <param name="baseInteractableToy">The <see cref="P:LabApi.Features.Wrappers.InteractableToy.Base"/> of the interactable toy.</param>
            <param name="interactableToy">The requested interactable toy.</param>
            <returns>True if the interactable toy exists, otherwise false.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.InteractableToy.#ctor(AdminToys.InvisibleInteractableToy)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseInteractableToy">The base <see cref="T:AdminToys.InvisibleInteractableToy"/> object.</param>
        </member>
        <member name="E:LabApi.Features.Wrappers.InteractableToy.OnInteracted">
            <summary>
            Event called when a <see cref="T:LabApi.Features.Wrappers.Player"/> interacts with the toy.
            </summary>
        </member>
        <member name="E:LabApi.Features.Wrappers.InteractableToy.OnSearching">
            <summary>
            Event called when a <see cref="T:LabApi.Features.Wrappers.Player"/> initiates a search on the toy.
            </summary>
        </member>
        <member name="E:LabApi.Features.Wrappers.InteractableToy.OnSearched">
            <summary>
            Event called when a <see cref="T:LabApi.Features.Wrappers.Player"/> completes a search on the toy.
            </summary>
        </member>
        <member name="E:LabApi.Features.Wrappers.InteractableToy.OnSearchAborted">
            <summary>
            Event called when a <see cref="T:LabApi.Features.Wrappers.Player"/> aborts their search on the toy.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.InteractableToy.Base">
            <summary>
            The <see cref="T:AdminToys.InvisibleInteractableToy"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.InteractableToy.Shape">
            <summary>
            Gets or sets the shape of the collider used for interactions.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.InteractableToy.InteractionDuration">
            <summary>
            Gets or sets the interaction duration in seconds.
            </summary>
            <remarks>
            A value of 0 indicates that this toy is not searchable like a pickup and will only fire OnInteracted events.
            A value greater than 0 indicates that this toy is searchable like a pickup and will only fire OnSearch events.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.InteractableToy.IsLocked">
            <summary>
            Gets or sets whether a search can be started by the client.
            </summary>
            <remarks>
            If the toy is considered searchable see <see cref="P:LabApi.Features.Wrappers.InteractableToy.InteractionDuration"/>, this prevents a search from being initiated by the client if <see langword="true"/>.
            Useful if you want behaviour similar to pickups where only 1 player can search the toy at once.
            Note. Unlike pickups this property is not set automatically and by default is never used.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.InteractableToy.CanSearch">
            <summary>
            Gets whether the client can initiate a search based on the current state of the toy.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.InteractableToy.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.LightSourceToy">
            <summary>
            Wrapper for the <see cref="T:AdminToys.LightSourceToy"/> class.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LightSourceToy.Dictionary">
            <summary>
            Contains all the light source toys, accessible through their <see cref="P:LabApi.Features.Wrappers.LightSourceToy.Base"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LightSourceToy.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.LightSourceToy"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.LightSourceToy.Create(UnityEngine.Transform,System.Boolean)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.LightSourceToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.LightSourceToy.Create(UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.LightSourceToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.LightSourceToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform,System.Boolean)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.LightSourceToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.LightSourceToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)">
            <summary>
            Creates a new light source toy.
            </summary>
            <param name="position">The initial local position.</param>
            <param name="rotation">The initial local rotation.</param>
            <param name="scale">The initial local scale.</param>
            <param name="parent">The parent transform.</param>
            <param name="networkSpawn">Whether to spawn the toy on the client.</param>
            <returns>The created light source toy.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.LightSourceToy.Get(AdminToys.LightSourceToy)">
            <summary>
            Gets the light source toy wrapper from the <see cref="P:LabApi.Features.Wrappers.LightSourceToy.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:AdminToys.LightSourceToy"/> was not <see langword="null"/>.
            </summary>
            <param name="baseLightSourceToy">The <see cref="P:LabApi.Features.Wrappers.LightSourceToy.Base"/> of the light source toy.</param>
            <returns>The requested light source toy or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.LightSourceToy.TryGet(AdminToys.LightSourceToy,LabApi.Features.Wrappers.LightSourceToy@)">
            <summary>
            Tries to get the light source toy wrapper from the <see cref="P:LabApi.Features.Wrappers.LightSourceToy.Dictionary"/>.
            </summary>
            <param name="baseLightSourceToy">The <see cref="P:LabApi.Features.Wrappers.LightSourceToy.Base"/> of the light source toy.</param>
            <param name="lightSourceToy">The requested light source toy.</param>
            <returns><see langword="True"/> if the light toy exists, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.LightSourceToy.#ctor(AdminToys.LightSourceToy)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseLightSourceToy">The base <see cref="T:AdminToys.LightSourceToy"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.LightSourceToy.Base">
            <summary>
            The <see cref="T:AdminToys.LightSourceToy"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LightSourceToy.Intensity">
            <summary>
            Gets or sets the lights <see cref="P:UnityEngine.Light.intensity"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LightSourceToy.Range">
            <summary>
            Gets or sets the lights <see cref="P:UnityEngine.Light.range"/> in meters.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LightSourceToy.Color">
            <summary>
            Gets or sets the lights <see cref="P:UnityEngine.Light.color"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LightSourceToy.ShadowType">
            <summary>
            Gets or sets the lights <see cref="P:UnityEngine.Light.shadows"/> type.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LightSourceToy.ShadowStrength">
            <summary>
            Gets or sets the lights <see cref="P:UnityEngine.Light.shadowStrength"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LightSourceToy.Type">
            <summary>
            Gets or sets the lights <see cref="P:UnityEngine.Light.type"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LightSourceToy.Shape">
            <summary>
            Gets or sets the lights <see cref="P:UnityEngine.Light.shape"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LightSourceToy.SpotAngle">
            <summary>
            Gets or sets the lights <see cref="P:UnityEngine.Light.spotAngle"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LightSourceToy.InnerSpotAngle">
            <summary>
            Gets or sets the lights <see cref="P:UnityEngine.Light.innerSpotAngle"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.LightSourceToy.ToString">
            <inheritdoc />
        </member>
        <member name="M:LabApi.Features.Wrappers.LightSourceToy.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.PrimitiveObjectToy">
            <summary>
            Wrapper for the <see cref="T:AdminToys.PrimitiveObjectToy"/> class.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PrimitiveObjectToy.Dictionary">
            <summary>
            Contains all the primitive object toys, accessible through their <see cref="P:LabApi.Features.Wrappers.PrimitiveObjectToy.Base"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PrimitiveObjectToy.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.PrimitiveObjectToy"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.PrimitiveObjectToy.Create(UnityEngine.Transform,System.Boolean)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.PrimitiveObjectToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.PrimitiveObjectToy.Create(UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.PrimitiveObjectToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.PrimitiveObjectToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform,System.Boolean)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.PrimitiveObjectToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.PrimitiveObjectToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)">
            <summary>
            Creates a new primitive object toy.
            </summary>
            <param name="position">The initial local position.</param>
            <param name="rotation">The initial local rotation.</param>
            <param name="scale">The initial local scale.</param>
            <param name="parent">The parent transform.</param>
            <param name="networkSpawn">Whether to spawn the toy on the client.</param>
            <returns>The created primitive object toy.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.PrimitiveObjectToy.Get(AdminToys.PrimitiveObjectToy)">
            <summary>
            Gets the primitive object toy wrapper from the <see cref="P:LabApi.Features.Wrappers.PrimitiveObjectToy.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:AdminToys.PrimitiveObjectToy"/> was not <see langword="null"/>.
            </summary>
            <param name="primitiveObjectToy">The <see cref="P:LabApi.Features.Wrappers.PrimitiveObjectToy.Base"/> of the primitive object toy.</param>
            <returns>The requested primitive object toy or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.PrimitiveObjectToy.TryGet(AdminToys.PrimitiveObjectToy,LabApi.Features.Wrappers.PrimitiveObjectToy@)">
            <summary>
            Tries to get the primitive object toy wrapper from the <see cref="P:LabApi.Features.Wrappers.PrimitiveObjectToy.Dictionary"/>.
            </summary>
            <param name="basePrimitiveObjectToy">The <see cref="P:LabApi.Features.Wrappers.PrimitiveObjectToy.Base"/> of the primitive object toy.</param>
            <param name="primitiveObjectToy">The requested primitive object toy.</param>
            <returns><see langword="True"/> if the primitive object exists, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.PrimitiveObjectToy.#ctor(AdminToys.PrimitiveObjectToy)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="basePrimitiveObjectToy">The base <see cref="T:AdminToys.PrimitiveObjectToy"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.PrimitiveObjectToy.Base">
            <summary>
            The <see cref="T:AdminToys.PrimitiveObjectToy"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PrimitiveObjectToy.Type">
            <summary>
            Gets or sets the <see cref="T:UnityEngine.PrimitiveType"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PrimitiveObjectToy.Color">
            <summary>
            Gets or sets the material <see cref="T:UnityEngine.Color"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PrimitiveObjectToy.Flags">
            <summary>
            Gets or sets the <see cref="T:AdminToys.PrimitiveFlags"/>.
            </summary>
            <remarks>
            Setting flags to <see cref="F:AdminToys.PrimitiveFlags.None"/> is similar to having an empty object which is useful as a root object other toys parent to.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.PrimitiveObjectToy.ToString">
            <inheritdoc />
        </member>
        <member name="M:LabApi.Features.Wrappers.PrimitiveObjectToy.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.ShootingTargetToy">
            <summary>
            Wrapper for the <see cref="T:AdminToys.ShootingTarget"/> class.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ShootingTargetToy.Dictionary">
            <summary>
            Contains all the shooting target toys, accessible through their <see cref="P:LabApi.Features.Wrappers.ShootingTargetToy.Base"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ShootingTargetToy.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.ShootingTargetToy"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.ShootingTargetToy.Create(UnityEngine.Transform,System.Boolean)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.ShootingTargetToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.ShootingTargetToy.Create(UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.ShootingTargetToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.ShootingTargetToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform,System.Boolean)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.ShootingTargetToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.ShootingTargetToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)">
            <summary>
            Creates a new shooting target toy.
            </summary>
            <param name="position">The initial local position.</param>
            <param name="rotation">The initial local rotation.</param>
            <param name="scale">The initial local scale.</param>
            <param name="parent">The parent transform.</param>
            <param name="networkSpawn">Whether to spawn the toy on the client.</param>
            <returns>The created shooting target toy.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.ShootingTargetToy.Get(AdminToys.ShootingTarget)">
            <summary>
            Gets the shooting target toy wrapper from the <see cref="P:LabApi.Features.Wrappers.ShootingTargetToy.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:AdminToys.ShootingTarget"/> was not <see langword="null"/>.
            </summary>
            <param name="shootingTarget">The <see cref="P:LabApi.Features.Wrappers.ShootingTargetToy.Base"/> of the shooting target toy.</param>
            <returns>The requested shooting target toy or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.ShootingTargetToy.TryGet(AdminToys.ShootingTarget,LabApi.Features.Wrappers.ShootingTargetToy@)">
            <summary>
            Tries to get the shooting target toy wrapper from the <see cref="P:LabApi.Features.Wrappers.ShootingTargetToy.Dictionary"/>.
            </summary>
            <param name="shootingTarget">The <see cref="P:LabApi.Features.Wrappers.ShootingTargetToy.Base"/> of the shooting target toy.</param>
            <param name="shootingTargetToy">The requested shooting target toy.</param>
            <returns><see langword="True"/> if the shooting target exists, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.ShootingTargetToy.#ctor(AdminToys.ShootingTarget)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="shootingTarget">The base <see cref="T:AdminToys.ShootingTarget"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.ShootingTargetToy.Base">
            <summary>
            The <see cref="T:AdminToys.ShootingTarget"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ShootingTargetToy.IsGlobal">
            <summary>
            Gets or sets whether other players can see your interactions.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.ShootingTargetToy.ToString">
            <inheritdoc />
        </member>
        <member name="M:LabApi.Features.Wrappers.ShootingTargetToy.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.SpawnableCullingParent">
            <summary>
            Wrapper for <see cref="T:AdminToys.SpawnableCullingParent"/>.<br/>
            Cullable item that deactivates itself when not being looked at.
            Can contain children admin toys to cull them.
            </summary>
            <remarks>
            This class is <b>not</b> subclass of <see cref="T:LabApi.Features.Wrappers.AdminToy"/>.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpawnableCullingParent.Dictionary">
            <summary>
            Contains all the cached spawnable culling parents, accessible through their <see cref="P:LabApi.Features.Wrappers.SpawnableCullingParent.Base"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpawnableCullingParent.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.SpawnableCullingParent"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.SpawnableCullingParent.Create(UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Instantiates a new culling parent object.
            </summary>
            <param name="position">The initial position.</param>
            <param name="size">The bounds size.</param>
            <param name="networkSpawn">Whether should the game object spawn over network.</param>
            <returns>The instantiated culling parent.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.SpawnableCullingParent.Get(AdminToys.SpawnableCullingParent)">
            <summary>
            Gets the cullable parent wrapper from the <see cref="P:LabApi.Features.Wrappers.SpawnableCullingParent.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:AdminToys.AdminToyBase"/> was not <see langword="null"/>.
            </summary>
            <param name="cullingBase">The <see cref="P:LabApi.Features.Wrappers.SpawnableCullingParent.Base"/> of the cullable parent.</param>
            <returns>The requested culling parent or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.SpawnableCullingParent.TryGet(AdminToys.SpawnableCullingParent,LabApi.Features.Wrappers.SpawnableCullingParent@)">
            <summary>
            Tries to get the culling parent wrapper from the <see cref="P:LabApi.Features.Wrappers.SpawnableCullingParent.Dictionary"/>.
            </summary>
            <param name="adminToyBase">The <see cref="P:LabApi.Features.Wrappers.SpawnableCullingParent.Base"/> of the cullable parent.</param>
            <param name="adminToy">The requested culling parent.</param>
            <returns><see langword="True"/> if the culling parent exists, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.SpawnableCullingParent.Initialize">
            <summary>
            Initializes the <see cref="T:LabApi.Features.Wrappers.SpawnableCullingParent"/> class.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.SpawnableCullingParent.AddCullableParent(AdminToys.SpawnableCullingParent)">
            <summary>
            A private method to handle the creation of new cullable parents on the server.
            </summary>
            <param name="cullableParent">The created <see cref="T:AdminToys.SpawnableCullingParent"/> instance.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.SpawnableCullingParent.RemoveCullableParent(AdminToys.SpawnableCullingParent)">
            <summary>
            A private method to handle the removal of cullable parents from the server.
            </summary>
            <param name="cullableParent">The to be destroyed <see cref="T:AdminToys.SpawnableCullingParent"/> instance.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.SpawnableCullingParent.#ctor(AdminToys.SpawnableCullingParent)">
            <summary>
            A protected constructor to prevent external instantiation.
            </summary>
            <param name="cullingBase">The base object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpawnableCullingParent.Base">
            <summary>
            The <see cref="T:AdminToys.SpawnableCullingParent">base</see> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpawnableCullingParent.GameObject">
            <summary>
            The <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpawnableCullingParent.Transform">
            <summary>
            The culling parent's <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpawnableCullingParent.IsDestroyed">
            <summary>
            Whether the <see cref="P:LabApi.Features.Wrappers.SpawnableCullingParent.Base"/> was destroyed.
            </summary>
            <remarks>
            A destroyed object may not be used.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpawnableCullingParent.Position">
            <summary>
            Gets or sets the position of the culling parent.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpawnableCullingParent.Size">
            <summary>
            Gets or sets the culling bound size of the culling parent.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.SpawnableCullingParent.Spawn">
            <summary>
            Spawns the culling parent on client.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.SpawnableCullingParent.Destroy">
            <summary>
            Destroys the culling parent on server and client.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.SpeakerToy">
            <summary>
            Wrapper for the <see cref="T:AdminToys.SpeakerToy"/> class.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpeakerToy.Dictionary">
            <summary>
            Contains all the speaker toys, accessible through their <see cref="P:LabApi.Features.Wrappers.SpeakerToy.Base"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpeakerToy.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.SpeakerToy"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.SpeakerToy.Play(System.Byte,System.Single[],System.Boolean,System.Boolean)">
            <summary>
            Plays the PCM samples on the current controller.
            </summary>
            <remarks>
            Samples are played at a sample rate of <see cref="F:LabApi.Features.Audio.AudioTransmitter.SampleRate"/>, mono channel (non interleaved data) with ranges from -1.0f to 1.0f.
            </remarks>
            <param name="controllerId">The Id of the controller to play audio on.</param>
            <param name="samples">The PCM samples.</param>
            <param name="queue">Whether to queue the audio if audio is already playing, otherwise overrides the current audio.</param>
            <param name="loop">
            Whether to loop this clip.
            Loop ends if another clip is played either immediately if not queued or at the end of the loop if next clip was queued.
            </param>
        </member>
        <member name="M:LabApi.Features.Wrappers.SpeakerToy.Pause(System.Byte)">
            <inheritdoc cref="M:LabApi.Features.Audio.AudioTransmitter.Pause"/>
            <param name="controllerId">The Id of the controller to play audio on.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.SpeakerToy.Resume(System.Byte)">
            <inheritdoc cref="M:LabApi.Features.Audio.AudioTransmitter.Resume"/>
            <param name="controllerId">The Id of the controller to play audio on.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.SpeakerToy.Skip(System.Byte,System.Int32)">
            <summary>
            Skips the current or queued clips.
            Includes the current clip.
            </summary>
            <param name="controllerId">The Id of the controller to play audio on.</param>
            <param name="count">The number of queued audios clips to skip.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.SpeakerToy.Stop(System.Byte)">
            <inheritdoc cref="M:LabApi.Features.Audio.AudioTransmitter.Stop"/>
            <param name="controllerId">The Id of the controller to play audio on.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.SpeakerToy.Create(UnityEngine.Transform,System.Boolean)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.SpeakerToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.SpeakerToy.Create(UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.SpeakerToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.SpeakerToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform,System.Boolean)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.SpeakerToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.SpeakerToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)">
            <summary>
            Creates a new speaker toy.
            </summary>
            <param name="position">The initial local position.</param>
            <param name="rotation">The initial local rotation.</param>
            <param name="scale">The initial local scale.</param>
            <param name="parent">The parent transform.</param>
            <param name="networkSpawn">Whether to spawn the toy on the client.</param>
            <returns>The created speaker toy.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.SpeakerToy.Get(AdminToys.SpeakerToy)">
            <summary>
            Gets the speaker toy wrapper from the <see cref="P:LabApi.Features.Wrappers.SpeakerToy.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:AdminToys.SpeakerToy"/> was not <see langword="null"/>.
            </summary>
            <param name="baseSpeakerToy">The <see cref="P:LabApi.Features.Wrappers.SpeakerToy.Base"/> of the speaker toy.</param>
            <returns>The requested speaker toy or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.SpeakerToy.TryGet(AdminToys.SpeakerToy,LabApi.Features.Wrappers.SpeakerToy@)">
            <summary>
            Tries to get the speaker toy wrapper from the <see cref="P:LabApi.Features.Wrappers.SpeakerToy.Dictionary"/>.
            </summary>
            <param name="baseSpeakerToy">The <see cref="P:LabApi.Features.Wrappers.SpeakerToy.Base"/> of the speaker toy.</param>
            <param name="speakerToy">The requested speaker toy.</param>
            <returns><see langword="True"/> if the speaker exists, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.SpeakerToy.GetTransmitter(System.Byte)">
            <summary>
            Gets the <see cref="T:LabApi.Features.Audio.AudioTransmitter"/> for the <see cref="P:LabApi.Features.Wrappers.SpeakerToy.ControllerId"/>.
            If one does not exists, a new one is created for the id.
            </summary>
            <param name="controllerId">The <see cref="P:LabApi.Features.Wrappers.SpeakerToy.ControllerId"/> for the transmitter.</param>
            <returns>Cached transmitter.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.SpeakerToy.#ctor(AdminToys.SpeakerToy)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseSpeakerToy">The base <see cref="T:AdminToys.SpeakerToy"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpeakerToy.Base">
            <summary>
            The <see cref="T:AdminToys.SpeakerToy"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpeakerToy.ControllerId">
            <summary>
            Gets or sets which audio controller to use for playback based on the id.
            </summary>
            <remarks>
            Multiple speakers can have the same controller id allowing them to emit the same audio.
            Calling either <see cref="M:LabApi.Features.Wrappers.SpeakerToy.Play(System.Single[],System.Boolean,System.Boolean)"/> on one of the instances or using the static method <see cref="M:LabApi.Features.Wrappers.SpeakerToy.Play(System.Byte,System.Single[],System.Boolean,System.Boolean)"/> will play on all of them.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpeakerToy.IsSpatial">
            <summary>
            Gets or sets whether the sound is 3D.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpeakerToy.Volume">
            <summary>
            Gets or sets the volume of the speaker.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpeakerToy.MinDistance">
            <summary>
            Gets or sets the distance where the audio starts to fall off.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpeakerToy.MaxDistance">
            <summary>
            Gets or sets the distance where the audio falls off to zero.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpeakerToy.CurrentPosition">
            <summary>
            Gets or sets the current sample position of the playback head.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpeakerToy.IsLooping">
            <summary>
            Gets or sets whether the last clip in the queue will loop.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpeakerToy.IsPlaying">
            <inheritdoc cref="P:LabApi.Features.Audio.AudioTransmitter.IsPlaying"/>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpeakerToy.IsPaused">
            <inheritdoc cref="P:LabApi.Features.Audio.AudioTransmitter.IsPaused"/>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpeakerToy.CurrentSampleCount">
            <summary>
            Number of samples in the current audio clip.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpeakerToy.CurrentDuration">
            <summary>
            Duration in seconds of the current audio clip.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpeakerToy.CurrentRemainingSampleCount">
            <summary>
            Number of samples left to play in the current audio clip.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpeakerToy.CurrentRemainingDuration">
            <summary>
            Duration in seconds left to play in the current audio clip.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpeakerToy.QueuedClipsCount">
            <summary>
            Number of queued audio clips.
            Does not include the current clip.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpeakerToy.QueuedClipsSampleCount">
            <summary>
            Number of samples of all queued clips.
            Does not include the current clip.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpeakerToy.QueuedClipsDuration">
            <summary>
            Duration in seconds of all queued clips.
            Does not include the current clip.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpeakerToy.ValidPlayers">
            <summary>
            Gets or sets the predicate for determining which players to send audio to.
            If <see langword="null"/> audio will be sent to all authenticated players.
            </summary>
            <remarks>
            Is called on all authenticated players for each audio message that is sent out.
            Multiple audio messages can be sent per frame so this may be called 100s of times per frame.
            Try to make the check as fast as possible otherwise the performance of the server will be significantly effected.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.SpeakerToy.Transmitter">
            <summary>
            Gets the audio transmitter for this speakers <see cref="P:LabApi.Features.Wrappers.SpeakerToy.ControllerId"/>.
            </summary>
            <remarks>
            Speakers can share <see cref="T:LabApi.Features.Audio.AudioTransmitter"/> instances if they have the same <see cref="P:LabApi.Features.Wrappers.SpeakerToy.ControllerId"/>.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.SpeakerToy.Play(System.Single[],System.Boolean,System.Boolean)">
            <inheritdoc cref="M:LabApi.Features.Audio.AudioTransmitter.Play(System.Single[],System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.SpeakerToy.Pause">
            <inheritdoc cref="M:LabApi.Features.Audio.AudioTransmitter.Pause"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.SpeakerToy.Resume">
            <inheritdoc cref="M:LabApi.Features.Audio.AudioTransmitter.Resume"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.SpeakerToy.Skip(System.Int32)">
            <inheritdoc cref="M:LabApi.Features.Audio.AudioTransmitter.Skip(System.Int32)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.SpeakerToy.Stop">
            <inheritdoc cref="M:LabApi.Features.Audio.AudioTransmitter.Stop"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.SpeakerToy.ToString">
            <inheritdoc />
        </member>
        <member name="M:LabApi.Features.Wrappers.SpeakerToy.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.TextToy">
            <summary>
            The wrapper for the <see cref="T:AdminToys.TextToy"/> class. <br/>
            Toy with changeable text and formatting arguments.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.TextToy.Dictionary">
            <summary>
            Contains all the text toys, accessible through their <see cref="P:LabApi.Features.Wrappers.TextToy.Base"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.TextToy.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.TextToy"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.TextToy.Create(UnityEngine.Transform,System.Boolean)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.TextToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.TextToy.Create(UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.TextToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.TextToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform,System.Boolean)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.TextToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.TextToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)">
            <summary>
            Creates a new text toy.
            </summary>
            <param name="position">The initial local position.</param>
            <param name="rotation">The initial local rotation.</param>
            <param name="scale">The initial local scale.</param>
            <param name="parent">The parent transform.</param>
            <param name="networkSpawn">Whether to spawn the toy on the client.</param>
            <returns>The created text toy.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.TextToy.Get(AdminToys.TextToy)">
            <summary>
            Gets the text toy wrapper from the <see cref="P:LabApi.Features.Wrappers.TextToy.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:AdminToys.TextToy"/> was not <see langword="null"/>.
            </summary>
            <param name="baseTextToy">The <see cref="P:LabApi.Features.Wrappers.TextToy.Base"/> of the text toy.</param>
            <returns>The requested text toy or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.TextToy.TryGet(AdminToys.TextToy,LabApi.Features.Wrappers.TextToy@)">
            <summary>
            Tries to get the text toy wrapper from the <see cref="P:LabApi.Features.Wrappers.TextToy.Dictionary"/>.
            </summary>
            <param name="baseTextToy">The <see cref="P:LabApi.Features.Wrappers.TextToy.Base"/> of the text toy.</param>
            <param name="textToy">The requested text toy.</param>
            <returns><see langword="True"/> if the text toy exists, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.TextToy.#ctor(AdminToys.TextToy)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseToy">The base <see cref="T:AdminToys.TextToy"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.TextToy.Base">
            <summary>
            The <see cref="T:AdminToys.TextToy"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.TextToy.TextFormat">
            <summary>
            Gets or sets the base text format used when formatting the final text string.<br/>
            Text can be formatted and arguments are replaced with <see cref="P:LabApi.Features.Wrappers.TextToy.Arguments"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.TextToy.DisplaySize">
            <summary>
            Gets or sets the size of text display used by TMP.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.TextToy.Arguments">
            <summary>
            Gets the arguments used while formatting the <see cref="P:LabApi.Features.Wrappers.TextToy.TextFormat"/>.<br/>
            Missing arguments for <see cref="P:LabApi.Features.Wrappers.TextToy.TextFormat"/> are not replaced and any extra arguments are ignored.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.TextToy.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.WaypointToy">
            <summary>
            Wrapper for the <see cref="T:AdminToys.WaypointToy"/> class.
            </summary>
        </member>
        <member name="F:LabApi.Features.Wrappers.WaypointToy.MaxBounds">
            <summary>
            Max distance in meters a waypoint can encapsulate along any dimension.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.WaypointToy.Dictionary">
            <summary>
            Contains all the waypoint toys, accessible through their <see cref="P:LabApi.Features.Wrappers.WaypointToy.Base"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.WaypointToy.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.WaypointToy"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.WaypointToy.Create(UnityEngine.Transform,System.Boolean)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.WaypointToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.WaypointToy.Create(UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.WaypointToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.WaypointToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform,System.Boolean)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.WaypointToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.WaypointToy.Create(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)">
            <summary>
            Creates a new waypoint toy.
            </summary>
            <param name="position">The initial local position.</param>
            <param name="rotation">The initial local rotation.</param>
            <param name="scale">The initial local scale.</param>
            <param name="parent">The parent transform.</param>
            <param name="networkSpawn">Whether to spawn the toy on the client.</param>
            <returns>The created waypoint toy.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.WaypointToy.Get(AdminToys.WaypointToy)">
            <summary>
            Gets the waypoint toy wrapper from the <see cref="P:LabApi.Features.Wrappers.WaypointToy.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:AdminToys.WaypointToy"/> was not <see langword="null"/>.
            </summary>
            <param name="baseWaypointToy">The <see cref="P:LabApi.Features.Wrappers.WaypointToy.Base"/> of the waypoint toy.</param>
            <returns>The requested waypoint toy or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.WaypointToy.TryGet(AdminToys.WaypointToy,LabApi.Features.Wrappers.WaypointToy@)">
            <summary>
            Tries to get the waypoint toy wrapper from the <see cref="P:LabApi.Features.Wrappers.WaypointToy.Dictionary"/>.
            </summary>
            <param name="baseWaypointToy">The <see cref="P:LabApi.Features.Wrappers.WaypointToy.Base"/> of the waypoint toy.</param>
            <param name="waypointToy">The requested waypoint toy.</param>
            <returns><see langword="True"/> if the waypoint exists, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.WaypointToy.#ctor(AdminToys.WaypointToy)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseWaypointToy">The base <see cref="T:AdminToys.WaypointToy"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.WaypointToy.Base">
            <summary>
            The <see cref="T:AdminToys.WaypointToy"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.WaypointToy.Position">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Features.Wrappers.WaypointToy.Rotation">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Features.Wrappers.WaypointToy.Scale">
            <summary>
            Gets or sets the scale on the waypoint toy.
            Does not effect the bounds of the waypoint, use <see cref="P:LabApi.Features.Wrappers.WaypointToy.BoundsSize"/> instead.
            </summary>
            <remarks>
            Scale can cause unindented side effects when used on a waypoint toy.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.WaypointToy.BoundsSize">
            <summary>
            Bounds the waypoint encapsulates along each dimension in meters.
            Bounds is effected by position and rotation of the GameObject but not its scale.
            Must not exceed <c>Vector3.one * MaxBounds</c>.
            </summary>
            <remarks>
            When <see cref="P:LabApi.Features.Wrappers.AdminToy.IsStatic"/> is <see langword="true"/> rotation and <see cref="P:LabApi.Features.Wrappers.WaypointToy.BoundsSize"/> is not used, instead the bounds is axis aligned and its size is fixed at <see cref="F:LabApi.Features.Wrappers.WaypointToy.MaxBounds"/>.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.WaypointToy.VisualizeBounds">
            <summary>
            Gets or sets whether to visualize the waypoint's maximum bounds.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.WaypointToy.PriorityBias">
            <summary>
            Gets or sets how many meters to bias towards this waypoint.
            </summary>
            <remarks>
            The closest waypoint is determined by its square distance.
            When set this takes away <c>(Priority * Priority)</c> from the sqr distance.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.WaypointToy.UpdateWaypointChildren">
            <summary>
            Force update all waypoint children to be up to date with the current position and rotation of the waypoint.
            Call this when ever the waypoint is moved by a parent object or the waypoint is moved using base game APIs or external APIs.
            </summary>
            <remarks>
            Does not work if the waypoint is <see cref="P:LabApi.Features.Wrappers.AdminToy.IsStatic"/>.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.WaypointToy.ToString">
            <inheritdoc />
        </member>
        <member name="M:LabApi.Features.Wrappers.WaypointToy.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Cassie">
            <summary>
            The wrapper for in game CASSIE announcer.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Cassie.IsSpeaking">
            <summary>
            Gets whether CASSIE is currently speaking.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Cassie.AllLines">
            <summary>
            Gets all available voice lines for CASSIE.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Cassie.CollectionNames">
            <summary>
            Gets all collection names in which voice lines are in.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Cassie.IsValid(System.String)">
            <summary>
            Checks whether a specified word is valid for CASSIE.
            <note>String comparison is case-insensitive.</note>
            </summary>
            <param name="word">The word to check.</param>
            <returns>Whether the word is valid.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Cassie.CalculateDuration(System.String,System.Boolean,System.Single)">
            <summary>
            Calculates duration of specific message.
            </summary>
            <param name="message">The message.</param>
            <param name="rawNumber">Raw numbers.</param>
            <param name="speed">The speed of the cassie talking.</param>
            <returns>Duration of the specific message in seconds.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Cassie.Message(System.String,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Plays a custom announcement.
            </summary>
            <param name="message">The sentence CASSIE is supposed to say.</param>
            <param name="isHeld">Sets a minimal 3-second moment of silence before the announcement. For most cases you wanna keep it true.</param>
            <param name="isNoisy">Whether the background noises play.</param>
            <param name="isSubtitles">Show subtitles.</param>
            <param name="customSubtitles">Custom subtitles to appear instead of the actual message.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Cassie.GlitchyMessage(System.String,System.Single,System.Single)">
            <summary>
            Plays the custom announcement with chance of 0f to 1f of adding a glitch or jam before each word. Values closer to 1f are higher chances.
            </summary>
            <param name="message">The sentence CASSIE is supposed to say.</param>
            <param name="glitchChance">The chance for glitch sound to be added before each word. Range from 0f to 1f.</param>
            <param name="jamChance">The chance for jam sound to be added before each word. Range from 0f to 1f.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Cassie.ScpTermination(LabApi.Features.Wrappers.Player,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Plays the termination announcement of a SCP player. If the specified player does not have an SCP role then nothing is played.
            </summary>
            <param name="player">The player who is being terminated as an SCP.</param>
            <param name="info">Damage handler causing the death of the player.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Cassie.Clear">
            <summary>
            Clears the CASSIE announcements queue.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Cassie.ConvertTeam(PlayerRoles.Team,System.String)">
            <summary>
            Converts player's team into CASSIE-able word. Unit names are converted into NATO_X words, followed by a number. For example "Alpha-5" is converted to "NATO_A 5".
            </summary>
            <param name="team">Target team.</param>
            <param name="unitName">MTF Unit name (for team <see cref="F:PlayerRoles.Team.FoundationForces"/>).</param>
            <returns>Converted name.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Cassie.ConvertNumber(System.Int32)">
            <summary>
            Converts number into string.
            </summary>
            <param name="num">The number.</param>
            <returns>Number converted to string.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Cassie.ConvertScp(PlayerRoles.RoleTypeId,System.String@,System.String@)">
            <summary>
            Converts player's <see cref="T:PlayerRoles.RoleTypeId"/> into an SCP <b>number</b> identifier.
            </summary>
            <param name="role">The target <see cref="T:PlayerRoles.RoleTypeId"/>.</param>
            <param name="withoutSpace">The SCP number without spaces between. Used by CASSIE.</param>
            <param name="withSpace">The SCP number with spaces between. Used by Subtitles.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Cassie.ConvertScp(System.String,System.String@,System.String@)">
            <summary>
            Converts player's role name into an SCP <b>number</b> identifier.
            </summary>
            <param name="roleName">The targets role name.</param>
            <param name="withoutSpace">The SCP number without spaces between. Used by CASSIE.</param>
            <param name="withSpace">The SCP number with spaces between. Used by Subtitles.</param>
        </member>
        <member name="T:LabApi.Features.Wrappers.Decontamination">
            <summary>
            Static wrapper for LCZ decontamination.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Decontamination.Status">
            <summary>
            Gets or sets the decontamination status.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Decontamination.IsDecontaminating">
            <summary>
            Gets whether the LCZ is currently being decontaminated.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Decontamination.ServerTime">
            <summary>
            Gets the current server time since round has started plus the <see cref="P:LabApi.Features.Wrappers.Decontamination.Offset"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Decontamination.RoundStartTime">
            <summary>
            Gets the network time at which round has started. Value of -1 means the round hasnt started yet.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Decontamination.Offset">
            <summary>
            Gets or sets the offset of the decontamination timer in seconds.
            Positive values decrease the timer and negative extend it.<br/>
            Setting the offset will ignore any decontamination announcements for clients for 1 second.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Decontamination.ElevatorsText">
            <summary>
            Gets or sets the text of the wall elevator display in HCZ part of the elevators.
            Setting this to <see cref="F:System.String.Empty"/> or <see langword="null"/> will reset both texts to the default one.
            </summary>s
        </member>
        <member name="T:LabApi.Features.Wrappers.BreakableDoor">
            <summary>
            The wrapper representing the <see cref="T:Interactables.Interobjects.BreakableDoor"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.BreakableDoor.Dictionary">
            <summary>
            Contains all the cached <see cref="T:LabApi.Features.Wrappers.BreakableDoor"/> instances, accessible through their <see cref="T:Interactables.Interobjects.BreakableDoor"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.BreakableDoor.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.BreakableDoor"/> instances currently in the game.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.BreakableDoor.Get(Interactables.Interobjects.BreakableDoor)">
            <summary>
            Gets the <see cref="T:LabApi.Features.Wrappers.BreakableDoor"/> wrapper from the <see cref="P:LabApi.Features.Wrappers.BreakableDoor.Dictionary"/>, or creates a new one if it doesn't exist.
            </summary>
            <param name="baseBreakableDoor">The <see cref="T:Interactables.Interobjects.BreakableDoor"/> of the door.</param>
            <returns>The requested door wrapper or null if the input was null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.BreakableDoor.#ctor(Interactables.Interobjects.BreakableDoor)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseBreakableDoor">The base <see cref="T:Interactables.Interobjects.BreakableDoor"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.BreakableDoor.Base">
            <summary>
            The base <see cref="T:Interactables.Interobjects.BreakableDoor"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.BreakableDoor.Is106Passable">
            <summary>
            Gets or sets whether SCP-106 can pass through the door when it's not closed and locked.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.BreakableDoor.MaxHealth">
            <summary>
            Gets or sets the max health used when spawning.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.BreakableDoor.Health">
            <summary>
            Gets or sets the remaining health of the door.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.BreakableDoor.IsBroken">
            <summary>
            Gets or sets whether the door is broken.
            </summary>
            <remarks>
            Some doors can not be unbroken.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.BreakableDoor.IgnoreDamageSources">
            <summary>
            Gets or sets the <see cref="T:Interactables.Interobjects.DoorUtils.DoorDamageType"/> to block from taking health away from the door.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.BreakableDoor.TryDamage(System.Single,Interactables.Interobjects.DoorUtils.DoorDamageType)">
            <summary>
            Damage the door by specified amount.
            </summary>
            <param name="damage">The amount of damage to apply.</param>
            <param name="type">The <see cref="T:Interactables.Interobjects.DoorUtils.DoorDamageType"/> to apply.</param>
            <returns>True if the doors took damage, otherwise false.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.BreakableDoor.TryBreak(Interactables.Interobjects.DoorUtils.DoorDamageType)">
            <summary>
            Break the door.
            </summary>
            <param name="type">The <see cref="T:Interactables.Interobjects.DoorUtils.DoorDamageType"/> to apply.</param>
            <returns>True if the doors took damage, otherwise false.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.BreakableDoor.TryRepair">
            <summary>
            Tries to repair the door.
            <remarks>Sets the doors health back to <see cref="P:LabApi.Features.Wrappers.BreakableDoor.MaxHealth"/> if the door is broken otherwise it does nothing.</remarks>
            </summary>
            <returns>True if the door was repaired, otherwise false.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.BreakableDoor.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.BulkheadDoor">
            <summary>
            The wrapper representing the <see cref="T:Interactables.Interobjects.PryableDoor"/> used for the bulkhead prefab instance.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.BulkheadDoor.Dictionary">
            <summary>
            Contains all the cached <see cref="T:LabApi.Features.Wrappers.BulkheadDoor"/> instances, accessible through their <see cref="T:Interactables.Interobjects.PryableDoor"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.BulkheadDoor.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.BulkheadDoor"/> instances currently in the game.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.BulkheadDoor.Get(Interactables.Interobjects.PryableDoor)">
            <summary>
            Gets the <see cref="T:LabApi.Features.Wrappers.BulkheadDoor"/> wrapper from the <see cref="P:LabApi.Features.Wrappers.BulkheadDoor.Dictionary"/>, or creates a new one if it doesn't exist.
            </summary>
            <param name="pryableDoor">The <see cref="T:Interactables.Interobjects.PryableDoor"/> of the door.</param>
            <returns>The requested door wrapper or null if the input was null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.BulkheadDoor.#ctor(Interactables.Interobjects.PryableDoor)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="pryableDoor">The base <see cref="T:Interactables.Interobjects.PryableDoor"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.BulkheadDoor.Base">
            <summary>
            The base <see cref="T:Interactables.Interobjects.PryableDoor"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.BulkheadDoor.Crusher">
            <summary>
            The base <see cref="T:Interactables.Interobjects.DoorUtils.DoorCrusherExtension"/> component.
            </summary>
            <remarks>
            Can be null if bulkhead door crushing was disabled in the config.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.BulkheadDoor.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.CheckpointDoor">
            <summary>
            The wrapper representing the <see cref="T:Interactables.Interobjects.CheckpointDoor"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.CheckpointDoor.Dictionary">
            <summary>
            Contains all the cached <see cref="T:LabApi.Features.Wrappers.CheckpointDoor"/> instances, accessible through their <see cref="T:Interactables.Interobjects.CheckpointDoor"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.CheckpointDoor.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.CheckpointDoor"/> instances currently in the game.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.CheckpointDoor.Get(Interactables.Interobjects.CheckpointDoor)">
            <summary>
            Gets the <see cref="T:LabApi.Features.Wrappers.CheckpointDoor"/> wrapper from the <see cref="P:LabApi.Features.Wrappers.CheckpointDoor.Dictionary"/>, or creates a new one if it doesn't exist.
            </summary>
            <param name="baseCheckpointDoor">The <see cref="T:Interactables.Interobjects.CheckpointDoor"/> of the door.</param>
            <returns>The requested door wrapper or null if the input was null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.CheckpointDoor.#ctor(Interactables.Interobjects.CheckpointDoor)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseCheckpointDoor">The base <see cref="T:Interactables.Interobjects.CheckpointDoor"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.CheckpointDoor.Base">
            <summary>
            The base <see cref="T:Interactables.Interobjects.CheckpointDoor"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.CheckpointDoor.SequenceController">
            <summary>
            The base <see cref="T:Interactables.Interobjects.CheckpointSequenceController"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.CheckpointDoor.SubDoors">
            <summary>
            All <see cref="T:LabApi.Features.Wrappers.Door"/> instances operated by this checkpoint.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.CheckpointDoor.IsSubOpened">
            <summary>
            Gets or sets whether all the sub doors are open.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.CheckpointDoor.IsBroken">
            <summary>
            Gets or sets whether the doors are broken.
            </summary>
            <remarks>
            Some doors can not be unbroken.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.CheckpointDoor.MaxHealth">
            <summary>
            Gets or sets the max health on damageable sub doors used when spawning.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.CheckpointDoor.Health">
            <summary>
            Gets or sets the remaining health on damageable sub door.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.CheckpointDoor.SequenceState">
            <summary>
            Gets or sets the current <see cref="T:Interactables.Interobjects.CheckpointDoor.SequenceState"/> of the checkpoint door.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.CheckpointDoor.OpenTime">
            <summary>
            Gets or sets the time in seconds for which the checkpoint doors are opened when interacted with.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.CheckpointDoor.WarningTime">
            <summary>
            Gets or sets the time in seconds for which the checkpoint alarm is playing the alarm sound.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.CheckpointDoor.HealthPercent">
            <summary>
            Gets the health as a percentage from 0 to 1.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.CheckpointDoor.PlayWarningSound">
            <summary>
            Plays the warning alarm sound.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.CheckpointDoor.TryDamage(System.Single,Interactables.Interobjects.DoorUtils.DoorDamageType)">
            <summary>
            Damage all the sub doors by specified amount.
            </summary>
            <param name="damage">The amount of damage to apply.</param>
            <param name="type">The <see cref="T:Interactables.Interobjects.DoorUtils.DoorDamageType"/> to apply.</param>
            <returns>True if the doors took damage, otherwise false.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.CheckpointDoor.TryBreak(Interactables.Interobjects.DoorUtils.DoorDamageType)">
            <summary>
            Break all the sub doors.
            </summary>
            <param name="type">The <see cref="T:Interactables.Interobjects.DoorUtils.DoorDamageType"/> to apply.</param>
            <returns>True if the doors took damage, otherwise false.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.CheckpointDoor.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Door">
            <summary>
            The wrapper representing <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant">door variants</see>, the in-game doors.
            </summary>
        </member>
        <member name="F:LabApi.Features.Wrappers.Door.TypeWrappers">
            <summary>
            Contains all the handlers for constructing wrappers for the associated base game types.
            </summary>
        </member>
        <member name="F:LabApi.Features.Wrappers.Door.DoorNameDictionary">
            <summary>
            Contains all the <see cref="T:LabApi.Features.Enums.DoorName"/> values for the associated <see cref="P:LabApi.Features.Wrappers.Door.NameTag"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Door.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.Door"/> instances currently in the game.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Door.Dictionary">
            <summary>
            Contains all the cached <see cref="T:LabApi.Features.Wrappers.Door">doors</see> in the game, accessible through their <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Door.Get(Interactables.Interobjects.DoorUtils.DoorVariant)">
            <summary>
            Gets the door wrapper from the <see cref="P:LabApi.Features.Wrappers.Door.Dictionary"/>, or creates a new one if it doesn't exist.
            </summary>
            <param name="doorVariant">The <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/> of the door.</param>
            <returns>The requested door or null if the input was null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Door.Get(System.String)">
            <summary>
            Gets the door by it's nametag.
            </summary>
            <param name="nametag">The door's nametag.</param>
            <returns>The requested door. May be null if door with provided nametag does not exist.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Door.Get(MapGeneration.FacilityZone)">
            <summary>
            Gets the door in specified zone.
            </summary>
            <param name="facilityZone">Target zone.</param>
            <returns>An enumerable set of doors.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Door.Get(LabApi.Features.Wrappers.Room)">
            <summary>
            Gets the door in specified room.
            </summary>
            <param name="roomId">Target room wrapper.</param>
            <returns>An enumerable set of doors.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Door.Get(MapGeneration.RoomIdentifier)">
            <summary>
            Gets the door in specified room.
            </summary>
            <param name="roomId">Target room identifier.</param>
            <returns>An enumerable set of doors.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Door.Initialize">
            <summary>
            Initializes the door wrapper class.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Door.CreateDoorWrapper(Interactables.Interobjects.DoorUtils.DoorVariant)">
            <summary>
            A protected method to create new door wrappers from the base game object.
            </summary>
            <param name="doorVariant">The base object to create the wrapper from.</param>
            <returns>The newly created wrapper.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Door.OnAdded(Interactables.Interobjects.DoorUtils.DoorVariant)">
            <summary>
            Private method to handle the creation of new doors in the server.
            </summary>
            <param name="doorVariant">The <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/> that was created.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Door.OnRemoved(Interactables.Interobjects.DoorUtils.DoorVariant)">
            <summary>
            Private method to handle the removal of doors from the server.
            </summary>
            <param name="doorVariant">The door being destroyed.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Door.Register``1(System.Func{``0,LabApi.Features.Wrappers.Door})">
            <summary>
            A private method to handle the addition of wrapper handlers.
            </summary>
            <typeparam name="T">The derived base game type to handle.</typeparam>
            <param name="constructor">A handler to construct the wrapper with the base game instance.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Door.#ctor(Interactables.Interobjects.DoorUtils.DoorVariant)">
            <summary>
            A private constructor to prevent external instantiation.
            </summary>
            <param name="doorVariant">The <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/> of the door.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Door.IsDestroyed">
            <summary>
            Whether the door has been destroyed, see <see cref="M:UnityEngine.Object.DestroyObject(UnityEngine.Object)"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Door.Base">
            <summary>
            The base object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Door.DoorName">
            <summary>
            Gets the <see cref="T:LabApi.Features.Enums.DoorName"/> of the door.
            </summary>
            <remarks>
            Is the enum version of <see cref="P:LabApi.Features.Wrappers.Door.NameTag"/>.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Door.NameTag">
            <summary>
            Gets the name tag of the door.
            </summary>
            <remarks>
            Is the string version of <see cref="P:LabApi.Features.Wrappers.Door.DoorName"/>.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Door.Rooms">
            <summary>
            Gets the rooms which have this door.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Door.Zone">
            <summary>
            Gets the zone in which this door is.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Door.IsOpened">
            <summary>
            Gets or sets whether the door is open.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Door.CanInteract">
            <summary>
            Gets whether the door can be interacted with by a <see cref="T:LabApi.Features.Wrappers.Player"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Door.ExactState">
            <summary>
            A value from 0.0f to 1.0f used to determine the intermediate state between fully closed and fully open.
            </summary>
            <remarks>
            When a door is fully closed and fully open and how to interpolate between that is implementation dependent
            so using this value to compare between doors of different type is not recommend.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Door.IsLocked">
            <summary>
            Gets or sets whether the door is locked.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Door.LockReason">
            <summary>
            Gets the door's <see cref="T:Interactables.Interobjects.DoorUtils.DoorLockReason"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Door.Permissions">
            <summary>
            Gets or sets the required <see cref="T:Interactables.Interobjects.DoorUtils.DoorPermissionFlags"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Door.Bypass2176">
            <summary>
            Gets or sets whether the door will bypass 2176.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Door.Transform">
            <summary>
            Gets the door's <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Door.GameObject">
            <summary>
            Gets the door's <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Door.Position">
            <summary>
            Gets the door's position.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Door.Rotation">
            <summary>
            Gets the door's rotation.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Door.CanCache">
            <summary>
            Whether the wrapper can be cached.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Door.Lock(Interactables.Interobjects.DoorUtils.DoorLockReason,System.Boolean)">
            <summary>
            Locks the door.
            </summary>
            <param name="reason">The reason.</param>
            <param name="enabled">Whether the door lock reason is new.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Door.PlayLockBypassDeniedSound">
            <summary>
            Plays a sound that indicates that lock bypass was denied.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Door.PlayPermissionDeniedAnimation">
            <summary>
            Plays a sound and flashes permission denied on the panel.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Door.ToString">
            <inheritdoc />
        </member>
        <member name="M:LabApi.Features.Wrappers.Door.OnRemove">
            <summary>
            An internal virtual method to signal that the base object has been destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.DummyDoor">
            <summary>
            The wrapper representing <see cref="T:Interactables.Interobjects.DummyDoor">dummy doors</see>, a fake door used for decoration only.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.DummyDoor.Dictionary">
            <summary>
            Contains all the cached <see cref="T:LabApi.Features.Wrappers.DummyDoor"/> instances, accessible through their <see cref="T:Interactables.Interobjects.DummyDoor"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.DummyDoor.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.DummyDoor"/> instances currently in the game.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.DummyDoor.Get(Interactables.Interobjects.DummyDoor)">
            <summary>
            Gets the <see cref="T:LabApi.Features.Wrappers.DummyDoor"/> wrapper from the <see cref="P:LabApi.Features.Wrappers.DummyDoor.Dictionary"/>, or creates a new one if it doesn't exist.
            </summary>
            <param name="baseDummyDoor">The <see cref="T:Interactables.Interobjects.DummyDoor"/> of the door.</param>
            <returns>The requested door wrapper or null if the input was null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.DummyDoor.#ctor(Interactables.Interobjects.DummyDoor)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseDummyDoor">The base <see cref="T:Interactables.Interobjects.DummyDoor"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.DummyDoor.Base">
            <summary>
            The base <see cref="T:Interactables.Interobjects.DummyDoor"/> object.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.DummyDoor.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.ElevatorDoor">
            <summary>
            The wrapper representing <see cref="T:Interactables.Interobjects.ElevatorDoor">elevator doors</see>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ElevatorDoor.Dictionary">
            <summary>
            Contains all the cached <see cref="T:LabApi.Features.Wrappers.ElevatorDoor"/> instances, accessible through their <see cref="T:Interactables.Interobjects.ElevatorDoor"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ElevatorDoor.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.ElevatorDoor"/> instances currently in the game.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.ElevatorDoor.Get(Interactables.Interobjects.ElevatorDoor)">
            <summary>
            Gets the <see cref="T:LabApi.Features.Wrappers.ElevatorDoor"/> wrapper from the <see cref="P:LabApi.Features.Wrappers.ElevatorDoor.Dictionary"/>, or creates a new one if it doesn't exist.
            </summary>
            <param name="baseElevatorDoor">The <see cref="T:Interactables.Interobjects.ElevatorDoor"/> of the door.</param>
            <returns>The requested door wrapper or null if the input was null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.ElevatorDoor.#ctor(Interactables.Interobjects.ElevatorDoor)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseElevatorDoor">The base <see cref="T:Interactables.Interobjects.ElevatorDoor"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.ElevatorDoor.Base">
            <summary>
            The base <see cref="T:Interactables.Interobjects.ElevatorDoor"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ElevatorDoor.Elevator">
            <summary>
            Gets the <see cref="T:LabApi.Features.Wrappers.Elevator"/> this door belongs to.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ElevatorDoor.Group">
            <summary>
            Gets the <see cref="T:Interactables.Interobjects.ElevatorGroup"/> this door belongs to.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.ElevatorDoor.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.DoorCrusher">
            <summary>
            The wrapper representing the <see cref="T:Interactables.Interobjects.DoorUtils.DoorCrusherExtension"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.DoorCrusher.#ctor(Interactables.Interobjects.DoorUtils.DoorCrusherExtension)">
            <summary>
            Creates a new wrapper for the <see cref="T:Interactables.Interobjects.DoorUtils.DoorCrusherExtension"/> component.
            </summary>
            <param name="doorCrusher">The base <see cref="T:Interactables.Interobjects.DoorUtils.DoorCrusherExtension"/> component.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.DoorCrusher.Base">
            <summary>
            The base <see cref="T:Interactables.Interobjects.DoorUtils.DoorCrusherExtension"/> component.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.DoorCrusher.MaxThreshold">
            <summary>
            Gets or sets the max value <see cref="P:LabApi.Features.Wrappers.Door.ExactState"/> that crushing can occur at.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.DoorCrusher.MinThreshold">
            <summary>
            Gets or sets the min value <see cref="P:LabApi.Features.Wrappers.Door.ExactState"/> that crushing can occur at.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.DoorCrusher.DeathCollider">
            <summary>
            Gets the collider used for determining if a player is in the crush zone.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.DoorCrusher.ScpDamage">
            <summary>
            Gets or sets the damage done to SCPs if <see cref="P:LabApi.Features.Wrappers.DoorCrusher.IgnoreScps"/> is false.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.DoorCrusher.IgnoreScps">
            <summary>
            Gets or sets whether SCPs should be excluded from taking damage from the crusher.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Gate">
            <summary>
            A wrapper representing the <see cref="T:Interactables.Interobjects.PryableDoor"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Gate.Dictionary">
            <summary>
            Contains all the cached <see cref="T:LabApi.Features.Wrappers.Gate"/> instances, accessible through their <see cref="T:Interactables.Interobjects.PryableDoor"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Gate.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.Gate"/> instances currently in the game.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Gate.Get(Interactables.Interobjects.PryableDoor)">
            <summary>
            Gets the <see cref="T:LabApi.Features.Wrappers.Gate"/> wrapper from the <see cref="P:LabApi.Features.Wrappers.Gate.Dictionary"/>, or creates a new one if it doesn't exist.
            </summary>
            <param name="pryableDoor">The <see cref="T:Interactables.Interobjects.PryableDoor"/> of the door.</param>
            <returns>The requested door wrapper or null if the input was null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Gate.#ctor(Interactables.Interobjects.PryableDoor)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="pryableDoor">The base <see cref="T:Interactables.Interobjects.PryableDoor"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Gate.Base">
            <summary>
            The base <see cref="T:Interactables.Interobjects.PryableDoor"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Gate.Is106Passable">
            <summary>
            Gets or sets whether SCP-106 can pass through the door when its not closed and locked.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Gate.TryPry(LabApi.Features.Wrappers.Player)">
            <summary>
            Try pry the gate with the specified player.
            </summary>
            <param name="player">The player to pry the gate.</param>
            <returns>True if the player can pry the gate, otherwise false.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Gate.Pry">
            <summary>
            Play the Pry animation.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Gate.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.NonInteractableDoor">
            <summary>
            The wrapper representing the <see cref="T:Interactables.Interobjects.BasicNonInteractableDoor"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.NonInteractableDoor.Dictionary">
            <summary>
            Contains all the cached <see cref="T:LabApi.Features.Wrappers.NonInteractableDoor"/> instances, accessible through their <see cref="T:Interactables.Interobjects.BasicNonInteractableDoor"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.NonInteractableDoor.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.NonInteractableDoor"/> instances currently in the game.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.NonInteractableDoor.Get(Interactables.Interobjects.BasicNonInteractableDoor)">
            <summary>
            Gets the <see cref="T:LabApi.Features.Wrappers.NonInteractableDoor"/> wrapper from the <see cref="P:LabApi.Features.Wrappers.NonInteractableDoor.Dictionary"/>, or creates a new one if it doesn't exist.
            </summary>
            <param name="basicNonInteractableDoor">The <see cref="T:Interactables.Interobjects.BasicNonInteractableDoor"/> of the door.</param>
            <returns>The requested door wrapper or null if the input was null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.NonInteractableDoor.#ctor(Interactables.Interobjects.BasicNonInteractableDoor)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="basicNonInteractableDoor">The base <see cref="T:Interactables.Interobjects.BasicNonInteractableDoor"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.NonInteractableDoor.Base">
            <summary>
            The base <see cref="T:Interactables.Interobjects.BasicNonInteractableDoor"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.NonInteractableDoor.Is106Passable">
            <summary>
            Gets or sets whether SCP-106 can pass through the door when its not closed and locked.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.NonInteractableDoor.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Timed173Gate">
            <summary>
            The wrapper representing the <see cref="T:Interactables.Interobjects.Timed173PryableDoor"/>.
            </summary>
            <remarks>
            Used by old 173s containment to open the door after a short delay after round start.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Timed173Gate.Dictionary">
            <summary>
            Contains all the cached <see cref="T:LabApi.Features.Wrappers.Timed173Gate"/> instances, accessible through their <see cref="T:Interactables.Interobjects.Timed173PryableDoor"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Timed173Gate.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.Timed173Gate"/> instances currently in the game.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Timed173Gate.Get(Interactables.Interobjects.Timed173PryableDoor)">
            <summary>
            Gets the <see cref="T:LabApi.Features.Wrappers.Timed173Gate"/> wrapper from the <see cref="P:LabApi.Features.Wrappers.Timed173Gate.Dictionary"/>, or creates a new one if it doesn't exist.
            </summary>
            <param name="timed173PryableDoor">The <see cref="T:Interactables.Interobjects.Timed173PryableDoor"/> of the door.</param>
            <returns>The requested door wrapper or null if the input was null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Timed173Gate.#ctor(Interactables.Interobjects.Timed173PryableDoor)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="timed173PryableDoor">The base <see cref="T:Interactables.Interobjects.Timed173PryableDoor"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Timed173Gate.Base">
            <summary>
            The base <see cref="T:Interactables.Interobjects.Timed173PryableDoor"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Timed173Gate.Stopwatch">
            <summary>
            Gets the current stopwatch used to time to gate opening.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Timed173Gate.SmartOpen">
            <summary>
            Gets or sets whether the gate will open if an SCP-173 is present.
            </summary>
            <remarks>
            The gate is still unlocked after the specified time regardless of this setting.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Timed173Gate.Delay">
            <summary>
            Gets or sets the delay in seconds after round start to unlock and/or open the gate.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Timed173Gate.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Elevator">
            <summary>
            The wrapper representing <see cref="T:Interactables.Interobjects.ElevatorChamber">elevators</see>, the in-game elevators.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Elevator.Dictionary">
            <summary>
            Contains all the cached <see cref="T:Interactables.Interobjects.ElevatorChamber">generators</see> in the game, accessible through their <see cref="T:MapGeneration.Distributors.Scp079Generator"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Elevator.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.Elevator"/> instances currently in the game.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Elevator.LockAll">
            <summary>
            Locks every door of every elevator on map.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Elevator.UnlockAll">
            <summary>
            Unlocks every door of every elevator on map.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Elevator.Get(Interactables.Interobjects.ElevatorChamber)">
            <summary>
            Gets the elevator wrapper from the <see cref="P:LabApi.Features.Wrappers.Elevator.Dictionary"/>, or creates a new one if it doesn't exist.
            </summary>
            <param name="elevatorChamber">The <see cref="T:Interactables.Interobjects.ElevatorChamber"/> of the elevator.</param>
            <returns>The requested elevator.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Elevator.GetByGroup(Interactables.Interobjects.ElevatorGroup)">
            <summary>
            Gets the enumerable of elevators that are assigned to the specific group.
            </summary>
            <param name="group">The specified elevator group.</param>
            <returns>Enumerable where the group is equal to the one specified.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Elevator.Initialize">
            <summary>
            Initializes the <see cref="T:LabApi.Features.Wrappers.Elevator"/> class to subscribe to <see cref="T:Interactables.Interobjects.ElevatorChamber"/> events.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Elevator.#ctor(Interactables.Interobjects.ElevatorChamber)">
            <summary>
            A private constructor to prevent external instantiation.
            </summary>
            <param name="elevator">The <see cref="T:Interactables.Interobjects.ElevatorChamber"/> of the elevator.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Elevator.Base">
            <summary>
            The base object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Elevator.Doors">
            <summary>
            Gets all the doors associated with this elevator.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Elevator.Rooms">
            <summary>
            Gets all the rooms associated with this elevator.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Elevator.CurrentDestination">
            <summary>
            Gets the current destination / location of the elevator.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Elevator.CurrentDestinationLevel">
            <summary>
            Gets the destination/current floor of the elevator.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Elevator.NextDestination">
            <summary>
            Gets the destination this elevator will head towards once activated.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Elevator.NextDestinationLevel">
            <summary>
            Gets the destination floor index this elevator will head towards once activated.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Elevator.IsReady">
            <summary>
            Gets whether this elevator is ready to be activated.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Elevator.GoingUp">
            <summary>
            Gets whether the level of this elevator is increasing.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Elevator.Group">
            <summary>
            Gets or sets the <see cref="T:Interactables.Interobjects.ElevatorGroup"/> this elevator belongs to.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Elevator.CurrentSequence">
            <summary>
            Gets the current <see cref="T:Interactables.Interobjects.ElevatorChamber.ElevatorSequence"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Elevator.WorldSpaceBounds">
            <summary>
            Gets the current world space bounds of this elevator.
            <para>World space bounds are cached and recalculated if not valid after elevator movement.</para>
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Elevator.AnyDoorLockedReason">
            <summary>
            Gets the reason why is ANY elevator door locked.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Elevator.AllDoorsLockedReason">
            <summary>
            Gets the reason why is EVERY elevator door locked.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Elevator.DynamicAdminLock">
            <summary>
            Indicates whether dynamic admin lock is enabled.
            <para>Dynamic Admin Lock is a mode where only doors on the floor with elevator are unlocked.</para>
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Elevator.ToString">
            <inheritdoc />
        </member>
        <member name="M:LabApi.Features.Wrappers.Elevator.SetDestination(System.Int32,System.Boolean)">
            <summary>
            Attempts to send the elevator to target destination.
            </summary>
            <param name="targetLevel">Target level index of the floor.</param>
            <param name="force">Whether the destination should be changed even that the elevator is not ready/is still moving.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Elevator.Interact(LabApi.Features.Wrappers.Player)">
            <summary>
            Simulates interaction of specified <see cref="T:LabApi.Features.Wrappers.Player"/> on this elevator.
            </summary>
            <param name="player">The player who is interacting with this elevator.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Elevator.SendToNextFloor">
            <summary>
            Attempts to send the elevator to the next available floor.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Elevator.LockAllDoors">
            <summary>
            Sets the lock reason of all elevator doors to the specified state.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Elevator.UnlockAllDoors">
            <summary>
            Unlocks all elevator doors assigned to this chamber.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.AmnesticCloudHazard">
            <summary>
            A class representing the <see cref="T:PlayerRoles.PlayableScps.Scp939.Scp939AmnesticCloudInstance"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.AmnesticCloudHazard.Dictionary">
            <summary>
            Contains all the cached items, accessible through their <see cref="P:LabApi.Features.Wrappers.AmnesticCloudHazard.Base"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.AmnesticCloudHazard.List">
            <summary>
            Gets all currently active tantrum hazards.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.AmnesticCloudHazard.BasePrefab">
            <summary>
            Prefab used to spawn the hazard.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.AmnesticCloudHazard.Spawn(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,System.Single,System.Byte,LabApi.Features.Wrappers.Player)">
            <summary>
            Spawns a <see cref="T:LabApi.Features.Wrappers.AmnesticCloudHazard"/> at specified position with specified rotation, scale duration and size.
            <para> Do note that changing scale doesn't change the effect size. Use the <see cref="P:LabApi.Features.Wrappers.Hazard.MaxDistance"/> and <see cref="P:LabApi.Features.Wrappers.Hazard.MaxHeightDistance"/> to match the visual size.</para>
            </summary>
            <param name="position">The target position to spawn this hazard at.</param>
            <param name="rotation">The target rotation to spawn this hazard with.</param>
            <param name="scale">The target scale to spawn with.</param>
            <param name="duration">The duration in seconds for which this cloud will be alive for.</param>
            <param name="size">The size of the cloud.</param>
            <param name="owner">The owner of the cloud.</param>
            <returns>A new hazard.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.AmnesticCloudHazard.Get(PlayerRoles.PlayableScps.Scp939.Scp939AmnesticCloudInstance)">
            <summary>
            Gets the hazard wrapper from the <see cref="P:LabApi.Features.Wrappers.AmnesticCloudHazard.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:PlayerRoles.PlayableScps.Scp939.Scp939AmnesticCloudInstance"/> was not <see langword="null"/>.
            </summary>
            <param name="hazard">The <see cref="P:LabApi.Features.Wrappers.AmnesticCloudHazard.Base"/> of the hazard.</param>
            <returns>The requested hazard or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.AmnesticCloudHazard.#ctor(PlayerRoles.PlayableScps.Scp939.Scp939AmnesticCloudInstance)">
            <summary>
            Internal constructor preventing external instantiation.
            </summary>
            <param name="hazard">The base amnestic cloud hazard.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.AmnesticCloudHazard.SyncedPosition">
            <summary>
            Gets or sets the world position of the hazard as it is synchronized with the client.
            Note that this value is slightly inaccurate and is purely for visual effects.<br/>
            For actual world position used to calculate whether the player is inside of this hazard use <see cref="P:LabApi.Features.Wrappers.Hazard.SourcePosition"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.AmnesticCloudHazard.VisualSize">
            <summary>
            Gets or sets the visual size of the amnestic cloud. Only visible to SCP-939. For actual effect size use <see cref="P:LabApi.Features.Wrappers.Hazard.MaxDistance"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.AmnesticCloudHazard.PauseDuration">
            <summary>
            Pause duration that the <see cref="M:LabApi.Features.Wrappers.AmnesticCloudHazard.Pause(System.Single)"/> uses.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.AmnesticCloudHazard.AmnesiaDuration">
            <summary>
            Duration of the amnesia that is applied when the player is inside this hazard.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.AmnesticCloudHazard.Owner">
            <summary>
            Gets or sets the owner of this amnestic cloud.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.AmnesticCloudHazard.State">
            <summary>
            Gets the state of this amnestic cloud.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.AmnesticCloudHazard.Base">
            <summary>
            The base object.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.AmnesticCloudHazard.Pause(System.Single)">
            <summary>
            Temporary pauses all amnesia effects based on <see cref="P:LabApi.Features.Wrappers.AmnesticCloudHazard.PauseDuration"/> or custom time.
            </summary>
            <param name="customDuration">Custom duration of the pause. Values less than 0 will use the <see cref="P:LabApi.Features.Wrappers.AmnesticCloudHazard.PauseDuration"/>.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.AmnesticCloudHazard.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.DecayableHazard">
            <summary>
            A class representing the <see cref="T:Hazards.TemporaryHazard"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.DecayableHazard.Dictionary">
            <summary>
            Contains all the cached items, accessible through their <see cref="P:LabApi.Features.Wrappers.DecayableHazard.Base"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.DecayableHazard.List">
            <summary>
            Gets all currently active decayable hazards.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.DecayableHazard.Get(Hazards.TemporaryHazard)">
            <summary>
            Gets the hazard wrapper from the <see cref="P:LabApi.Features.Wrappers.DecayableHazard.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:Hazards.TemporaryHazard"/> was not <see langword="null"/>.
            </summary>
            <param name="hazard">The <see cref="P:LabApi.Features.Wrappers.DecayableHazard.Base"/> of the hazard.</param>
            <returns>The requested hazard or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.DecayableHazard.#ctor(Hazards.TemporaryHazard)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="hazard">The base game object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.DecayableHazard.DecaySpeed">
            <summary>
            Gets or sets the modifier applied to <see cref="P:UnityEngine.Time.deltaTime"/> when calculating how much time has passed.<br/>
            Setting this value will override any subclass modifiers. Setting it to values less than 0 will remove the override.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.DecayableHazard.LiveDuration">
            <summary>
            Gets or sets the amount of time this object will persist for (in seconds) before disappearing.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.DecayableHazard.Elapsed">
            <summary>
            Gets or sets the amount of time in seconds this hazard is being active.
            Doesn't progress if the <see cref="P:LabApi.Features.Wrappers.Hazard.IsActive"/> is set to <see langword="false"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.DecayableHazard.Base">
            <summary>
            The base object.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.DecayableHazard.Destroy">
            <summary>
            Destroys this hazard.<br/>
            Do note that subclasses usually implement few seconds delay before the actual object is destroyed (Usually to wait for animations to finish on clients).
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.DecayableHazard.OnRemove">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Features.Wrappers.Hazard">
            <summary>
            A class representing all static and temporary <see cref="T:Hazards.EnvironmentalHazard"/>.
            </summary>
        </member>
        <member name="F:LabApi.Features.Wrappers.Hazard.TypeWrappers">
            <summary>
            Contains all the handlers for constructing wrappers for the associated base game types.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Hazard.Dictionary">
            <summary>
            Contains all the cached items, accessible through their <see cref="P:LabApi.Features.Wrappers.Hazard.Base"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Hazard.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.Hazard"/> or its subclasses.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Hazard.BasePrefab">
            <summary>
            Prefab used to spawn the hazard.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Hazard.Spawn(Hazards.EnvironmentalHazard,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
            <summary>
            Spawns a <see cref="T:LabApi.Features.Wrappers.Hazard"/> at specified position with specified rotation and scale.
            </summary>
            <param name="prefab">The target prefab.</param>
            <param name="position">The target position to spawn this hazard at.</param>
            <param name="rotation">The target rotation to spawn this hazard with.</param>
            <param name="scale">The target scale to spawn with.</param>
            <returns>A new hazard.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Hazard.Get(Hazards.EnvironmentalHazard)">
            <summary>
            Gets the hazard wrapper from the <see cref="P:LabApi.Features.Wrappers.Hazard.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:Hazards.EnvironmentalHazard"/> was not <see langword="null"/>.
            </summary>
            <param name="hazard">The <see cref="P:LabApi.Features.Wrappers.Hazard.Base"/> of the hazard.</param>
            <returns>The requested hazard or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Hazard.TryGet(Hazards.EnvironmentalHazard,LabApi.Features.Wrappers.Hazard@)">
            <summary>
            Tries to get the hazard wrapper from the <see cref="P:LabApi.Features.Wrappers.Hazard.Dictionary"/>.
            </summary>
            <param name="envHazard">The <see cref="P:LabApi.Features.Wrappers.Hazard.Base"/> of the hazard.</param>
            <param name="wrapper">The requested hazard.</param>
            <returns><see langword="true"/> if the item exists, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Hazard.Get(LabApi.Features.Wrappers.Room)">
            <summary>
            Gets all hazards in a specified room.
            </summary>
            <param name="room">The target room to check on.</param>
            <returns>Hazards in specified room.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Hazard.Initialize">
            <summary>
            Initializes the <see cref="T:LabApi.Features.Wrappers.Item"/> class to subscribe to <see cref="T:InventorySystem.InventoryExtensions"/> events and handle the item caching.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Hazard.CreateItemWrapper(Hazards.EnvironmentalHazard)">
            <summary>
            Creates a new wrapper from the base environmental hazard object.
            </summary>
            <param name="hazard">The base object.</param>
            <returns>The newly created wrapper.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Hazard.GetPrefab``1">
            <summary>
            Attempts to get the prefab from <see cref="F:Mirror.NetworkClient.prefabs"/>.
            </summary>
            <typeparam name="T">Type of the hazard.</typeparam>
            <returns>Prefab <see cref="T:UnityEngine.GameObject"/> if it was found. Otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Hazard.AddHazard(Hazards.EnvironmentalHazard)">
            <summary>
            A private method to handle the creation of new hazards in the server.
            </summary>
            <param name="hazard">The created <see cref="T:Hazards.EnvironmentalHazard"/> instance.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Hazard.RemoveHazard(Hazards.EnvironmentalHazard)">
            <summary>
            A private method to handle the removal of hazards from the server.
            </summary>
            <param name="hazard">The to be destroyed <see cref="T:Hazards.EnvironmentalHazard"/> instance.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Hazard.Register``1(System.Func{``0,LabApi.Features.Wrappers.Hazard})">
            <summary>
            A private method to handle the addition of wrapper handlers.
            </summary>
            <typeparam name="T">The derived base game type to handle.</typeparam>
            <param name="constructor">A handler to construct the wrapper with the base game instance.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Hazard.#ctor(Hazards.EnvironmentalHazard)">
            <summary>
            Initializes the <see cref="T:LabApi.Features.Wrappers.Hazard"/> class to subscribe to <see cref="T:Hazards.EnvironmentalHazard"/> events and handle the item caching.
            </summary>
            <param name="hazard">The base game hazard component.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Hazard.Base">
            <summary>
            Base game object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Hazard.AffectedPlayers">
            <summary>
            Gets all affected players by this hazard.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Hazard.MaxDistance">
            <summary>
            Gets or sets the maximum distance players have to be at, for this hazard to affect them.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Hazard.MaxHeightDistance">
            <summary>
            Gets or sets the maximum height players have to be at, for this hazard to affect them.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Hazard.SourceOffset">
            <summary>
            Gets or sets the offset applied to the <see cref="P:LabApi.Features.Wrappers.Hazard.SourcePosition"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Hazard.IsActive">
            <summary>
            Gets whether this environmental hazard and it's effects is enabled.
            Setting to false also stops the decay of temporary hazards.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Hazard.SourcePosition">
            <summary>
            Gets or sets the origin point from which the AoE effect will start.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Hazard.IsDestroyed">
            <summary>
            Gets whether the hazard is destroyed.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Hazard.Room">
            <summary>
            Gets the room in which this hazard is in.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Hazard.CanCache">
            <summary>
            Whether to cache the wrapper.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Hazard.ToString">
            <inheritdoc />
        </member>
        <member name="M:LabApi.Features.Wrappers.Hazard.IsInArea(LabApi.Features.Wrappers.Player)">
            <summary>
            Gets whether the player is in the hazard area.
            </summary>
            <param name="player">Target player to check on.</param>
            <returns>Whether the player is within hazard area.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Hazard.Destroy">
            <summary>
            Destroys this hazard.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Hazard.OnRemove">
            <summary>
            An internal virtual method to signal to derived implementations to uncache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.SinkholeHazard">
            <summary>
            A class representing the <see cref="T:Hazards.SinkholeEnvironmentalHazard"/>.
            Note that this is static hazard and position, rotation and scale isn't applied on clients unless you respawn this object via <see cref="T:Mirror.NetworkServer"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.SinkholeHazard.Dictionary">
            <summary>
            Contains all the cached items, accessible through their <see cref="P:LabApi.Features.Wrappers.SinkholeHazard.Base"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.SinkholeHazard.List">
            <summary>
            Gets all currently active sinkholes.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.SinkholeHazard.BasePrefab">
            <summary>
            Prefab used to spawn the hazard.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.SinkholeHazard.Spawn(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
            <summary>
            Spawns a <see cref="T:LabApi.Features.Wrappers.SinkholeHazard"/> at specified position with specified rotation and scale.
            <para> Do note that changing scale doesn't change the effect size. Use the <see cref="P:LabApi.Features.Wrappers.Hazard.MaxDistance"/> and <see cref="P:LabApi.Features.Wrappers.Hazard.MaxHeightDistance"/> to match the visual size.</para>
            </summary>
            <param name="position">The target position to spawn this hazard at.</param>
            <param name="rotation">The target rotation to spawn this hazard with.</param>
            <param name="scale">The target scale to spawn with. Also affects the size of the decal.</param>
            <returns>The newly created hazard.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.SinkholeHazard.Get(Hazards.SinkholeEnvironmentalHazard)">
            <summary>
            Gets the sinkhole wrapper from the <see cref="P:LabApi.Features.Wrappers.SinkholeHazard.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:Hazards.SinkholeEnvironmentalHazard"/> was not <see langword="null"/>.
            </summary>
            <param name="hazard">The <see cref="P:LabApi.Features.Wrappers.SinkholeHazard.Base"/> of the hazard.</param>
            <returns>The requested hazard or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.SinkholeHazard.#ctor(Hazards.SinkholeEnvironmentalHazard)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="hazard">The base <see cref="T:Hazards.SinkholeEnvironmentalHazard"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.SinkholeHazard.Base">
            <summary>
            The base object.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.SinkholeHazard.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.TantrumHazard">
            <summary>
            A class representing the <see cref="T:Hazards.TantrumEnvironmentalHazard"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.TantrumHazard.Dictionary">
            <summary>
            Contains all the cached items, accessible through their <see cref="P:LabApi.Features.Wrappers.TantrumHazard.Base"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.TantrumHazard.List">
            <summary>
            Gets all currently active tantrum hazards.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.TantrumHazard.BasePrefab">
            <summary>
            Prefab used to spawn the hazard.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.TantrumHazard.Spawn(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
            <summary>
            Spawns a <see cref="T:LabApi.Features.Wrappers.TantrumHazard"/> at specified position with specified rotation and scale.
            <para> Do note that changing scale doesn't change the effect size. Use the <see cref="P:LabApi.Features.Wrappers.Hazard.MaxDistance"/> and <see cref="P:LabApi.Features.Wrappers.Hazard.MaxHeightDistance"/> to match the visual size.</para>
            </summary>
            <param name="position">The target position to spawn this hazard at.</param>
            <param name="rotation">The target rotation to spawn this hazard with.</param>
            <param name="scale">The target scale to spawn with.</param>
            <returns>A new tantrum hazard.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.TantrumHazard.Get(Hazards.TantrumEnvironmentalHazard)">
            <summary>
            Gets the hazard wrapper from the <see cref="P:LabApi.Features.Wrappers.TantrumHazard.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:Hazards.TantrumEnvironmentalHazard"/> was not <see langword="null"/>.
            </summary>
            <param name="hazard">The <see cref="P:LabApi.Features.Wrappers.TantrumHazard.Base"/> of the hazard.</param>
            <returns>The requested hazard or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.TantrumHazard.#ctor(Hazards.TantrumEnvironmentalHazard)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="hazard">The base game tantrum hazard.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.TantrumHazard.SyncedPosition">
            <summary>
            Gets or sets the world position of the hazard as it is synchronized with the client.
            Note that this value is slightly inaccurate and is purely for visual effects.<br/>
            For actual world position used to calculate whether the player is inside of this hazard use <see cref="P:LabApi.Features.Wrappers.Hazard.SourcePosition"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.TantrumHazard.PlaySizzle">
            <summary>
            Gets or sets whether a slight sizzle sound effect will be played when this object is destroyed.
            It is played by default if the tantrum gets destroyed by an explosion or by <see cref="T:LabApi.Features.Wrappers.Tesla"/>.<br/>
            Note that this state may change right before it is destroyed by standard game means.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.TantrumHazard.Base">
            <summary>
            The base object.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.TantrumHazard.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Tesla">
            <summary>
            The wrapper representing <see cref="T:TeslaGate">tesla gate</see>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Tesla.Dictionary">
            <summary>
            Contains all the cached tesla gates, accessible through their <see cref="T:TeslaGate"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Tesla.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.Tesla"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Tesla.TeslaByRoom">
            <summary>
            Cached tesla gates by <see cref="P:LabApi.Features.Wrappers.Tesla.Room"/> they are in.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Tesla.Get(TeslaGate)">
            <summary>
            Gets the tesla wrapper from the <see cref="P:LabApi.Features.Wrappers.Tesla.Dictionary"/> or creates a new one if it doesn't exist.
            </summary>
            <param name="teslaGate">The <see cref="T:TeslaGate"/> of the tesla.</param>
            <returns>The requested tesla.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Tesla.TryGet(LabApi.Features.Wrappers.Room,LabApi.Features.Wrappers.Tesla@)">
            <summary>
            Gets the tesla wrapper inside of <see cref="P:LabApi.Features.Wrappers.Tesla.Room"/> from the <see cref="P:LabApi.Features.Wrappers.Tesla.TeslaByRoom"/>.
            </summary>
            <param name="room">The <see cref="P:LabApi.Features.Wrappers.Tesla.Room"/> with the tesla.</param>
            <param name="tesla">The tesla to be returned.</param>
            <returns>Whether the tesla is in out parameter.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Tesla.Initialize">
            <summary>
            Initializes the <see cref="T:LabApi.Features.Wrappers.Tesla"/> class to subscribe to <see cref="T:TeslaGate"/> events and handle the tesla caching.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Tesla.#ctor(TeslaGate)">
            <summary>
            A private constructor to prevent external instantiation.
            </summary>
            <param name="tesla">The <see cref="T:TeslaGate"/> of the item.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Tesla.Base">
            <summary>
            The base of the tesla.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Tesla.Position">
            <summary>
            Gets tesla gate's position.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Tesla.Rotation">
            <summary>
            Gets tesla gate's rotation.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Tesla.InactiveTime">
            <summary>
            Gets or sets the inactive time of tesla gate.
            <para>
            Inactive time is in seconds and is automatically decreased over time.
            Any value greater than 0 will result in tesla gate not activating.
            </para>
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Tesla.Room">
            <summary>
            Gets the room the tesla gate is in.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Tesla.IsPlayerInIdleRange(LabApi.Features.Wrappers.Player)">
            <summary>
            Returns if <see cref="T:LabApi.Features.Wrappers.Player"/> is in range where tesla gate starts idling.
            </summary>
            <param name="player">The player to check on.</param>
            <returns>Whether the player is in idle range.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Tesla.IsPlayerInRange(LabApi.Features.Wrappers.Player)">
            <summary>
            Returns if <see cref="T:LabApi.Features.Wrappers.Player"/> is in range where tesla gate starts to burst.
            </summary>
            <param name="player">The player to check on.</param>
            <returns>Whether the player is within activation range.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Tesla.IsAnyPlayerInIdleRange">
            <summary>
            Returns if any <see cref="T:LabApi.Features.Wrappers.Player"/> is in range where tesla gate starts idling.
            </summary>
            <returns>Whether any player is within the idle range.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Tesla.IsAnyPlayerInRange">
            <summary>
            Returns if any <see cref="T:LabApi.Features.Wrappers.Player"/> is in range where tesla gate starts to burst.
            </summary>
            <returns>Whether any player is within activation range.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Tesla.Trigger">
            <summary>
            Tesla gate electric burst. Will not do anything if burst is being active.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Tesla.InstantTrigger">
            <summary>
            Tesla gate instant burst.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Map">
            <summary>
            Represents the map of the facility.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Map.Seed">
            <summary>
            Gets the current seed of the map.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Map.Rooms">
            <summary>
            Gets all the <see cref="T:LabApi.Features.Wrappers.Room">rooms</see>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Map.RoomLights">
            <summary>
            Gets all the <see cref="T:RoomLight">room lights</see>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Map.Cameras">
            <summary>
            Gets all the <see cref="T:LabApi.Features.Wrappers.Camera">cameras</see>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Map.Doors">
            <summary>
            Gets all the <see cref="T:LabApi.Features.Wrappers.Door">doors</see>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Map.Elevators">
            <summary>
            Gets all the <see cref="T:LabApi.Features.Wrappers.Elevator">elevators</see>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Map.Teslas">
            <summary>
            Gets all the <see cref="T:LabApi.Features.Wrappers.Tesla">teslas</see>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Map.Generators">
            <summary>
            Gets all the <see cref="T:LabApi.Features.Wrappers.Generator">generators</see>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Map.Pickups">
            <summary>
            Gets all the <see cref="T:LabApi.Features.Wrappers.Pickup">pickups</see>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Map.Ragdolls">
            <summary>
            Gets all the <see cref="T:LabApi.Features.Wrappers.Ragdoll">ragdolls</see>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Map.DefaultEscapeZone">
            <summary>
            Represents the bounds for the default escape zone on surface.
            </summary>
            <remarks>
            By default this is included in the <see cref="P:LabApi.Features.Wrappers.Map.EscapeZones"/> list.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Map.EscapeZones">
            <summary>
            A list of all bounds used as escape zones.
            </summary>
            <remarks>
            By default only the <see cref="P:LabApi.Features.Wrappers.Map.DefaultEscapeZone"/> is included in the list.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.AddEscapeZone(UnityEngine.Bounds)">
            <summary>
            Adds another bounds to be used as an escape zone to the <see cref="P:LabApi.Features.Wrappers.Map.EscapeZones"/> list.
            </summary>
            <param name="escapeZone">The bounds of the new escape zone.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.RemoveEscapeZone(UnityEngine.Bounds)">
            <summary>
            Removes an existing bounds from the <see cref="P:LabApi.Features.Wrappers.Map.EscapeZones"/> list.
            </summary>
            <param name="escapeZone">The bounds of the escape zone to remove.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.GetRandomRoom">
            <summary>
            Gets a random <see cref="T:LabApi.Features.Wrappers.Room"/>.
            </summary>
            <returns>The random room if there were any rooms otherwise see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.GetRandomRoom(MapGeneration.FacilityZone)">
            <summary>
            Gets a random <see cref="T:LabApi.Features.Wrappers.Room"/> in a zone.
            </summary>
            <param name="zone">The zone to pick a random room from.</param>
            <returns>The random room if there were any rooms in the zone otherwise null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.GetRandomRoom(System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone})">
            <summary>
            Gets a random <see cref="T:LabApi.Features.Wrappers.Room"/> in the zones.
            </summary>
            <param name="zones">The zones to pick a random room from.</param>
            <returns>The random room if there were any rooms in the zones otherwise null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.GetRandomDoor">
            <summary>
            Gets a random <see cref="T:LabApi.Features.Wrappers.Door"/>.
            </summary>
            <returns>The random door if there were any doors otherwise null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.GetRandomDoor(MapGeneration.FacilityZone,System.Boolean)">
            <summary>
            Gets a random <see cref="T:LabApi.Features.Wrappers.Door"/> in a zone.
            </summary>
            <param name="zone">The zone to pick a random door from.</param>
            <param name="includeBorders">Whether or not to include doors that are in-between 2 zones.</param>
            <returns>The random door if there were any in doors the zone otherwise null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.GetRandomDoor(System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone},System.Boolean)">
            <summary>
            Gets a random <see cref="T:LabApi.Features.Wrappers.Door"/> in the zones.
            </summary>
            <param name="zones">The zones to pick a random door from.</param>
            <param name="includeBorders">Whether or not to include doors that are in-between 2 zones.</param>
            <returns>The random door if there were any doors in the zones otherwise null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.GetRandomLight">
            <summary>
            Gets a random <see cref="T:RoomLight"/>.
            </summary>
            <returns>The random room light if there were any room lights otherwise null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.GetRandomLight(MapGeneration.FacilityZone)">
            <summary>
            Gets a random <see cref="T:RoomLight"/> in a zone.
            </summary>
            <param name="zone">The zone to pick a random room light from.</param>
            <returns>The random room light if there were any room lights in the zone otherwise null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.GetRandomLight(System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone})">
            <summary>
            Gets a random <see cref="T:RoomLight"/> in the zones.
            </summary>
            <param name="zones">The zones to pick a random room light from.</param>
            <returns>The random room light if there were any room lights in the zones otherwise null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.GetRandomCamera">
            <summary>
            Gets a random <see cref="T:LabApi.Features.Wrappers.Camera"/>.
            </summary>
            <returns>The random camera if there were any cameras otherwise null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.GetRandomCamera(MapGeneration.FacilityZone)">
            <summary>
            Gets a random <see cref="T:LabApi.Features.Wrappers.Camera"/> in a zone.
            </summary>
            <param name="zone">The zone to pick a random camera from.</param>
            <returns>The random camera if there were any cameras in the zone otherwise null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.GetRandomCamera(System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone})">
            <summary>
            Gets a random <see cref="T:LabApi.Features.Wrappers.Camera"/> in the zones.
            </summary>
            <param name="zones">The zones to pick a random camera from.</param>
            <returns>The random camera if there were any cameras in the zones otherwise null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.GetRandomLocker">
            <summary>
            Gets a random <see cref="T:LabApi.Features.Wrappers.Locker"/>.
            </summary>
            <returns>The random locker if there were any lockers otherwise null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.GetRandomLocker(MapGeneration.FacilityZone)">
            <summary>
            Gets a random <see cref="T:LabApi.Features.Wrappers.Locker"/> in a zone.
            </summary>
            <param name="zone">The zone to pick a random locker from.</param>
            <returns>The random locker if there were any lockers in the zone otherwise null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.GetRandomLocker(System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone})">
            <summary>
            Gets a random <see cref="T:LabApi.Features.Wrappers.Locker"/>.
            </summary>
            <param name="zones">The zones to pick a random locker from.</param>
            <returns>The random locker if there were any lockers in the zones otherwise null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.GetRandomElevator">
            <summary>
            Gets a random <see cref="T:LabApi.Features.Wrappers.Elevator"/>.
            </summary>
            <returns>The random elevator if there were any elevators otherwise null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.GetRandomTesla">
            <summary>
            Gets a random <see cref="T:LabApi.Features.Wrappers.Tesla"/>.
            </summary>
            <returns>The random tesla if there were any teslas otherwise null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.GetRandomGenerator">
            <summary>
            Gets a random <see cref="T:LabApi.Features.Wrappers.Generator"/>.
            </summary>
            <returns>The random generator if there were any generators otherwise null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.GetRandomPickup">
            <summary>
            Gets a random <see cref="T:LabApi.Features.Wrappers.Pickup"/>.
            </summary>
            <returns>The random pickup if there were any pickups otherwise null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.GetRandomPickup(MapGeneration.FacilityZone)">
            <summary>
            Gets a random <see cref="T:LabApi.Features.Wrappers.Pickup"/> in a zone.
            </summary>
            <param name="zone">The zone to pick a random pickup from.</param>
            <returns>The random pickup if there were any in the zone otherwise null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.GetRandomPickup(System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone})">
            <summary>
            Gets a random <see cref="T:LabApi.Features.Wrappers.Pickup"/> in the zones.
            </summary>
            <param name="zones">The zones to pick a random pickup form.</param>
            <returns>The random pickup if there were any in the zones otherwise null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.GetRandomRagdoll">
            <summary>
            Gets a random <see cref="T:LabApi.Features.Wrappers.Ragdoll"/>.
            </summary>
            <returns>The random ragdoll if there were any otherwise null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.GetRandomRagdoll(MapGeneration.FacilityZone)">
            <summary>
            Gets a random <see cref="T:LabApi.Features.Wrappers.Ragdoll"/> in a zone.
            </summary>
            <param name="zone">The zone to pick a random ragdoll from.</param>
            <returns>The random ragdoll if there were any in the zone otherwise null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.GetRandomRagdoll(System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone})">
            <summary>
            Gets a random <see cref="T:LabApi.Features.Wrappers.Ragdoll"/> in the zones.
            </summary>
            <param name="zones">The zones to pick a random ragdoll from.</param>
            <returns>The random ragdoll if there were any in the zones otherwise null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.TurnOffLights(System.Single)">
            <summary>
            Turns off all lights for a certain duration.
            </summary>
            <param name="duration">How long to keep the lights off.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.TurnOffLights">
            <summary>
            Turns off all lights.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.TurnOffLights(MapGeneration.FacilityZone)">
            <summary>
            Turns off lights in a zone.
            </summary>
            <param name="zone">The zone to turn the lights off in.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.TurnOffLights(System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone})">
            <summary>
            Turns off lights in the zones.
            </summary>
            <param name="zones">The zones to turn off the lights.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.TurnOffLights(System.Single,MapGeneration.FacilityZone)">
            <summary>
            Turns off all lights in a zone for a certain duration.
            </summary>
            <param name="duration">How long to keep the lights off.</param>
            <param name="zone">The zone to turn the lights off in.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.TurnOffLights(System.Single,System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone})">
            <summary>
            Turns off all lights in the zones for a certain duration.
            </summary>
            <param name="duration">How long to keep the lights off.</param>
            <param name="zones">The zones to turn the lights off in.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.TurnOnLights">
            <summary>
            Turns on all the lights.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.TurnOnLights(MapGeneration.FacilityZone)">
            <summary>
            Turns on all the lights in a zone.
            </summary>
            <param name="zone">The zone to turn all the light on in.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.TurnOnLights(System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone})">
            <summary>
            Turns on all the lights in the zones.
            </summary>
            <param name="zones">The zones to turn all the lights on in.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.SetColorOfLights(UnityEngine.Color)">
            <summary>
            Sets the color of all the lights.
            </summary>
            <param name="color">The color to set the lights.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.SetColorOfLights(UnityEngine.Color,MapGeneration.FacilityZone)">
            <summary>
            Sets the color of all the lights in a zone.
            </summary>
            <param name="color">The color to set the lights.</param>
            <param name="zone">The zone to effect.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.SetColorOfLights(UnityEngine.Color,System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone})">
            <summary>
            Sets the color of all the lights in the zones.
            </summary>
            <param name="color">The color to set the lights.</param>
            <param name="zones">The zones to effect.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.ResetColorOfLights">
            <summary>
            Sets the color of all the lights back to their default.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.ResetColorOfLights(MapGeneration.FacilityZone)">
            <summary>
            Sets the color of all the lights in a zone back to their default.
            </summary>
            <param name="zone">The zone to effect.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Map.ResetColorOfLights(System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone})">
            <summary>
            Sets the color of all lights in the zones back to their default.
            </summary>
            <param name="zones">The zones to effect.</param>
        </member>
        <member name="T:LabApi.Features.Wrappers.RespawnWaves">
            <summary>
            A static class holding references to the wrapping <see cref="T:LabApi.Features.Wrappers.RespawnWave"/>s.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RespawnWaves.PrimaryMtfWave">
            <summary>
            Gets the primary MTF respawn wave.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RespawnWaves.PrimaryChaosWave">
            <summary>
            Gets the primary Chaos Insurgency respawn wave.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RespawnWaves.MiniMtfWave">
            <summary>
            Gets the mini MTF respawn wave.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RespawnWaves.MiniChaosWave">
            <summary>
            Gets the mini Chaos Insurgency respawn wave.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.RespawnWaves.Get(Respawning.Waves.SpawnableWaveBase)">
            <summary>
            Gets the respawn wave wrapper from the static references or creates a new one if it doesn't exist and the provided <see cref="T:Respawning.Waves.SpawnableWaveBase"/> was not <see langword="null"/> or not valid subclass.
            </summary>
            <param name="baseWave">The <see cref="P:LabApi.Features.Wrappers.RespawnWave.Base"/> of the respawn wave.</param>
            <returns>The requested respawn wave or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.RespawnWaves.Initialize">
            <summary>
            Initializes the <see cref="T:LabApi.Features.Wrappers.RespawnWaves"/> wrapper and its wave wrapper instances.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.ChaosWave">
            <summary>
            A class representing <see cref="T:Respawning.Waves.ChaosSpawnWave">primary Chaos Insurgency spawn wave</see>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.ChaosWave.#ctor(Respawning.Waves.ChaosSpawnWave)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.RespawnWave.#ctor(Respawning.Waves.TimeBasedWave)"/>
        </member>
        <member name="P:LabApi.Features.Wrappers.ChaosWave.Base">
            <summary>
            The base <see cref="T:Respawning.Waves.ChaosSpawnWave"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ChaosWave.LogicerPercent">
            <summary>
            Percentage of chaos suppressors per wave.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ChaosWave.ShotgunPercent">
            <summary>
            Percentage of chaos marauders per wave.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ChaosWave.MaxWaveSize">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Features.Wrappers.MiniChaosWave">
            <summary>
            A class representing <see cref="T:Respawning.Waves.ChaosMiniWave">mini Chaos Insurgency spawn wave</see>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.MiniChaosWave.#ctor(Respawning.Waves.ChaosMiniWave)">
            <inheritdoc  cref="M:LabApi.Features.Wrappers.MiniRespawnWave.#ctor(Respawning.Waves.IMiniWave)"/>
        </member>
        <member name="P:LabApi.Features.Wrappers.MiniChaosWave.Base">
            <inheritdoc cref="P:LabApi.Features.Wrappers.MiniRespawnWave.Base"/>
        </member>
        <member name="T:LabApi.Features.Wrappers.MiniMtfWave">
            <summary>
            A class representing <see cref="T:Respawning.Waves.NtfMiniWave">mini MTF spawn wave</see>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.MiniMtfWave.#ctor(Respawning.Waves.NtfMiniWave)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.MiniRespawnWave.#ctor(Respawning.Waves.IMiniWave)"/>
        </member>
        <member name="P:LabApi.Features.Wrappers.MiniMtfWave.Base">
            <inheritdoc cref="P:LabApi.Features.Wrappers.MiniRespawnWave.Base"/>
        </member>
        <member name="T:LabApi.Features.Wrappers.MiniRespawnWave">
            <summary>
            A class representing <see cref="T:Respawning.Waves.IMiniWave"/> which is used for all smaller scale waves.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.MiniRespawnWave.#ctor(Respawning.Waves.IMiniWave)">
            <summary>
            Internal constructor preventing external instantiation.
            </summary>
            <param name="miniWave">The base game object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.MiniRespawnWave.Base">
            <summary>
            Base object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MiniRespawnWave.MaxWaveSize">
            <inheritdoc/>
        </member>
        <member name="P:LabApi.Features.Wrappers.MiniRespawnWave.DefaultRole">
            <summary>
            Gets or sets the default role mini waves will resort to spawning.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MiniRespawnWave.SpecialRole">
            <summary>
            Gets or sets the special role which the respawn wave will spawn.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.MiniRespawnWave.InitiateRespawn">
            <inheritdoc/>
        </member>
        <member name="M:LabApi.Features.Wrappers.MiniRespawnWave.Unlock">
            <summary>
            Forces this Miniwave instance to be unlocked.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.MiniRespawnWave.Lock">
            <summary>
            Resets the <see cref="P:LabApi.Features.Wrappers.RespawnWave.RespawnTokens"/> for this miniwave.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.MtfWave">
            <summary>
            A class representing <see cref="T:Respawning.Waves.NtfSpawnWave">primary MTF spawn wave</see>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.MtfWave.#ctor(Respawning.Waves.NtfSpawnWave)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.RespawnWave.#ctor(Respawning.Waves.TimeBasedWave)"/>
        </member>
        <member name="P:LabApi.Features.Wrappers.MtfWave.Base">
            <summary>
            The base <see cref="T:Respawning.Waves.NtfSpawnWave"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MtfWave.MaxSergeants">
            <summary>
            Gets or sets the amount of sergeants that can spawn with the wave.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MtfWave.MaxCaptains">
            <summary>
            Gets or sets the amount of captains that can spawn with the wave.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MtfWave.MaxWaveSize">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Features.Wrappers.RespawnWave">
            <summary>
            A class representing <see cref="T:Respawning.Waves.TimeBasedWave"/>. Can be both <see cref="T:LabApi.Features.Wrappers.RespawnWave">primary wave</see> and <see cref="T:LabApi.Features.Wrappers.MiniRespawnWave">mini wave</see>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.RespawnWave.#ctor(Respawning.Waves.TimeBasedWave)">
            <summary>
            Internal constructor preventing external instantiation.
            </summary>
            <param name="wave">The base game object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.RespawnWave.Base">
            <summary>
            The base <see cref="T:Respawning.Waves.TimeBasedWave"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RespawnWave.Faction">
            <summary>
            Gets the faction this respawn wave belong to.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RespawnWave.AdditionalSecondsPerSpawn">
            <summary>
            Gets or sets the second that is added to the next respawn timer after the wave has respawned.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RespawnWave.MaxWaveSize">
            <summary>
            Gets or sets the amount of <see cref="T:LabApi.Features.Wrappers.Player"/>s that are going to spawn with the wave.<br/>
            Amount is based on the amount of all <see cref="T:LabApi.Features.Wrappers.Player"/>s including dummies.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RespawnWave.AnimationTime">
            <summary>
            Gets the time the spawn animations takes in seconds.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RespawnWave.RespawnTokens">
            <summary>
            Gets or sets the amount of respawn tokens this spawn wave has.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RespawnWave.Influence">
            <summary>
            Gets or sets the amount of influence this wave's <see cref="P:LabApi.Features.Wrappers.RespawnWave.Faction"/> has.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RespawnWave.TimeLeft">
            <summary>
            Gets or sets the time in seconds it takes for this wave to spawn.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RespawnWave.PausedTime">
            <summary>
            Gets or sets the time this wave's timer is paused.
            </summary>
            <remarks>
            Currently the wave timer pauses only at about 10% left.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.RespawnWave.TimePassed">
            <summary>
            Gets or sets the time that has passed since last wave respawn.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.RespawnWave.TryGetCurrentMilestone(System.Int32@)">
            <summary>
            Attempts to get milestone for next <see cref="P:LabApi.Features.Wrappers.RespawnWave.RespawnTokens"/>.
            Returns <see langword="false"/> if this <see cref="P:LabApi.Features.Wrappers.RespawnWave.Faction"/> has maximum influence possible.
            </summary>
            <param name="influenceThreshold">Out param containing next target influence.</param>
            <returns>Whether there is next available milestone.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.RespawnWave.InitiateRespawn">
            <summary>
            Initiates the respawn with animation.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.RespawnWave.InstantRespawn">
            <summary>
            Instantly respawns this wave.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.RespawnWave.PlayAnnouncement">
            <summary>
            Plays the respawn announcement.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.RespawnWave.PlayRespawnEffect">
            <summary>
            Plays the respawn animation without spawning the wave.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Camera">
            <summary>
            The wrapper representing <see cref="T:PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera">SCP-079 cameras</see>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Camera.Dictionary">
            <summary>
            Contains all the cached <see cref="T:LabApi.Features.Wrappers.Camera">cameras</see> in the game, accessible through their base <see cref="T:PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Camera.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.Camera"/> instances currently in the game.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Camera.Get(PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera)">
            <summary>
            Gets the <see cref="T:LabApi.Features.Wrappers.Camera"/> associated with the <see cref="T:PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera"/>.
            </summary>
            <param name="camera">The <see cref="T:PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera"/> to get the camera from.</param>
            <returns>The <see cref="T:LabApi.Features.Wrappers.Camera"/> associated with the <see cref="T:PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera"/> or <see langword="null"/> if it doesn't exist.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Camera.TryGet(PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera,LabApi.Features.Wrappers.Camera@)">
            <summary>
            Tries to get the <see cref="T:LabApi.Features.Wrappers.Camera"/> associated with the <see cref="T:PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera"/>.
            </summary>
            <param name="camera">The <see cref="T:PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera"/> to get the camera from.</param>
            <param name="wrapper">The <see cref="T:LabApi.Features.Wrappers.Camera"/> associated with the <see cref="T:PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera"/> or <see langword="null"/> if it doesn't exist.</param>
            <returns>Whether the camera was successfully retrieved.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Camera.Initialize">
            <summary>
            Initializes the <see cref="T:LabApi.Features.Wrappers.Camera"/> class to subscribe to.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Camera.Remove(PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera)">
            <summary>
            Handles the removal of a camera from the dictionary.
            </summary>
            <param name="camera">The camera to remove.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Camera.#ctor(PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera)">
            <summary>
            A private constructor to prevent external instantiation.
            </summary>
            <param name="camera">The <see cref="T:PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera"/>.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Camera.Base">
            <summary>
            The base <see cref="T:PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Camera.GameObject">
            <summary>
            Gets the camera's <see cref="P:LabApi.Features.Wrappers.Camera.GameObject"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Camera.Position">
            <summary>
            Gets the camera's position.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Camera.Rotation">
            <summary>
            Gets or sets the camera's rotation.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Camera.Room">
            <summary>
            Gets the <see cref="P:LabApi.Features.Wrappers.Camera.Room"/> the camera is in.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Camera.Zoom">
            <summary>
            Gets or sets the zoom of the camera.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Camera.IsBeingUsed">
            <summary>
            Gets or sets a value indicating whether the camera is currently active.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Camera.ToString">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Features.Wrappers.LightsController">
            <summary>
            The wrapper representing <see cref="T:RoomLightController">room light controller</see>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LightsController.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.LightsController"/> instances currently in the game.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LightsController.Dictionary">
            <summary>
            Contains all the cached rooms in the game, accessible through their <see cref="T:RoomLightController"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.LightsController.Get(RoomLightController)">
            <summary>
            Gets the controller wrapper from <see cref="P:LabApi.Features.Wrappers.LightsController.Dictionary"/>, or creates a new one if it doesn't exists.
            </summary>
            <param name="roomLightController">The original light controller.</param>
            <returns>The requested light controller wrapper.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.LightsController.Initialize">
            <summary>
            Initializes the Room wrapper by subscribing to the <see cref="T:RoomLightController"/> events.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.LightsController.#ctor(RoomLightController)">
            <summary>
            A private constructor to prevent external instantiation.
            </summary>
            <param name="original">The original object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.LightsController.Base">
            <summary>
            The base game object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LightsController.Room">
            <summary>
            The room this controller is assigned to.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LightsController.LightsEnabled">
            <summary>
            Gets or sets whether the lights are enabled in this room.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LightsController.OverrideLightsColor">
            <summary>
            Gets or sets the overriden room light color. Set the value to <see cref="P:UnityEngine.Color.clear"/> to reset override color.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.LightsController.FlickerLights(System.Single)">
            <summary>
            Blackouts the room for specified duration.
            </summary>
            <param name="duration">Duration of light shutdown in seconds.</param>
        </member>
        <member name="T:LabApi.Features.Wrappers.PocketDimension">
            <summary>
            The wrapper over the <see cref="T:MapGeneration.RoomIdentifier"/> that represents the pocket dimension.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PocketDimension.Instance">
            <summary>
            Gets the current <see cref="T:LabApi.Features.Wrappers.PocketDimension"/> instance.
            </summary>
            <remarks>
            May be null if the map has not been generated yet or was previously destroyed.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.PocketDimension.PocketTeleports">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.PocketTeleport"/> instances currently in the game.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PocketDimension.PocketItems">
            <summary>
            Gets all items pickup in the pocket dimension by their associated <see cref="T:LabApi.Features.Wrappers.PocketItem"/> instances.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PocketDimension.RecycleChances">
            <summary>
            Gets an array of the recycle chances.
            </summary>
            <remarks>
            Indexing the array by the rarity of the item see <see cref="M:LabApi.Features.Wrappers.PocketDimension.GetRarity(LabApi.Features.Wrappers.Item)"/> gives the chance for the item to be dropped from 0.0 to 1.0.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.PocketDimension.MinPocketItemTriggerDelay">
            <summary>
            Gets or sets the minimum time that an item can remain in the pocket dimension.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PocketDimension.MaxPocketItemTriggerDelay">
            <summary>
            Gets or sets the maximum time that an item can remain in the pocket dimension.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketDimension.ForceInside(LabApi.Features.Wrappers.Player)">
            <summary>
            Force a <see cref="T:LabApi.Features.Wrappers.Player"/> inside the pocket dimension.
            </summary>
            <param name="player">The <see cref="T:LabApi.Features.Wrappers.Player"/> to send.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketDimension.IsPlayerInside(LabApi.Features.Wrappers.Player)">
            <summary>
            Gets whether a <see cref="T:LabApi.Features.Wrappers.Player"/> is considered inside the pocket dimension.
            </summary>
            <param name="player">The <see cref="T:LabApi.Features.Wrappers.Player"/> to check.</param>
            <returns>True if inside otherwise false.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketDimension.GetCaughtPosition(LabApi.Features.Wrappers.Player)">
            <summary>
            Gets the position at which the <paramref name="player"/> was caught.
            </summary>
            <param name="player">The player.</param>
            <returns>Returns caught position, also returns <see cref="P:UnityEngine.Vector3.zero"/> if the player is not in <see cref="T:LabApi.Features.Wrappers.PocketDimension"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketDimension.ForceExit(LabApi.Features.Wrappers.Player)">
            <summary>
            Force a player to exit the pocket dimension.
            </summary>
            <param name="player">The player inside the pocket dimension.</param>
            <remarks>
            Player must be inside the pocket dimension, see <see cref="M:LabApi.Features.Wrappers.PocketDimension.IsPlayerInside(LabApi.Features.Wrappers.Player)"/>.
            Triggers pocket dimension leaving/left events.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketDimension.ForceKill(LabApi.Features.Wrappers.Player)">
            <summary>
            Force a player to be killed by the pocket dimension.
            </summary>
            <param name="player">The player to kill.</param>
            <remarks>
            Instantly pocket decays the player.
            Triggers pocket dimension leaving/left events.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketDimension.IsPickupInside(LabApi.Features.Wrappers.Pickup)">
            <summary>
            Gets whether a <see cref="T:LabApi.Features.Wrappers.Pickup"/> is inside the pocket dimension.
            </summary>
            <param name="pickup">The <see cref="T:LabApi.Features.Wrappers.Pickup"/> to check.</param>
            <returns>True if inside otherwise false.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketDimension.RandomizeExits">
            <summary>
            Randomizes which pocket dimension's teleports are exits.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketDimension.GetExitPosesForZone(MapGeneration.FacilityZone)">
            <summary>
            Gets the poses used for exits for the pocket dimension.
            </summary>
            <param name="zone">The zone that the exits are associated with.</param>
            <returns>A collection of exit <see cref="T:UnityEngine.Pose"/> instances.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketDimension.AddExitPosesForZone(MapGeneration.FacilityZone,System.Collections.Generic.IEnumerable{UnityEngine.Pose})">
            <summary>
            Adds the specified <see cref="T:UnityEngine.Pose">poses</see> to be used as exits for the pocket dimension.
            </summary>
            <param name="zone">The zone the exits should apply too.</param>
            <param name="poses">The <see cref="T:UnityEngine.Pose">poses</see> to add.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketDimension.AddExitPoseForZone(MapGeneration.FacilityZone,UnityEngine.Pose)">
            <summary>
            Adds the specified <see cref="T:UnityEngine.Pose"/> to be used as exits for the pocket dimension.
            </summary>
            <param name="zone">The zone the exits should apply too.</param>
            <param name="pose">The <see cref="T:UnityEngine.Pose"/> to add.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketDimension.RemoveAllExitPosesForZone(MapGeneration.FacilityZone)">
            <summary>
            Removes all poses used as exits for the pocket dimension for the specified zone.
            </summary>
            <param name="zone">The zone to remove exits from.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketDimension.RemoveExitPosesForZone(MapGeneration.FacilityZone,System.Collections.Generic.IEnumerable{UnityEngine.Pose})">
            <summary>
            Removes the specified <see cref="T:UnityEngine.Pose">poses</see> from use as exits for the pocket dimension.
            </summary>
            <param name="zone">The zone to remove exits from.</param>
            <param name="poses">the <see cref="T:UnityEngine.Pose">poses</see> to remove.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketDimension.RemoveExitPoseForZone(MapGeneration.FacilityZone,UnityEngine.Pose)">
            <summary>
            Removes the specified <see cref="T:UnityEngine.Pose"/> from use as exits for the pocket dimension.
            </summary>
            <param name="zone">The zone to remove exits from.</param>
            <param name="pose">the <see cref="T:UnityEngine.Pose"/> to remove.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketDimension.GetRarity(LabApi.Features.Wrappers.Pickup)">
            <summary>
            Gets the rarity of the item using its <see cref="T:LabApi.Features.Wrappers.Pickup"/> wrapper see <see cref="P:LabApi.Features.Wrappers.PocketDimension.RecycleChances"/>.
            </summary>
            <param name="pickup">The <see cref="T:LabApi.Features.Wrappers.Pickup"/> to get the rarity from.</param>
            <returns>The rarity of the item.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketDimension.GetRarity(LabApi.Features.Wrappers.Item)">
            <summary>
            Gets the rarity of the item using its <see cref="T:LabApi.Features.Wrappers.Item"/> wrapper see <see cref="P:LabApi.Features.Wrappers.PocketDimension.RecycleChances"/>.
            </summary>
            <param name="item">The <see cref="T:LabApi.Features.Wrappers.Item"/> to get the rarity from.</param>
            <returns>The rarity of the item.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketDimension.GetRarity(InventorySystem.Items.ItemBase)">
            <summary>
            Gets the rarity of the item using its <see cref="T:InventorySystem.Items.ItemBase"/> base object see <see cref="P:LabApi.Features.Wrappers.PocketDimension.RecycleChances"/>.
            </summary>
            <param name="item">The <see cref="T:InventorySystem.Items.ItemBase"/> to get the rarity from.</param>
            <returns>The rarity of the item.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketDimension.#ctor(MapGeneration.RoomIdentifier)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="room">The room identifier for the pocket dimension.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketDimension.OnRemoved">
            <summary>
            An internal method to set the instance to null when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.PocketItem">
            <summary>
            The wrapper over the <see cref="T:PlayerRoles.PlayableScps.Scp106.Scp106PocketItemManager.PocketItem"/> base object.
            </summary>
            <remarks>
            Contains the item pickup and its associated pocket dimension properties.
            </remarks>
        </member>
        <member name="F:LabApi.Features.Wrappers.PocketItem.Dictionary">
            <summary>
            Contains all the cached <see cref="T:LabApi.Features.Wrappers.PocketItem"/> instances, accessible through their <see cref="T:InventorySystem.Items.ItemBase"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PocketItem.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.PocketItem"/> instances currently in the game.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketItem.TryGet(LabApi.Features.Wrappers.Pickup,LabApi.Features.Wrappers.PocketItem@)">
            <summary>
            Tries to get the <see cref="T:LabApi.Features.Wrappers.PocketItem"/> associated with the <see cref="T:LabApi.Features.Wrappers.Pickup"/>.
            </summary>
            <param name="pickup">The <see cref="T:LabApi.Features.Wrappers.Pickup"/> inside the pocket dimension to get the <see cref="T:LabApi.Features.Wrappers.PocketItem"/> from.</param>
            <param name="pocketItem">The <see cref="T:LabApi.Features.Wrappers.PocketItem"/> associated with <see cref="T:LabApi.Features.Wrappers.Pickup"/> or null if it doesn't exists.</param>
            <returns>Whether the <see cref="T:LabApi.Features.Wrappers.PocketItem"/> was successfully retrieved.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketItem.Get(LabApi.Features.Wrappers.Pickup)">
            <summary>
            Gets the <see cref="T:LabApi.Features.Wrappers.PocketItem"/> associated with the <see cref="T:LabApi.Features.Wrappers.Pickup"/>.
            </summary>
            <param name="pickup">The <see cref="T:LabApi.Features.Wrappers.Pickup"/> inside the pocket dimension to get the <see cref="T:LabApi.Features.Wrappers.PocketItem"/> from.</param>
            <returns>The associated <see cref="T:LabApi.Features.Wrappers.PocketItem"/> for the <see cref="T:LabApi.Features.Wrappers.Pickup"/> or null if it doesn't exist.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketItem.GetOrAdd(LabApi.Features.Wrappers.Pickup)">
            <summary>
            Gets or adds a <see cref="T:LabApi.Features.Wrappers.PocketItem"/>.
            </summary>
            <param name="pickup">The <see cref="T:LabApi.Features.Wrappers.Pickup"/> to get or add to the pocket dimension.</param>
            <returns>The <see cref="T:LabApi.Features.Wrappers.PocketItem"/> instance.</returns>
            <remarks>
            If the pickup is not in the pocket dimension it is teleported there on creation of the <see cref="T:LabApi.Features.Wrappers.PocketItem"/>.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketItem.Initialize">
            <summary>
            Initializes the PocketItem wrapper by subscribing to the PocketDimensionTeleport events.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketItem.#ctor(InventorySystem.Items.Pickups.ItemPickupBase,PlayerRoles.PlayableScps.Scp106.Scp106PocketItemManager.PocketItem)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="pickup">The item pickup in the pocket dimension.</param>
            <param name="pocketItem">The base <see cref="T:PlayerRoles.PlayableScps.Scp106.Scp106PocketItemManager.PocketItem"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.PocketItem.Pickup">
            <summary>
            The item in the pocket dimension.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PocketItem.Base">
            <summary>
            The base <see cref="T:PlayerRoles.PlayableScps.Scp106.Scp106PocketItemManager.PocketItem"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PocketItem.TriggerDelay">
            <summary>
            Gets or sets the delay before the item pickup drops out or is destroyed from the pocket dimension.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PocketItem.WillBeDestroyed">
            <summary>
            Gets or sets whether the item pickup is destroyed after the <see cref="P:LabApi.Features.Wrappers.PocketItem.TriggerDelay"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PocketItem.DropPosition">
            <summary>
            The position to drop the item pickup if <see cref="P:LabApi.Features.Wrappers.PocketItem.WillBeDestroyed"/> is set to false.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PocketItem.IsWarningSent">
            <summary>
            Gets whether a warning cue was sent to the players about a dropping item pickup.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.PocketTeleport">
            <summary>
            The wrapper over the <see cref="T:PocketDimensionTeleport"/> base object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PocketTeleport.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.PocketTeleport"/> instances currently in the game.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PocketTeleport.Dictionary">
            <summary>
            Contains all the cached teleports in the game, accessible through their <see cref="T:PocketDimensionTeleport"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketTeleport.Get(PocketDimensionTeleport)">
            <summary>
            Gets the wrapper given the base game <see cref="T:PocketDimensionTeleport"/> instance.
            </summary>
            <param name="pocketTeleport">The base game object.</param>
            <returns>The associated wrapper.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketTeleport.Initialize">
            <summary>
            Initializes the Teleport wrapper by subscribing to the PocketDimensionTeleport events.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketTeleport.OnAdded(PocketDimensionTeleport)">
            <summary>
            A private method to handle the addition of <see cref="T:PocketDimensionTeleport"/> instances.
            </summary>
            <param name="pocketTeleport">The base game instance.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketTeleport.OnRemoved(PocketDimensionTeleport)">
            <summary>
            A private method to handle the removal of <see cref="T:PocketDimensionTeleport"/> instances.
            </summary>
            <param name="pocketTeleport">The base game instance.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketTeleport.#ctor(PocketDimensionTeleport)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="pocketDimensionTeleport">The <see cref="T:PocketDimensionTeleport"/> of the teleport.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.PocketTeleport.Base">
            <summary>
            The base object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PocketTeleport.GameObject">
            <summary>
            The <see cref="T:UnityEngine.GameObject"/> of the pocket teleport.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PocketTeleport.Transform">
            <summary>
            The <see cref="T:UnityEngine.Transform"/> of the pocket teleport.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PocketTeleport.Collider">
            <summary>
            The collider used for player detection.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PocketTeleport.IsExit">
            <summary>
            Gets or sets whether the <see cref="T:LabApi.Features.Wrappers.PocketTeleport"/> is an exit.
            </summary>
            <remarks>
            Teleports that are not exits, kill the player on entering.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.PocketTeleport.Position">
            <summary>
            Gets or set the local position of the pocket teleport relative to the pocket dimension.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PocketTeleport.Rotation">
            <summary>
            Gets or sets the rotation of the pocket teleport.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PocketTeleport.Scale">
            <summary>
            Gets or sets the scale of the pocket teleport.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PocketTeleport.Radius">
            <summary>
            Gets or sets the radius of the <see cref="P:LabApi.Features.Wrappers.PocketTeleport.Collider">Sphere Collider</see> used for player detection.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketTeleport.Spawn(UnityEngine.Vector3)">
            <summary>
            Spawns a new pocket teleport.
            </summary>
            <param name="localPosition">The position relative to the pocket dimension.</param>
            <returns>The created <see cref="T:LabApi.Features.Wrappers.PocketTeleport"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.PocketTeleport.Destroy">
            <summary>
            Destroys the <see cref="T:LabApi.Features.Wrappers.PocketTeleport"/> removing it from the server.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Room">
            <summary>
            The wrapper representing <see cref="T:MapGeneration.RoomIdentifier">room identifiers</see>, the in-game rooms.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Room.Dictionary">
            <summary>
            Contains all the cached rooms in the game, accessible through their <see cref="T:MapGeneration.RoomIdentifier"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Room.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.Room"/> instances currently in the game.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Room.FindPath(LabApi.Features.Wrappers.Room,LabApi.Features.Wrappers.Room,System.Func{LabApi.Features.Wrappers.Room,System.Int32})">
            <summary>
            Gets path from <paramref name="start"/> to <paramref name="end"/>.<br/>
            Path is found via <see href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm">Dijkstra's algorithm</see>. Path still works between zones (including via elevators) as it uses <see cref="P:LabApi.Features.Wrappers.Room.AdjacentRooms"/>.<br/>
            If no path is found, an empty list is returned.
            </summary>
            <param name="start">The starting room.</param>
            <param name="end">The ending room.</param>
            <param name="weightFunction">The weight function to calculate cost to the next room. Can be change if you prefer to go around tesla gates and such.</param>
            <returns>A pooled list containing rooms from <paramref name="start"/> to <paramref name="end"/> (including these rooms).</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Room.FindPath(LabApi.Features.Wrappers.Room,LabApi.Features.Wrappers.Room)">
            <inheritdoc cref="M:LabApi.Features.Wrappers.Room.FindPath(LabApi.Features.Wrappers.Room,LabApi.Features.Wrappers.Room,System.Func{LabApi.Features.Wrappers.Room,System.Int32})"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.Room.Get(MapGeneration.RoomIdentifier)">
            <summary>
            Gets the room wrapper from the <see cref="P:LabApi.Features.Wrappers.Room.Dictionary"/>, or creates a new one if it doesn't exist.
            </summary>
            <param name="roomIdentifier">The identifier of the room.</param>
            <returns>The requested room.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Room.Get(MapGeneration.RoomName)">
            <summary>
            Gets the room by its <see cref="T:MapGeneration.RoomName"/>.
            </summary>
            <param name="roomName">The name of the room.</param>
            <returns>The requested room.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Room.Get(MapGeneration.RoomShape)">
            <summary>
            Gets the rooms by their shape.
            </summary>
            <param name="roomShape">The shape of the rooms to get.</param>
            <returns>The rooms with the specified shape.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Room.Get(MapGeneration.FacilityZone)">
            <summary>
            Gets the rooms in the specified zone.
            </summary>
            <param name="facilityZone">The zone to get the rooms from.</param>
            <returns>The rooms in the specified zone.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Room.Get(System.Collections.Generic.IEnumerable{MapGeneration.RoomIdentifier})">
            <summary>
            Gets the rooms from the provided <see cref="T:MapGeneration.RoomIdentifier"/>s.
            </summary>
            <param name="roomIdentifiers">The room identifiers to get the rooms from.</param>
            <returns>The requested rooms.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Room.TryGetRoomAtPosition(UnityEngine.Vector3,LabApi.Features.Wrappers.Room@)">
            <summary>
            Tries to get the room at the specified position.
            </summary>
            <param name="position">The position to get the room at.</param>
            <param name="room">The room at the specified position.</param>
            <returns>Whether the room was found at the specified position.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Room.GetRoomAtPosition(UnityEngine.Vector3)">
            <summary>
            Gets the room at the specified position.
            </summary>
            <param name="position">The position to get the room at.</param>
            <returns>The room at the specified position or <see langword="null"/> if no room was found.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Room.Initialize">
            <summary>
            Initializes the Room wrapper by subscribing to the RoomIdentifier events.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Room.CreateRoomWrapper(MapGeneration.RoomIdentifier)">
            <summary>
            Creates a new wrapper from the base room object.
            </summary>
            <param name="roomIdentifier">The base <see cref="T:MapGeneration.RoomIdentifier"/> object.</param>
            <returns>The newly created wrapper.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Room.AddRoom(MapGeneration.RoomIdentifier)">
            <summary>
            Handles the creation of a room in the server.
            </summary>
            <param name="roomIdentifier">The <see cref="T:MapGeneration.RoomIdentifier"/> of the room.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Room.RemoveRoom(MapGeneration.RoomIdentifier)">
            <summary>
            Handles the removal of a room from the server.
            </summary>
            <param name="roomIdentifier">The <see cref="T:MapGeneration.RoomIdentifier"/> of the room.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Room.#ctor(MapGeneration.RoomIdentifier)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="roomIdentifier">The identifier of the room.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Room.Base">
            <summary>
            The base object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Room.IsDestroyed">
            <summary>
            Gets whether the base room instance was destroyed.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Room.Shape">
            <summary>
            The room's shape.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Room.Name">
            <summary>
            The room's name.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Room.Zone">
            <summary>
            The zone in which this room is located.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Room.ConnectedRooms">
            <summary>
            Gets the room's neighbors.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Room.AdjacentRooms">
            <summary>
            Gets the room's adjacent rooms where the player can traverse to.
            Includes rooms that can be traversed to via elevator.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Room.Doors">
            <summary>
            Gets the doors that are a part of this room.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Room.LightController">
            <summary>
            Gets the first light controller for this room.<br/>
            <note>
            Use <see cref="P:LabApi.Features.Wrappers.Room.AllLightControllers"/> if you wish to modify all lights in this room.
            </note>
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Room.AllLightControllers">
            <summary>
            Gets all light controllers for this specified room.<br/>
            Some rooms such as 049, warhead and such may have multiple light controllers as they are split by the elevator.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Room.Transform">
            <summary>
            Gets the room's <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Room.GameObject">
            <summary>
            Gets the room's <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Room.Position">
            <summary>
            Gets the room's position.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Room.Rotation">
            <summary>
            Gets the room's rotation.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Room.Players">
            <summary>
            Gets a collection of players in the room.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Room.Cameras">
            <summary>
            Gets a collection of cameras in the room.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Room.CanCache">
            <summary>
            Gets whether the room wrapper is allowed to be cached.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Room.ToString">
            <inheritdoc />
        </member>
        <member name="M:LabApi.Features.Wrappers.Room.GetClosestLightController(LabApi.Features.Wrappers.Player)">
            <summary>
            Gets the closest <see cref="T:LabApi.Features.Wrappers.LightsController"/> to the specified player.
            </summary>
            <param name="player">The player to check the closest light controller for.</param>
            <returns>The closest light controller. May return <see langword="null"/> if player is not alive or is not in any room.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Room.OnRemoved">
            <summary>
            An internal virtual method to signal to derived wrappers that the base has been destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.BaseGameItemProcessor">
            <summary>
            Adapter for handling the base game <see cref="T:Scp914.Processors.Scp914ItemProcessor"/>.
            Used when <see cref="M:LabApi.Features.Wrappers.Scp914.GetItemProcessor(ItemType)"/> is used on a <see cref="T:ItemType"/> which is using a base game item processor.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.BaseGameItemProcessor.#ctor(Scp914.Processors.Scp914ItemProcessor)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="processor">The base game <see cref="T:Scp914.Processors.Scp914ItemProcessor"/>.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.BaseGameItemProcessor.Processor">
            <summary>
            Get base game <see cref="T:Scp914.Processors.Scp914ItemProcessor"/> instance.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.BaseGameItemProcessor.UsePickupMethodOnly">
            <inheritdoc/>
        </member>
        <member name="M:LabApi.Features.Wrappers.BaseGameItemProcessor.UpgradeItem(Scp914.Scp914KnobSetting,LabApi.Features.Wrappers.Item)">
            <inheritdoc/>
        </member>
        <member name="M:LabApi.Features.Wrappers.BaseGameItemProcessor.UpgradePickup(Scp914.Scp914KnobSetting,LabApi.Features.Wrappers.Pickup)">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Features.Wrappers.ItemProcessorAdapter">
            <summary>
            An internal adapter class to handle the conversion of the wrapper <see cref="T:LabApi.Features.Interfaces.IScp914ItemProcessor"/> interface to the base game <see cref="T:Scp914.Processors.Scp914ItemProcessor"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ItemProcessorAdapter.Processor">
            <summary>
            The user supplied <see cref="T:LabApi.Features.Interfaces.IScp914ItemProcessor"/> implementation.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.ItemProcessorAdapter.UpgradeInventoryItem(Scp914.Scp914KnobSetting,InventorySystem.Items.ItemBase)">
            <summary>
            Used internally by the base game.
            </summary>
            <param name="setting">The setting to update the item.</param>
            <param name="item">The base game item instance.</param>
            <returns>The <see cref="T:Scp914.Scp914Result"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.ItemProcessorAdapter.UpgradePickup(Scp914.Scp914KnobSetting,InventorySystem.Items.Pickups.ItemPickupBase)">
            <summary>
            Used internally by the base game.
            </summary>
            <param name="setting">The setting to update the item.</param>
            <param name="pickup">The base game pickup instance.</param>
            <returns>The <see cref="T:Scp914.Scp914Result"/>.</returns>
        </member>
        <member name="T:LabApi.Features.Wrappers.Scp914">
            <summary>
            The wrapper over the <see cref="T:MapGeneration.RoomIdentifier"/> that represents the SCP-914 room.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp914.Instance">
            <summary>
            Gets the current <see cref="T:LabApi.Features.Wrappers.Scp914"/> instance.
            </summary>
            <remarks>
            May be <see langword="null"/> if the map has not been generated yet or was previously destroyed.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp914.ItemProcessorCache">
            <summary>
            Contains all <see cref="T:LabApi.Features.Interfaces.IScp914ItemProcessor"/> instances, accessible by their <see cref="T:InventorySystem.Items.ItemBase"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp914.KnobSetting">
            <summary>
            Gets or sets the <see cref="T:Scp914.Scp914KnobSetting"/> of the SCP-914 machine.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp914.IsUpgrading">
            <summary>
            Gets or sets whether the SCP-914 machine is currently upgrading.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp914.Mode">
            <summary>
            Gets or sets the <see cref="T:Scp914.Scp914Mode"/> used by SCP-914 for upgrading.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp914.IntakeChamberTransform">
            <summary>
            Gets the <see cref="T:UnityEngine.Transform"/> of the intake chamber of the SCP-914 machine.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp914.OutputChamberTransform">
            <summary>
            Gets the <see cref="T:UnityEngine.Transform"/> of the output chamber of the SCP-914 machine.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp914.ChamberSize">
            <summary>
            Gets or sets the size of the SCP-914 chamber.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp914.KnobChangeSequenceTime">
            <summary>
            Gets or sets the minimum time before you can interact with the SCP-914 knob after changing it.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp914.UpgradeSequenceTime">
            <summary>
            Gets or sets the minimum time before you can interact with the SCP-914 upgrade key after previously activating it.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp914.SequenceCooldown">
            <summary>
            Gets or sets the current sequence cooldown.
            </summary>
            <remarks>
            This value is set by both <see cref="P:LabApi.Features.Wrappers.Scp914.KnobChangeSequenceTime"/> and <see cref="P:LabApi.Features.Wrappers.Scp914.UpgradeSequenceTime"/> depending on what interaction was made.
            To check the last interaction see <see cref="P:LabApi.Features.Wrappers.Scp914.IsUpgrading"/>.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp914.DoorCloseDelay">
            <summary>
            Gets or sets the time after starting the upgrade sequence to close the SCP-914 chamber doors.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp914.ItemUpgradeDelay">
            <summary>
            Gets or sets the time after starting the upgrade sequence to upgrade/teleport items/players.
            </summary>
            <remarks>
            Make sure this value is less than the <see cref="P:LabApi.Features.Wrappers.Scp914.UpgradeSequenceTime"/> otherwise it is never triggered.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp914.DoorOpenDelay">
            <summary>
            Gets or sets the time after starting the upgrade sequence to open the SCP-914 chamber doors.
            </summary>
            <remarks>
            Make sure this value is less than the <see cref="P:LabApi.Features.Wrappers.Scp914.UpgradeSequenceTime"/> otherwise the doors will never open.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp914.Interact(Scp914.Scp914InteractCode,LabApi.Features.Wrappers.Player)">
            <summary>
            Interact with the SCP-914 machine.
            </summary>
            <param name="interactCode">The type of interaction.</param>
            <param name="player">The <see cref="T:LabApi.Features.Wrappers.Player"/> that triggered the interaction or <see langword="null"/> if not specified.</param>
            <remarks>
            Interacting will also trigger SCP-914 related events.
            If you would not like to trigger events use <see cref="P:LabApi.Features.Wrappers.Scp914.KnobSetting"/> and <see cref="P:LabApi.Features.Wrappers.Scp914.IsUpgrading"/> instead.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp914.PlaySound(Scp914.Scp914Sound)">
            <summary>
            Plays a <see cref="T:Scp914.Scp914Sound"/>.
            </summary>
            <param name="sound">The sound to play.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp914.GetItemProcessor(ItemType)">
            <summary>
            Gets the <see cref="T:LabApi.Features.Interfaces.IScp914ItemProcessor"/> for the specified type.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> to get the associated <see cref="T:LabApi.Features.Interfaces.IScp914ItemProcessor"/>.</param>
            <returns>The associated <see cref="T:LabApi.Features.Interfaces.IScp914ItemProcessor"/> for the <see cref="T:ItemType"/> if found, otherwise <see langword="null"/>.</returns>
            <remarks>
            If the item processor is a base game <see cref="T:Scp914.Processors.Scp914ItemProcessor"/>, <see cref="T:LabApi.Features.Interfaces.IScp914ItemProcessor"/> will be a <see cref="T:LabApi.Features.Wrappers.BaseGameItemProcessor"/>.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp914.GetAllItemProcessors">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> of all the item types and their associated item processors.
            </summary>
            <returns>The Dictionary containing all the item types and associated processors.</returns>
            <remarks>
            If the item processor is a base game <see cref="T:Scp914.Processors.Scp914ItemProcessor"/>, <see cref="T:LabApi.Features.Interfaces.IScp914ItemProcessor"/> will be a <see cref="T:LabApi.Features.Wrappers.BaseGameItemProcessor"/>.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp914.SetItemProcessor``1(ItemType,``0)">
            <summary>
            Sets the <see cref="T:LabApi.Features.Interfaces.IScp914ItemProcessor"/> used by SCP-914 for the specified <see cref="T:ItemType"/>.
            </summary>
            <typeparam name="T">The class type that implements the <see cref="T:LabApi.Features.Interfaces.IScp914ItemProcessor"/> interface.</typeparam>
            <param name="type">The <see cref="T:ItemType"/> to set the processor to.</param>
            <param name="processor">An instance of the processor.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp914.SetItemProcessor``1(System.Func{LabApi.Features.Wrappers.Item,System.Boolean},``0)">
            <summary>
            Sets the <see cref="T:LabApi.Features.Interfaces.IScp914ItemProcessor"/> used by SCP-914 for <see cref="T:ItemType">Item Types</see> that match the predicate.
            </summary>
            <typeparam name="T">The class type that implements the <see cref="T:LabApi.Features.Interfaces.IScp914ItemProcessor"/> interface.</typeparam>
            <param name="predicate">A predicate to match which <see cref="T:ItemType">Item Types</see> to set the processor on using <see cref="T:LabApi.Features.Wrappers.Item"/> as a wrapper.</param>
            <param name="processor">An instance of the processor.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp914.SetItemProcessor``1(ItemType)">
            <summary>
            Sets the base game <see cref="T:Scp914.Processors.Scp914ItemProcessor"/> used by SCP-914 for the specified <see cref="T:ItemType"/>.
            </summary>
            <typeparam name="T">The class type that implements the <see cref="T:Scp914.Processors.Scp914ItemProcessor"/> abstract class.</typeparam>
            <param name="type">The <see cref="T:ItemType"/> to set the processor to.</param>
            <remarks>
            Note that this is for setting the base game <see cref="T:Scp914.Processors.Scp914ItemProcessor"/> for an item, you should always use <see cref="T:LabApi.Features.Interfaces.IScp914ItemProcessor"/> instead unless using already existing code see <see cref="M:LabApi.Features.Wrappers.Scp914.SetItemProcessor``1(ItemType,``0)"/>.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp914.SetItemProcessor``1(System.Func{LabApi.Features.Wrappers.Item,System.Boolean})">
            <summary>
            Sets the base game <see cref="T:Scp914.Processors.Scp914ItemProcessor"/> used by SCP-914 for <see cref="T:ItemType">Item Types</see> that match the predicated.
            </summary>
            <typeparam name="T">The class type that implements the <see cref="T:Scp914.Processors.Scp914ItemProcessor"/> abstract class.</typeparam>
            <param name="predicate">A predicate to match which <see cref="T:ItemType">Item Types</see> to set the processor on using <see cref="T:LabApi.Features.Wrappers.Item"/> as a wrapper.</param>
            <remarks>
            Note that this is for setting the base game <see cref="T:Scp914.Processors.Scp914ItemProcessor"/> for an item, you should always use <see cref="T:LabApi.Features.Interfaces.IScp914ItemProcessor"/> instead unless using already existing code.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp914.#ctor(MapGeneration.RoomIdentifier)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="roomIdentifier">The room identifier for the pocket dimension.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp914.Gate">
            <summary>
            Gets the main <see cref="T:LabApi.Features.Wrappers.Gate"/> of the SCP-914 room.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp914.Entrance">
            <summary>
            Gets the entrance <see cref="T:LabApi.Features.Wrappers.Door"/> of the SCP-914 room.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp914.IntakeDoor">
            <summary>
            Gets the intake <see cref="T:LabApi.Features.Wrappers.Door"/> of the SCP-914 machine.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp914.OutputDoor">
            <summary>
            Gets the output <see cref="T:LabApi.Features.Wrappers.Door"/> of the SCP-914 machine.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp914.OnRemoved">
            <summary>
            An internal method to set the instance to null when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Round">
            <summary>
            A static wrapper for any round related features.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Round.IsRoundStarted">
            <summary>
            Gets whether the round has started or not.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Round.IsRoundInProgress">
            <summary>
            Gets whether the round is started and not ended.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Round.IsRoundEnded">
            <summary>
            Gets a value indicating whether the round is ended or not.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Round.CanRoundEnd">
            <summary>
            Gets whether the round can end if there is only 1 team alive remaining.<br/>
            <remarks>IMPORTANT: This does NOT check win conditions! Only whether the round is locked and if there is a required amount of players.</remarks>
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Round.KeepRoundOnOne">
            <summary>
            Gets or sets whether the round should end if is active and there is only one player on the server.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Round.IsLocked">
            <summary>
            Gets or sets a value indicating whether the round is locked or not.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Round.IsLobbyLocked">
            <summary>
            Gets or sets a value indicating whether the lobby is locked or not.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Round.ExtraTargets">
            <summary>
            Gets or sets the current extra targets count for SCPs.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Round.ScpTargetsAmount">
            <summary>
            Gets the current amount of targets for SCPs. Use <see cref="P:LabApi.Features.Wrappers.Round.ExtraTargets"/> to add/remove any extra.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Round.TotalDeaths">
            <summary>
            Gets the amount of total deaths during the round.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Round.KilledBySCPs">
            <summary>
            Gets the amount of total kills by SCPs.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Round.EscapedClassD">
            <summary>
            Gets the amount of escaped Class D.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Round.EscapedScientists">
            <summary>
            Gets rhe amount of escaped Scientists.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Round.SurvivingSCPs">
            <summary>
            Gets the amount of SCPs alive at the end of round.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Round.ChangedIntoZombies">
            <summary>
            Gets the amount of people that turned into zombies.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Round.Duration">
            <summary>
            Gets the duration of the current round.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Round.Start">
            <summary>
            Start the round.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Round.Restart(System.Boolean,System.Boolean,ServerStatic.NextRoundAction)">
            <summary>
            Restarts the round.
            </summary>
            <param name="fastRestart">Whether or not it fast restart is enabled.</param>
            <param name="overrideRestartAction">Overrides stop next round action.</param>
            <param name="restartAction">The restart action.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Round.RestartSilently">
            <summary>
            Restarts the round silently.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Round.End(System.Boolean)">
            <summary>
            Attempts to end the current round.<br></br>
            </summary>
            <param name="force">Whether the round should be forced to end.</param>
            <returns>If the round was ended.</returns>
        </member>
        <member name="T:LabApi.Features.Wrappers.ExperimentalWeaponLocker">
            <summary>
            Represents the ExperimentalWeaponLocker prefab instance.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ExperimentalWeaponLocker.Dictionary">
            <summary>
            Contains all the cached experimental weapon lockers, accessible through their <see cref="T:MapGeneration.Distributors.ExperimentalWeaponLocker"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ExperimentalWeaponLocker.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.ExperimentalWeaponLocker"/> instances.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.ExperimentalWeaponLocker.Get(MapGeneration.Distributors.ExperimentalWeaponLocker)">
            <summary>
            Gets the experimental weapon locker wrapper from the <see cref="P:LabApi.Features.Wrappers.ExperimentalWeaponLocker.Dictionary"/>, or creates a new one if it doesn't exist and the provided <see cref="T:MapGeneration.Distributors.ExperimentalWeaponLocker"/> was not <see langword="null"/>.
            </summary>
            <param name="baseLocker">The <see cref="P:LabApi.Features.Wrappers.ExperimentalWeaponLocker.Base"/> of the experimental weapon locker.</param>
            <returns>The requested wrapper or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.ExperimentalWeaponLocker.#ctor(MapGeneration.Distributors.ExperimentalWeaponLocker)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseExperimentalWeaponLocker">The base <see cref="T:MapGeneration.Distributors.ExperimentalWeaponLocker"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.ExperimentalWeaponLocker.Base">
            <summary>
            The base <see cref="T:MapGeneration.Distributors.ExperimentalWeaponLocker"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ExperimentalWeaponLocker.Chamber">
            <summary>
            The experimental weapon's chamber.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ExperimentalWeaponLocker.IsOpen">
            <summary>
            Gets or sets whether the experimental weapon locker is open.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ExperimentalWeaponLocker.CanInteract">
            <summary>
            Gets whether the experimental weapon locker can be interacted with by a <see cref="T:LabApi.Features.Wrappers.Player"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ExperimentalWeaponLocker.RequiredPermissions">
            <summary>
            Gets or sets the <see cref="T:Interactables.Interobjects.DoorUtils.DoorPermissionFlags"/> required by the <see cref="T:LabApi.Features.Wrappers.Player"/> to open/close the experimental weapon locker.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ExperimentalWeaponLocker.TargetCooldown">
            <summary>
            Gets or sets the latest cooldown duration on the experimental weapon locker.
            </summary>
            <remarks>
            Cooldown for door open/close and denied interactions.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.ExperimentalWeaponLocker.AcceptableItems">
            <summary>
            Gets or sets the array of acceptable <see cref="T:ItemType">item types</see> that can spawn when filling the experimental weapon locker with loot.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.ExperimentalWeaponLocker.Fill">
            <summary>
            Fill the experimental weapon locker with random loot from <see cref="P:LabApi.Features.Wrappers.Locker.Loot"/> filtered by the <see cref="P:LabApi.Features.Wrappers.ExperimentalWeaponLocker.AcceptableItems"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.ExperimentalWeaponLocker.GetAllItems">
            <summary>
            Gets all <see cref="T:LabApi.Features.Wrappers.Pickup"/> instances currently in the experimental weapon locker.
            </summary>
            <returns>The result set of all <see cref="T:LabApi.Features.Wrappers.Pickup"/> instances.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.ExperimentalWeaponLocker.RemoveAllItems">
            <summary>
            Removes all <see cref="T:LabApi.Features.Wrappers.Pickup"/> instances from the experimental weapon locker.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.ExperimentalWeaponLocker.RemoveItem(LabApi.Features.Wrappers.Pickup)">
            <summary>
            Removes the specified <see cref="T:LabApi.Features.Wrappers.Pickup"/> from the experimental weapon locker.
            </summary>
            <param name="pickup">The <see cref="T:LabApi.Features.Wrappers.Pickup"/> instance to remove.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.ExperimentalWeaponLocker.AddItem(ItemType)">
            <summary>
            Creates a new <see cref="T:LabApi.Features.Wrappers.Pickup"/> of the specified <see cref="T:ItemType"/> to add to the experimental weapon locker.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the new pickup.</param>
            <returns>The created <see cref="T:LabApi.Features.Wrappers.Pickup"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.ExperimentalWeaponLocker.Interact(LabApi.Features.Wrappers.Player)">
            <summary>
            Interact with the experimental weapon locker.
            </summary>
            <param name="player">The <see cref="T:LabApi.Features.Wrappers.Player"/> that trigged the interaction.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.ExperimentalWeaponLocker.PlayDeniedSound(Interactables.Interobjects.DoorUtils.DoorPermissionFlags)">
            <summary>
            Plays the Access Denied sound for the experimental weapon locker.
            </summary>
            <param name="flags">The <see cref="T:Interactables.Interobjects.DoorUtils.DoorPermissionFlags"/> that will be shown on the keycard reader.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.ExperimentalWeaponLocker.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the abase object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Generator">
            <summary>
            The wrapper representing <see cref="T:MapGeneration.Distributors.Scp079Generator">generators</see>, the in-game generators.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Generator.Dictionary">
            <summary>
            Contains all the cached <see cref="T:MapGeneration.Distributors.Scp079Generator">generators</see> in the game, accessible through their <see cref="T:MapGeneration.Distributors.Scp079Generator"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Generator.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.Generator"/> instances currently in the game.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Generator.GeneratorsByRoom">
            <summary>
            Contains generators in a list by room they are in. Generators that have been spawned without an assigned room are not inside of this collection.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Generator.Get(MapGeneration.Distributors.Scp079Generator)">
            <summary>
            Gets the generator wrapper from the <see cref="P:LabApi.Features.Wrappers.Generator.Dictionary"/>, or creates a new one if it doesn't exist and the provided <see cref="T:MapGeneration.Distributors.Scp079Generator"/> was not <see langword="null"/>.
            </summary>
            <param name="scp079Generator">The <see cref="T:MapGeneration.Distributors.Scp079Generator"/> of the generator.</param>
            <returns>The requested wrapper or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Generator.TryGetFromRoom(LabApi.Features.Wrappers.Room,System.Collections.Generic.List{LabApi.Features.Wrappers.Generator}@)">
            <summary>
            Gets the generator wrapper from the <see cref="P:LabApi.Features.Wrappers.Generator.GeneratorsByRoom"/> or returns <see langword="null"/> if specified room does not have any.
            </summary>
            <param name="room">Target room.</param>
            <param name="generators">Generators found.</param>
            <returns>Whether the generator was found.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Generator.InitializeCaching">
            <summary>
            Initializes the generators by room caching for map generation.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Generator.#ctor(MapGeneration.Distributors.Scp079Generator)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="generator">The <see cref="T:MapGeneration.Distributors.Scp079Generator"/> of the generator.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Generator.Base">
            <summary>
            The base object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Generator.TotalActivationTime">
            <summary>
            Gets or sets the activation time it takes for generator to go from <see cref="P:LabApi.Features.Wrappers.Generator.TotalActivationTime">maximum time</see> (this value) to 0.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Generator.TotalDeactivationTime">
            <summary>
            Gets or sets the activation time it takes for generator to go from 0 to <see cref="P:LabApi.Features.Wrappers.Generator.TotalActivationTime">maximum time</see>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Generator.RequiredPermissions">
            <summary>
            Gets or sets the required <see cref="T:Interactables.Interobjects.DoorUtils.DoorPermissionFlags"/> to unlock the generator.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Generator.DropdownSpeed">
            <summary>
            Gets the dropdown speed at which is generator countdown going back up to the maximum value.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Generator.ActivationReady">
            <summary>
            Gets whether the generation is ready to be activated.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Generator.IsOpen">
            <summary>
            Gets or sets whether the generator is opened.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Generator.IsUnlocked">
            <summary>
            Gets or sets whether the generator is unlocked.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Generator.ActivationTime">
            <summary>
            Gets the time it takes the generator to be activated (lever pulled).
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Generator.Engaged">
            <summary>
            Gets or sets whether the generator is engaged.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Generator.Activating">
            <summary>
            Gets or sets whether the generator is activating.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Generator.RemainingTime">
            <summary>
            Gets or sets the remaining amount of seconds till activation.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Generator.ServerInteract(LabApi.Features.Wrappers.Player,MapGeneration.Distributors.Scp079Generator.GeneratorColliderId)">
            <summary>
            Runs the interaction of specified <see cref="T:LabApi.Features.Wrappers.Player"/> on specified <see cref="T:MapGeneration.Distributors.Scp079Generator.GeneratorColliderId"/> collider.
            </summary>
            <param name="player">The player to trigger the interaction.</param>
            <param name="collider">The <see cref="T:MapGeneration.Distributors.Scp079Generator.GeneratorColliderId"/> triggered.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Generator.PlayerDeniedBeep(Interactables.Interobjects.DoorUtils.DoorPermissionFlags)">
            <summary>
            Plays the denied sound cue on the client.
            </summary>
            <param name="flags">The permissions used to attempt opening the generator. Used to animate the generator panel.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Generator.OnRemove">
            <summary>
            An internal method remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.LargeLocker">
            <summary>
            Represents the LargeLocker prefab instances.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LargeLocker.Dictionary">
            <summary>
            Contains all the cached large lockers, accessible through their <see cref="T:MapGeneration.Distributors.Locker"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LargeLocker.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.LargeLocker"/> instances.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.LargeLocker.#ctor(MapGeneration.Distributors.Locker)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseLocker">The base <see cref="T:MapGeneration.Distributors.Locker"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.LargeLocker.TopLeft">
            <summary>
            Gets the large chamber that is at the top left.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LargeLocker.TopMiddle">
            <summary>
            Gets the large chamber that is at the top middle.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LargeLocker.TopRight">
            <summary>
            Gets the large chamber that is at the top right.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LargeLocker.BottomLeft">
            <summary>
            Gets the large chamber that is at the bottom left.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LargeLocker.BottomRight">
            <summary>
            Gets the large chamber that is at the bottom right.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LargeLocker.MiddleLeft">
            <summary>
            Gets the small chamber that is at the middle left.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LargeLocker.Center">
            <summary>
            Gets the small chamber that is at the center.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LargeLocker.MiddleRight">
            <summary>
            Gets the small chamber that is at the middle right.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LargeLocker.BottomMiddle">
            <summary>
            Gets the small chamber that is at the bottom middle.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LargeLocker.Drawer">
            <summary>
            Gets the drawer chamber that is at the bottom.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.LargeLocker.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Locker">
            <summary>
            The wrapper over the <see cref="T:MapGeneration.Distributors.Locker"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Locker.Dictionary">
            <summary>
            Contains all the cached lockers, accessible through their <see cref="T:MapGeneration.Distributors.Locker"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Locker.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.Locker"/> instances.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Locker.Get(MapGeneration.Distributors.Locker)">
            <summary>
            Gets the locker wrapper from the <see cref="P:LabApi.Features.Wrappers.Locker.Dictionary"/>, or creates a new one if it doesn't exist and the provided <see cref="T:MapGeneration.Distributors.Locker"/> was not <see langword="null"/>.
            </summary>
            <param name="baseLocker">The <see cref="P:LabApi.Features.Wrappers.Locker.Base"/> of the locker.</param>
            <returns>The requested wrapper or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Locker.#ctor(MapGeneration.Distributors.Locker)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseLocker">The base <see cref="T:MapGeneration.Distributors.Locker"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Locker.Base">
            <summary>
            The base <see cref="T:MapGeneration.Distributors.Locker"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Locker.Chambers">
            <summary>
            Gets a readonly list of all locker's <see cref="T:LabApi.Features.Wrappers.LockerChamber"/> instances.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Locker.Loot">
            <summary>
            Gets or sets the <see cref="T:MapGeneration.Distributors.LockerLoot"/> used to fill the chamber.
            </summary>
            <remarks>
            Loot is used when the locker is first spawned and when calling one of the <see cref="M:LabApi.Features.Wrappers.Locker.FillChambers"/> methods.
            Use <see cref="M:LabApi.Features.Wrappers.LockerChamber.AddItem(ItemType)"/> or <see cref="M:LabApi.Features.Wrappers.LockerChamber.RemoveItem(LabApi.Features.Wrappers.Pickup)"/> if you want to edit the contents of chambers directly.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Locker.MinChambersToFill">
            <summary>
            Gets or sets the minimum number of chambers to fill.
            </summary>
            <remarks>
            Setting this to 0 will fill all chambers.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Locker.MaxChambersToFill">
            <summary>
            Gets or sets the maximum number of chambers to fill.
            This value is ignored if <see cref="P:LabApi.Features.Wrappers.Locker.MinChambersToFill"/> is 0.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Locker.IsEmpty">
            <summary>
            Gets whether all the <see cref="P:LabApi.Features.Wrappers.Locker.Chambers"/> are <see cref="P:LabApi.Features.Wrappers.LockerChamber.IsEmpty"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Locker.AddLockerLoot(ItemType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a new <see cref="T:MapGeneration.Distributors.LockerLoot"/> entry to the possible spawnable <see cref="P:LabApi.Features.Wrappers.Locker.Loot"/>.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> to spawn. <see cref="T:LabApi.Features.Wrappers.LockerChamber"/> might only support certain <see cref="T:ItemType"/> values see <see cref="P:LabApi.Features.Wrappers.LockerChamber.AcceptableItems"/>.</param>
            <param name="remainingUses">The number of times this loot is selected to spawn in a chamber.</param>
            <param name="probabilityPoints">The probability weight given for this loot to spawn over other <see cref="T:MapGeneration.Distributors.LockerLoot"/> instances.</param>
            <param name="minPerChamber">The minimum number of items to spawn per chamber.</param>
            <param name="maxPerChamber">The maximum number of items to spawn per chamber.</param>
            <remarks>
            Note that after a chamber is filled the <see cref="T:MapGeneration.Distributors.LockerLoot"/> remaining uses are modified based on how many times it was added to the locker.
            <see cref="T:MapGeneration.Distributors.LockerLoot"/> is only used for when filling a locker see <see cref="M:LabApi.Features.Wrappers.Locker.FillChambers"/>, if you want to change the contents of a locker see <see cref="M:LabApi.Features.Wrappers.LockerChamber.AddItem(ItemType)"/> and <see cref="M:LabApi.Features.Wrappers.LockerChamber.RemoveItem(LabApi.Features.Wrappers.Pickup)"/>.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.Locker.RemoveLockerLoot(MapGeneration.Distributors.LockerLoot)">
            <summary>
            Removes an existing <see cref="T:MapGeneration.Distributors.LockerLoot"/> from the possible spawnable <see cref="P:LabApi.Features.Wrappers.Locker.Loot"/>.
            </summary>
            <param name="loot">The <see cref="T:MapGeneration.Distributors.LockerLoot"/> instance to remove.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Locker.ClearLockerLoot">
            <summary>
            Removes all <see cref="T:MapGeneration.Distributors.LockerLoot"/> instances from <see cref="P:LabApi.Features.Wrappers.Locker.Loot"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Locker.FillChambers">
            <summary>
            Fill chambers randomly with items chosen from <see cref="P:LabApi.Features.Wrappers.Locker.Loot"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Locker.FillAllChambers">
            <summary>
            Fill all chambers randomly with items chosen from <see cref="P:LabApi.Features.Wrappers.Locker.Loot"/>.
            </summary>
            <remarks>
            Ignores <see cref="P:LabApi.Features.Wrappers.Locker.MinChambersToFill"/> and <see cref="P:LabApi.Features.Wrappers.Locker.MaxChambersToFill"/>.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.Locker.ClearAllChambers">
            <summary>
            Removes all items from all chambers.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Locker.OpenAllChambers">
            <summary>
            Opens all chamber doors.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Locker.CloseAllChambers">
            <summary>
            Closes all chamber doors.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Locker.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.LockerChamber">
            <summary>
            The wrapper over the <see cref="T:MapGeneration.Distributors.LockerChamber"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LockerChamber.Dictionary">
            <summary>
            Contains all the cached locker chambers, accessible through their <see cref="T:MapGeneration.Distributors.LockerChamber"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.LockerChamber.Get(MapGeneration.Distributors.LockerChamber)">
            <summary>
            Gets the locker chamber wrapper from the <see cref="P:LabApi.Features.Wrappers.LockerChamber.Dictionary"/> or creates a new if it doesn't exist and the provided <see cref="T:MapGeneration.Distributors.LockerChamber"/> was not null.
            </summary>
            <param name="baseLockerChamber">The <see cref="T:MapGeneration.Distributors.LockerChamber"/> object.</param>
            <returns>The requested locker chamber wrapper or null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.LockerChamber.#ctor(MapGeneration.Distributors.LockerChamber,LabApi.Features.Wrappers.Locker,System.Byte)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseLockerChamber">The base <see cref="T:MapGeneration.Distributors.LockerChamber"/> object.</param>
            <param name="locker">The <see cref="T:LabApi.Features.Wrappers.Locker"/> that has this chamber.</param>
            <param name="id">The id of the chamber inside the locker.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.LockerChamber.Base">
            <summary>
            The base <see cref="T:MapGeneration.Distributors.LockerChamber"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LockerChamber.Locker">
            <summary>
            The <see cref="T:LabApi.Features.Wrappers.Locker"/> that contains this chamber.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LockerChamber.Id">
            <summary>
            The Id of the chamber inside the <see cref="P:LabApi.Features.Wrappers.LockerChamber.Locker"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LockerChamber.IsOpen">
            <summary>
            Gets or sets whether the chamber door is open.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LockerChamber.CanInteract">
            <summary>
            Gets whether  the chamber can be interacted by a <see cref="T:LabApi.Features.Wrappers.Player"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LockerChamber.IsEmpty">
            <summary>
            Gets whether the chamber contains no items.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LockerChamber.RequiredPermissions">
            <summary>
            Gets or sets the <see cref="T:Interactables.Interobjects.DoorUtils.DoorPermissionFlags"/> required by the <see cref="T:LabApi.Features.Wrappers.Player"/> to open/close the chamber.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LockerChamber.TargetCooldown">
            <summary>
            Gets or sets the latest cooldown duration.
            </summary>
            <remarks>
            Cooldown for door open/close and denied interactions.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.LockerChamber.SpawnOnFirstOpening">
            <summary>
            Gets whether <see cref="T:LabApi.Features.Wrappers.Pickup"/> instances are spawned on the client only when the chamber is first opened.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LockerChamber.AcceptableItems">
            <summary>
            Gets or sets the array of acceptable <see cref="T:ItemType">item types</see> that can spawn when filling the chamber with loot.
            </summary>
            <remarks>
            Only used when filling the chamber see <see cref="P:LabApi.Features.Wrappers.Locker.Loot"/> and <see cref="M:LabApi.Features.Wrappers.Locker.FillChambers"/>.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.LockerChamber.Fill">
            <summary>
            Fill chamber with random loot from <see cref="P:LabApi.Features.Wrappers.Locker.Loot"/> filtered by the <see cref="P:LabApi.Features.Wrappers.LockerChamber.AcceptableItems"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.LockerChamber.GetAllItems">
            <summary>
            Gets all <see cref="T:LabApi.Features.Wrappers.Pickup"/> instances currently in the chamber.
            </summary>
            <returns>The result set of all <see cref="T:LabApi.Features.Wrappers.Pickup"/> instances.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.LockerChamber.RemoveAllItems">
            <summary>
            Removes all <see cref="T:LabApi.Features.Wrappers.Pickup"/> instances from the chamber.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.LockerChamber.RemoveItem(LabApi.Features.Wrappers.Pickup)">
            <summary>
            Removes the specified <see cref="T:LabApi.Features.Wrappers.Pickup"/> from the chamber.
            </summary>
            <param name="pickup">The <see cref="T:LabApi.Features.Wrappers.Pickup"/> instance to remove.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.LockerChamber.AddItem(ItemType)">
            <summary>
            Creates a new <see cref="T:LabApi.Features.Wrappers.Pickup"/> of the specified <see cref="T:ItemType"/> to add to the chamber.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the new pickup.</param>
            <returns>The created <see cref="T:LabApi.Features.Wrappers.Pickup"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.LockerChamber.Interact(LabApi.Features.Wrappers.Player)">
            <summary>
            Interact with the chamber.
            <remarks>
            Will uses the currently held item in the interaction.
            </remarks>
            </summary>
            <param name="player">The <see cref="T:LabApi.Features.Wrappers.Player"/> that trigged the interaction.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.LockerChamber.PlayDeniedSound(Interactables.Interobjects.DoorUtils.DoorPermissionFlags)">
            <summary>
            Plays the Access Denied sound for this chamber.
            </summary>
            <param name="permissionUsed">The permissions used to attempt opening the door. Used to animate the door panel.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.LockerChamber.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.MicroPedestal">
            <summary>
            Wrapper for <see cref="T:InventorySystem.Items.MicroHID.MicroHIDPedestal"/> structure.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MicroPedestal.Dictionary">
            <summary>
            Contains all the micro pedestals, accessible through their <see cref="P:LabApi.Features.Wrappers.MicroPedestal.Base"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MicroPedestal.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.MicroPedestal"/> instances.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.MicroPedestal.Get(InventorySystem.Items.MicroHID.MicroHIDPedestal)">
            <summary>
            Gets the micro pedestal wrapper from the <see cref="P:LabApi.Features.Wrappers.MicroPedestal.Dictionary"/>, or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.MicroHID.MicroHIDPedestal"/> was not <see langword="null"/>.
            </summary>
            <param name="basePedestal">The <see cref="P:LabApi.Features.Wrappers.MicroPedestal.Base"/> of the experimental weapon locker.</param>
            <returns>The requested wrapper or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.MicroPedestal.#ctor(InventorySystem.Items.MicroHID.MicroHIDPedestal)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="pedestal">The base <see cref="P:LabApi.Features.Wrappers.MicroPedestal.Base"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.MicroPedestal.Base">
            <summary>
            The base <see cref="P:LabApi.Features.Wrappers.MicroPedestal.Base"/> object.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.MicroPedestal.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.PedestalLocker">
            <summary>
            Represents the PedestalLocker prefab instances.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PedestalLocker.Dictionary">
            <summary>
            Contains all the cached pedestal lockers, accessible through their <see cref="T:MapGeneration.Distributors.PedestalScpLocker"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PedestalLocker.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.PedestalLocker"/> instances.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.PedestalLocker.Get(MapGeneration.Distributors.PedestalScpLocker)">
            <summary>
            Gets the pedestal wrapper from the <see cref="P:LabApi.Features.Wrappers.PedestalLocker.Dictionary"/>, or creates a new one if it doesn't exist and the provided <see cref="T:MapGeneration.Distributors.PedestalScpLocker"/> was not <see langword="null"/>.
            </summary>
            <param name="basePedestal">The <see cref="P:LabApi.Features.Wrappers.PedestalLocker.Base"/> of the pedestal locker.</param>
            <returns>The requested wrapper or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.PedestalLocker.#ctor(MapGeneration.Distributors.PedestalScpLocker)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="pedestalScpLocker">The base <see cref="T:MapGeneration.Distributors.PedestalScpLocker"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.PedestalLocker.Base">
            <summary>
            The base <see cref="T:MapGeneration.Distributors.PedestalScpLocker"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PedestalLocker.Chamber">
            <summary>
            The pedestal's chamber.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PedestalLocker.IsOpen">
            <summary>
            Gets or sets whether the pedestal is open.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PedestalLocker.CanInteract">
            <summary>
            Gets whether the pedestal can be interacted with by a <see cref="T:LabApi.Features.Wrappers.Player"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PedestalLocker.RequiredPermissions">
            <summary>
            Gets or sets the <see cref="T:Interactables.Interobjects.DoorUtils.DoorPermissionFlags"/> required by the <see cref="T:LabApi.Features.Wrappers.Player"/> to open/close the pedestal.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PedestalLocker.TargetCooldown">
            <summary>
            Gets or sets the latest cooldown duration on the pedestal.
            </summary>
            <remarks>
            Cooldown for door open/close and denied interactions.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.PedestalLocker.AcceptableItems">
            <summary>
            Gets or sets the array of acceptable <see cref="T:ItemType">item types</see> that can spawn when filling the pedestal with loot.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.PedestalLocker.Fill">
            <summary>
            Fill the pedestal with random loot from <see cref="P:LabApi.Features.Wrappers.Locker.Loot"/> filtered by the <see cref="P:LabApi.Features.Wrappers.PedestalLocker.AcceptableItems"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.PedestalLocker.GetAllItems">
            <summary>
            Gets all <see cref="T:LabApi.Features.Wrappers.Pickup"/> instances currently in the pedestal.
            </summary>
            <returns>The result set of all <see cref="T:LabApi.Features.Wrappers.Pickup"/> instances.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.PedestalLocker.RemoveAllItems">
            <summary>
            Removes all <see cref="T:LabApi.Features.Wrappers.Pickup"/> instances from the pedestal.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.PedestalLocker.RemoveItem(LabApi.Features.Wrappers.Pickup)">
            <summary>
            Removes the specified <see cref="T:LabApi.Features.Wrappers.Pickup"/> from the pedestal.
            </summary>
            <param name="pickup">The <see cref="T:LabApi.Features.Wrappers.Pickup"/> instance to remove.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.PedestalLocker.AddItem(ItemType)">
            <summary>
            Creates a new <see cref="T:LabApi.Features.Wrappers.Pickup"/> of the specified <see cref="T:ItemType"/> to add to the pedestal.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the new pickup.</param>
            <returns>The created <see cref="T:LabApi.Features.Wrappers.Pickup"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.PedestalLocker.Interact(LabApi.Features.Wrappers.Player)">
            <summary>
            Interact with the pedestal.
            </summary>
            <param name="player">The <see cref="T:LabApi.Features.Wrappers.Player"/> that trigged the interaction.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.PedestalLocker.PlayDeniedSound(Interactables.Interobjects.DoorUtils.DoorPermissionFlags)">
            <summary>
            Plays the Access Denied sound for the pedestal.
            </summary>
            <param name="flags">The <see cref="T:Interactables.Interobjects.DoorUtils.DoorPermissionFlags"/> that will be shown on the keycard reader.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.PedestalLocker.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.RifleRackLocker">
            <summary>
            Represents the RifleRack prefab instances.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RifleRackLocker.Dictionary">
            <summary>
            Contains all the cached rifle rack lockers, accessible through their <see cref="T:MapGeneration.Distributors.Locker"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RifleRackLocker.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.RifleRackLocker"/> instances.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.RifleRackLocker.#ctor(MapGeneration.Distributors.Locker)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseLocker">The base <see cref="T:MapGeneration.Distributors.Locker"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.RifleRackLocker.IsOpen">
            <summary>
            Gets or sets whether the rifle rack is open.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RifleRackLocker.CanInteract">
            <summary>
            Gets whether the rifle rack can be interacted with by a <see cref="T:LabApi.Features.Wrappers.Player"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RifleRackLocker.RequiredPermissions">
            <summary>
            Gets or sets the <see cref="T:Interactables.Interobjects.DoorUtils.DoorPermissionFlags"/> required by the player to open/close the rifle rack.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RifleRackLocker.TargetCooldown">
            <summary>
            Gets or sets the latest cooldown duration on the rifle rack.
            </summary>
            <remarks>
            Cooldown for door open/close and denied interactions.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.RifleRackLocker.MainChamber">
            <summary>
            Gets the chamber used for the E11.
            </summary>
            <remarks>
            This chamber controls the door.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.RifleRackLocker.Bullet1">
            <summary>
            Gets the chamber used for bullet spawn 1.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RifleRackLocker.Bullet2">
            <summary>
            Gets the chamber used for bullet spawn 2.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RifleRackLocker.Bullet3">
            <summary>
            Gets the chamber used for bullet spawn 3.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RifleRackLocker.Bullet4">
            <summary>
            Gets the chamber used for bullet spawn 4.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RifleRackLocker.HeGrenade1">
            <summary>
            Gets the chamber used for grenade spawn 1.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RifleRackLocker.HeGrenade2">
            <summary>
            Gets the chamber used for grenade spawn 2.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.RifleRackLocker.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.StandardLocker">
            <summary>
            Represents the StandardLocker prefab instance.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.StandardLocker.Dictionary">
            <summary>
            Contains all the cached standard lockers, accessible through their <see cref="T:MapGeneration.Distributors.Locker"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.StandardLocker.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.StandardLocker"/> instances.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.StandardLocker.#ctor(MapGeneration.Distributors.Locker)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseLocker">The base <see cref="T:MapGeneration.Distributors.Locker"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.StandardLocker.MainLeft">
            <summary>
            Gets the main left chamber.
            </summary>
            <remarks>
            This chamber controls the left door.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.StandardLocker.MainMiddle">
            <summary>
            Gets the main middle chamber.
            </summary>
            <remarks>
            This chamber controls the middle door.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.StandardLocker.MainRight">
            <summary>
            Gets the main right chamber.
            </summary>
            <remarks>
            This chamber controls the right door.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.StandardLocker.BottomLeft">
            <summary>
            Gets the bottom left chamber.
            </summary>
            <remarks>
            This chamber does not control any doors.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.StandardLocker.BottomMiddle">
            <summary>
            Gets the bottom middle chamber.
            </summary>
            <remarks>
            This chamber does not control any doors.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.StandardLocker.BottomRight">
            <summary>
            Gets the bottom right chamber.
            </summary>
            <remarks>
            This chamber does not control any doors.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.StandardLocker.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the abase object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Structure">
            <summary>
            The wrapper over the <see cref="T:MapGeneration.Distributors.SpawnableStructure"/> object.
            </summary>
        </member>
        <member name="F:LabApi.Features.Wrappers.Structure.TypeWrappers">
            <summary>
            Contains all the handlers for constructing wrappers for the associated base game types.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Structure.Dictionary">
            <summary>
            Contains all the cached structures, accessible through their <see cref="T:MapGeneration.Distributors.SpawnableStructure"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Structure.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.Structure"/> instances.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Structure.Get(MapGeneration.Distributors.SpawnableStructure)">
            <summary>
            Gets the structure wrapper from the <see cref="P:LabApi.Features.Wrappers.Structure.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:MapGeneration.Distributors.SpawnableStructure"/> was not null.
            </summary>
            <param name="spawnableStructure">The <see cref="P:LabApi.Features.Wrappers.Structure.Base"/> of the structure.</param>
            <returns>The requested structure or null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Structure.TryGet(MapGeneration.Distributors.SpawnableStructure,LabApi.Features.Wrappers.Structure@)">
            <summary>
            Tries to get the structure wrapper from the <see cref="P:LabApi.Features.Wrappers.Structure.Dictionary"/>.
            </summary>
            <param name="spawnableStructure">The <see cref="P:LabApi.Features.Wrappers.Structure.Base"/> of the structure.</param>
            <param name="structure">The requested structure.</param>
            <returns>True of the structure exists, otherwise false.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Structure.Initialize">
            <summary>
            Initializes the <see cref="T:LabApi.Features.Wrappers.Structure"/> wrapper by subscribing to <see cref="T:MapGeneration.Distributors.SpawnableStructure"/> events.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Structure.CreateStructureWrapper(MapGeneration.Distributors.SpawnableStructure)">
            <summary>
            Creates a new wrapper from the base game object.
            </summary>
            <param name="structure">The base game structure to wrap.</param>
            <returns>The newly created wrapper.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Structure.OnAdded(MapGeneration.Distributors.SpawnableStructure)">
            <summary>
            Private method to handle the creation of new structures in the server.
            </summary>
            <param name="structure">The <see cref="T:MapGeneration.Distributors.SpawnableStructure"/> that was created.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Structure.OnRemoved(MapGeneration.Distributors.SpawnableStructure)">
            <summary>
            Private method to handle the removal of structures from the server.
            </summary>
            <param name="spawnableStructure">The <see cref="T:MapGeneration.Distributors.SpawnableStructure"/> that was removed.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Structure.Register``1(System.Func{``0,LabApi.Features.Wrappers.Structure})">
            <summary>
            A private method to handle the addition of wrapper handlers.
            </summary>
            <typeparam name="T">The derived base game type to handle.</typeparam>
            <param name="constructor">A handler to construct the wrapper with the base game instance.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Structure.#ctor(MapGeneration.Distributors.SpawnableStructure)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="spawnableStructure">The base <see cref="T:MapGeneration.Distributors.SpawnableStructure"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Structure.Base">
            <summary>
            The base <see cref="T:MapGeneration.Distributors.SpawnableStructure"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Structure.StructurePositionSync">
            <summary>
            The base <see cref="T:MapGeneration.Distributors.StructurePositionSync"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Structure.GameObject">
            <summary>
            Gets the structure's <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Structure.Transform">
            <summary>
            Gets the structure's <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Structure.Position">
            <summary>
            Gets or sets the structure's position.
            </summary>
            <remarks>
            May not work for all map generated structures.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Structure.RotationY">
            <summary>
            Gets or sets the structure's rotation around the y-axis.
            </summary>
            <remarks>
            May not work for all map generated structures.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Structure.IsDestroyed">
            <summary>
            Gets whether the structure was destroyed.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Structure.Room">
            <summary>
            Gets the <see cref="P:LabApi.Features.Wrappers.Structure.Room"/> based on the structures <see cref="P:LabApi.Features.Wrappers.Structure.Position"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Structure.CanCache">
            <summary>
            Whether to cache the wrapper.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Structure.Spawn">
            <summary>
            Spawns the structure.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Structure.Destroy">
            <summary>
            Destroys the structure.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Structure.ToString">
            <inheritdoc />
        </member>
        <member name="M:LabApi.Features.Wrappers.Structure.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.WallCabinet">
            <summary>
            Represents the WallCabinet prefab instances.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.WallCabinet.Dictionary">
            <summary>
            Contains all the cached wall cabinets, accessible through their <see cref="T:MapGeneration.Distributors.Locker"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.WallCabinet.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.WallCabinet"/> instances.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.WallCabinet.#ctor(MapGeneration.Distributors.Locker)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseLocker">The base <see cref="T:MapGeneration.Distributors.Locker"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.WallCabinet.IsOpen">
            <summary>
            Gets or sets whether or not the wall cabinet is open.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.WallCabinet.CanInteract">
            <summary>
            Gets or sets whether the wall cabinet can be interacted with by a <see cref="T:LabApi.Features.Wrappers.Player"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.WallCabinet.RequiredPermissions">
            <summary>
            Gets or sets the <see cref="T:Interactables.Interobjects.DoorUtils.DoorPermissionFlags"/> required by a the <see cref="T:LabApi.Features.Wrappers.Player"/> to open/close the wall cabinet.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.WallCabinet.TargetCooldown">
            <summary>
            Gets or sets the latest cooldown duration on the wall cabinet.
            </summary>
            <remarks>
            Cooldown for door open/close and denied interactions.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.WallCabinet.MainChamber">
            <summary>
            Gets the large bottom main chamber of the wall cabinet.
            </summary>
            <remarks>
            This chamber controls the door of cabinet.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.WallCabinet.LowerShelf">
            <summary>
            Gets the lower shelf chamber of the wall cabinet.
            </summary>
            <remarks>
            This chamber does not control any doors.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.WallCabinet.UpperShelf">
            <summary>
            Gets the upper shelf chamber of the wall cabinet.
            </summary>
            <remarks>
            This chamber does not control any doors.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.WallCabinet.OnRemove">
            <summary>
            An internal method to remove itself form the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Window">
            <summary>
            The wrapper over the <see cref="T:BreakableWindow"/> object.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Window.Initialize">
            <summary>
            Initializes the <see cref="T:LabApi.Features.Wrappers.Window"/> wrapper by subscribing to <see cref="T:BreakableWindow"/> events.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Window.Dictionary">
            <summary>
            Contains all the cached structures, accessible through their <see cref="T:BreakableWindow"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Window.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.Structure"/> instances.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Window.#ctor(BreakableWindow)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="breakableWindow">The base <see cref="T:BreakableWindow"/> object.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Window.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Window.Base">
            <summary>
            The base <see cref="T:MapGeneration.Distributors.SpawnableStructure"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Window.GameObject">
            <summary>
            Gets the structure's <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Window.Transform">
            <summary>
            Gets the structure's <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Window.CanCache">
            <summary>
            Whether to cache the wrapper.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Window.IsDestroyed">
            <summary>
            Gets whether the window gameobject was destroyed.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Window.IsBroken">
            <summary>
            Gets whether the window is broken.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Window.Health">
            <summary>
            Gets or sets window's health.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Window.Position">
            <summary>
            Gets the window's position.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Window.Rotation">
            <summary>
            Gets the window's rotation.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Window.ToString">
            <inheritdoc />
        </member>
        <member name="M:LabApi.Features.Wrappers.Window.Get(BreakableWindow)">
            <summary>
            Gets the structure wrapper from the <see cref="P:LabApi.Features.Wrappers.Window.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:BreakableWindow"/> was not <see langword="null"/>.
            </summary>
            <param name="breakableWindow">The <see cref="P:LabApi.Features.Wrappers.Window.Base"/> of the window.</param>
            <returns>The requested structure or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Window.TryGet(BreakableWindow,LabApi.Features.Wrappers.Window@)">
            <summary>
            Tries to get the window wrapper from the <see cref="P:LabApi.Features.Wrappers.Window.Dictionary"/>.
            </summary>
            <param name="breakableWindow">The <see cref="P:LabApi.Features.Wrappers.Window.Base"/> of the window.</param>
            <param name="window">The requested window.</param>
            <returns><see langword="true"/> of the structure exists, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Window.OnAdded(BreakableWindow)">
            <summary>
            Private method to handle the creation of new windows in the server.
            </summary>
            <param name="structure">The <see cref="T:BreakableWindow"/> that was created.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Window.OnRemoved(BreakableWindow)">
            <summary>
            Private method to handle the removal of windows from the server.
            </summary>
            <param name="spawnableStructure">The <see cref="T:BreakableWindow"/> that was removed.</param>
        </member>
        <member name="T:LabApi.Features.Wrappers.Workstation">
            <summary>
            The wrapper over the <see cref="T:InventorySystem.Items.Firearms.Attachments.WorkstationController"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Workstation.Dictionary">
            <summary>
            Contains all the cached workstations, accessible through their <see cref="T:MapGeneration.Distributors.SpawnableStructure"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Workstation.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.Workstation"/> instances.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Workstation.Get(MapGeneration.Distributors.SpawnableStructure)">
            <summary>
            Gets the workstation wrapper from the <see cref="P:LabApi.Features.Wrappers.Workstation.Dictionary"/>, or creates a new one if it doesn't exist and the provided <see cref="T:MapGeneration.Distributors.SpawnableStructure"/> was not <see langword="null"/>.
            </summary>
            <param name="spawnableStructure">The <see cref="P:LabApi.Features.Wrappers.Structure.Base"/> of the workstation.</param>
            <returns>The requested wrapper or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Workstation.#ctor(MapGeneration.Distributors.SpawnableStructure)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="spawnableStructure">The base <see cref="T:MapGeneration.Distributors.SpawnableStructure"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Workstation.BaseController">
            <summary>
            Gets the base <see cref="T:InventorySystem.Items.Firearms.Attachments.WorkstationController"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Workstation.Status">
            <summary>
            Gets or sets the current <see cref="T:InventorySystem.Items.Firearms.Attachments.WorkstationController.WorkstationStatus"/> of the workstation.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Workstation.Stopwatch">
            <summary>
            Gets the stopwatch used by the workstation for logic such as powering up/down, inactive time etc.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Workstation.KnownUser">
            <summary>
            Gets or sets the current user keeping the workstation on.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Workstation.IsInRange(LabApi.Features.Wrappers.Player)">
            <summary>
            Gets whether the specified <see cref="T:LabApi.Features.Wrappers.Player"/> is close enough to the workstation to keep it on.
            </summary>
            <param name="player">The <see cref="T:LabApi.Features.Wrappers.Player"/> to test.</param>
            <returns>Whether the player was close enough.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Workstation.Interact(LabApi.Features.Wrappers.Player)">
            <summary>
            Interact with the workstation.
            </summary>
            <param name="player">The <see cref="T:LabApi.Features.Wrappers.Player"/> that interacted.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Workstation.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Warhead">
            <summary>
            The wrapper for various Warhead components.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Warhead.BaseController">
            <summary>
            The base <see cref="T:AlphaWarheadController"/>.
            Null if they have not been created yet, see <see cref="P:LabApi.Features.Wrappers.Warhead.Exists"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Warhead.BaseNukesitePanel">
            <summary>
            The base <see cref="T:AlphaWarheadNukesitePanel"/>.
            Null if they have not been created yet, see <see cref="P:LabApi.Features.Wrappers.Warhead.Exists"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Warhead.BaseOutsidePanel">
            <summary>
            The base <see cref="T:AlphaWarheadOutsitePanel"/>.
            Null if they have not been created yet, see <see cref="P:LabApi.Features.Wrappers.Warhead.Exists"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Warhead.BlastDoors">
            <summary>
            A reference to all <see cref="T:BlastDoor"/> instances currently in the game.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Warhead.Exists">
            <summary>
            Gets a value indicating whether the Warhead components have been created.
            </summary>
            <remarks>
            Warhead components are created after map generation.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Warhead.LeverStatus">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:LabApi.Features.Wrappers.Warhead.BaseNukesitePanel"/> lever has been enabled.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Warhead.IsAuthorized">
            <summary>
            Gets or sets a value indicating whether the surface panel has had a keycard unlock the button.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Warhead.IsLocked">
            <summary>
            Gets or sets a value indicating whether the warhead status can be changed by players.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Warhead.IsDetonated">
            <summary>
            Gets a value indicating whether the warhead has been detonated.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Warhead.IsDetonationInProgress">
            <summary>
            Gets a value indicating whether detonation is in progress.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Warhead.DetonationTime">
            <summary>
            Gets or sets a value for the detonation time measured in seconds.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Warhead.CooldownTime">
            <summary>
            Gets or sets a value for the reactivation cooldown time measured in seconds.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Warhead.ForceCountdownToggle">
            <summary>
            Forces DMS sequence to count down even if conditions are not met.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Warhead.DeadManSwitchRemaining">
            <summary>
            Indicates how much time is left for the DMS to activate.
            Value is capped by <see cref="P:LabApi.Features.Wrappers.Warhead.DeadManSwitchMaxTime"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Warhead.DeadManSwitchMaxTime">
            <summary>
            Indicates the amount of time it takes for the DMS to activate.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Warhead.Scenario">
            <summary>
            Gets or sets the value for which <see cref="T:LabApi.Features.Wrappers.Warhead.DetonationScenario"/> to use.
            </summary>
            <remarks>
            Must be one of <see cref="P:LabApi.Features.Wrappers.Warhead.StartScenarios"/>, <see cref="P:LabApi.Features.Wrappers.Warhead.ResumeScenarios"/>, <see cref="P:LabApi.Features.Wrappers.Warhead.DeadmanSwitchScenario"/> or the default value for <see cref="T:LabApi.Features.Wrappers.Warhead.DetonationScenario"/>.
            If <see cref="T:LabApi.Features.Wrappers.Warhead.DetonationScenario"/> is the default value the Scenario is reset to the default used by the server config.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Warhead.ScenarioType">
            <summary>
            Gets the warhead scenario type for the current <see cref="P:LabApi.Features.Wrappers.Warhead.Scenario"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Warhead.StartScenarios">
            <summary>
            Gets an array of all the start scenarios.
            </summary>
            <remarks>
            The scenarios used for the first time the warhead is activated.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Warhead.ResumeScenarios">
            <summary>
            Gets an array for all the resume scenarios.
            </summary>
            <remarks>
            The scenarios used for anytime the warhead is resumed.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Warhead.DeadmanSwitchScenario">
            <summary>
            Gets the deadman switch scenario.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Warhead.Start(System.Boolean,System.Boolean,LabApi.Features.Wrappers.Player)">
            <summary>
            Starts the detonation countdown.
            </summary>
            <param name="isAutomatic">Designates the detonation as automatic causing the warhead to become <see cref="P:LabApi.Features.Wrappers.Warhead.IsLocked">Locked</see> during the countdown.</param>
            <param name="suppressSubtitles">Determines whether subtitles should be suppressed.</param>
            <param name="activator">The <see cref="T:LabApi.Features.Wrappers.Player"/> that activated the countdown if any.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Warhead.Stop(LabApi.Features.Wrappers.Player)">
            <summary>
            Stops the detonation countdown.
            </summary>
            <param name="activator">The <see cref="T:LabApi.Features.Wrappers.Player"/> that activated the cancellation if any.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Warhead.Detonate">
            <summary>
            Instantly detonates the Warhead.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Warhead.OpenBlastDoors">
            <summary>
            Opens all blast doors.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Warhead.CloseBlastDoors">
            <summary>
            Closes all blast doors.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Warhead.Shake">
            <summary>
            Plays the warhead detonation effect on all clients in the facility.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Warhead.Initialize">
            <summary>
            Initializes the warhead class.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Warhead.OnWaitingForPlayers">
            <summary>
            Handles the creation of the warhead components.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Warhead.OnMapDestroyed">
            <summary>
            Handles the removal of warhead components.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Warhead.DetonationScenario">
            <summary>
            Readonly wrapper for <see cref="T:AlphaWarheadController.DetonationScenario"/>.
            </summary>
        </member>
        <member name="F:LabApi.Features.Wrappers.Warhead.DetonationScenario.TimeToDetonate">
            <summary>
            The countdown time announced.
            </summary>
        </member>
        <member name="F:LabApi.Features.Wrappers.Warhead.DetonationScenario.AdditionalTime">
            <summary>
            The additional time needed to play out the scenario's sequence before starting the countdown.
            </summary>
        </member>
        <member name="F:LabApi.Features.Wrappers.Warhead.DetonationScenario.Type">
            <summary>
            The <see cref="T:WarheadScenarioType"/> this scenario is for.
            </summary>
        </member>
        <member name="F:LabApi.Features.Wrappers.Warhead.DetonationScenario.Id">
            <summary>
            The index of the scenario for its associated <see cref="F:LabApi.Features.Wrappers.Warhead.DetonationScenario.Type"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Warhead.DetonationScenario.#ctor(AlphaWarheadController.DetonationScenario,System.Byte,WarheadScenarioType)">
            <summary>
            Internal constructor to prevent external instantiation.
            </summary>
            <param name="detonationScenario">The <see cref="T:LabApi.Features.Wrappers.Warhead.DetonationScenario"/>.</param>
            <param name="id">The <see cref="T:System.Byte"/> id of the scenario.</param>
            <param name="type">The <see cref="T:WarheadScenarioType"/>.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Warhead.DetonationScenario.TotalTime">
            <summary>
            The actual time it takes for the warhead to detonate.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.AmmoItem">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.Firearms.Ammo.AmmoItem"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.AmmoItem.Dictionary">
            <summary>
            Contains all the cached ammo items, accessible through their <see cref="T:InventorySystem.Items.Firearms.Ammo.AmmoItem"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.AmmoItem.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.AmmoItem"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.AmmoItem.Get(InventorySystem.Items.Firearms.Ammo.AmmoItem)">
            <summary>
            Gets the ammo item wrapper from the <see cref="P:LabApi.Features.Wrappers.AmmoItem.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Firearms.Ammo.AmmoItem"/> was not null.
            </summary>
            <param name="baseAmmoItem">The <see cref="P:LabApi.Features.Wrappers.AmmoItem.Base"/> of the item.</param>
            <returns>The requested item or null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.AmmoItem.#ctor(InventorySystem.Items.Firearms.Ammo.AmmoItem)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseAmmoItem">The base <see cref="T:InventorySystem.Items.Firearms.Ammo.AmmoItem"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.AmmoItem.Base">
            <summary>
            The base <see cref="T:InventorySystem.Items.Firearms.Ammo.AmmoItem"/> object.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.AmmoItem.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.BodyArmorItem">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.Armor.BodyArmor"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.BodyArmorItem.Dictionary">
            <summary>
            Contains all the cached body armor items, accessible through their <see cref="T:InventorySystem.Items.Armor.BodyArmor"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.BodyArmorItem.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.BodyArmorItem"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.BodyArmorItem.Get(InventorySystem.Items.Armor.BodyArmor)">
            <summary>
            Gets the body armor item wrapper from the <see cref="P:LabApi.Features.Wrappers.BodyArmorItem.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Armor.BodyArmor"/> was not null.
            </summary>
            <param name="bodyArmor">The <see cref="P:LabApi.Features.Wrappers.BodyArmorItem.Base"/> of the item.</param>
            <returns>The requested item or null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.BodyArmorItem.#ctor(InventorySystem.Items.Armor.BodyArmor)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="bodyArmor">The base <see cref="T:InventorySystem.Items.Armor.BodyArmor"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.BodyArmorItem.Base">
            <summary>
            The base <see cref="T:InventorySystem.Items.Armor.BodyArmor"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.BodyArmorItem.RemoveExcessOnDrop">
            <summary>
            Gets or sets whether excess items are removed when armor is dropped.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.BodyArmorItem.IsMovementModifierActive">
            <summary>
            Gets whether the movement speed multiplier is being applied to the wearer.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.BodyArmorItem.ActualMovementSpeedMultiplier">
            <summary>
            Gets the movement speed multiplier after being processed by <see cref="F:InventorySystem.Items.Armor.BodyArmor.CivilianClassDownsidesMultiplier"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.BodyArmorItem.IsStaminaModifierActive">
            <summary>
            Gets whether the stamina usage multiplier is being applied to the wearer.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.BodyArmorItem.ActualStaminaUsageMultiplier">
            <summary>
            Gets the stamina usage multiplier after being processed by <see cref="F:InventorySystem.Items.Armor.BodyArmor.CivilianClassDownsidesMultiplier"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.BodyArmorItem.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.CoinItem">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.Coin.Coin"/>.
            </summary>
            <remarks>
            The most important wrapper in the Api.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.CoinItem.Dictionary">
            <summary>
            Contains all the cached coin items, accessible through their <see cref="T:InventorySystem.Items.Coin.Coin"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.CoinItem.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.CoinItem"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.CoinItem.Get(InventorySystem.Items.Coin.Coin)">
            <summary>
            Gets the coin item wrapper from the <see cref="P:LabApi.Features.Wrappers.CoinItem.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Coin.Coin"/> was not null.
            </summary>
            <param name="coin">The <see cref="P:LabApi.Features.Wrappers.CoinItem.Base"/> of the item.</param>
            <returns>The requested item or null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.CoinItem.#ctor(InventorySystem.Items.Coin.Coin)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="coin">The base <see cref="T:InventorySystem.Items.Coin.Coin"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.CoinItem.Base">
            <summary>
            The base <see cref="T:InventorySystem.Items.Coin.Coin"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.CoinItem.LastFlipResult">
            <summary>
            Gets the outcome of the last flip.
            Null if the coin has not been flipped otherwise true = Heads, false = Tails.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.CoinItem.LastFlipTime">
            <summary>
            Gets the <see cref="P:Mirror.NetworkTime.time"/> of the last flip.
            Null if the coin has not been flipped.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.CoinItem.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.FirearmItem">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.Firearms.Firearm"/>.<para/>
            Firearms are functioning as they close as they would in real life.
            This means that there are properties for whether the bolt is closed or opened, whether the hammer is cocked for specific firearms, whether the magazine is inserted and so many other properties you may need to be aware of when adjusting this firearm item.
            </summary>
        </member>
        <member name="F:LabApi.Features.Wrappers.FirearmItem.TypeWrappers">
            <summary>
            Contains all the handlers for constructing wrappers for the associated base game types.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.Dictionary">
            <summary>
            Contains all the cached firearm items, accessible through their <see cref="T:InventorySystem.Items.Firearms.Firearm"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.FirearmItem"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.FirearmItem.Get(InventorySystem.Items.Firearms.Firearm)">
            <summary>
            Gets the firearm item wrapper from the <see cref="P:LabApi.Features.Wrappers.FirearmItem.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Firearms.Firearm"/> was not null.
            </summary>
            <param name="firearm">The <see cref="P:LabApi.Features.Wrappers.FirearmItem.Base"/> of the item.</param>
            <returns>The requested item or null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.FirearmItem.CreateFirearmWrapper(InventorySystem.Items.Firearms.Firearm)">
            <summary>
            Creates a firearm wrapper or it's subtype.
            </summary>
            <param name="firearm">The base game firearm.</param>
            <returns>Firearm wrapper object.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.FirearmItem.InitializeFirearmWrappers">
            <summary>
            Initializes the <see cref="T:LabApi.Features.Wrappers.FirearmItem"/> class by subscribing to <see cref="T:InventorySystem.Items.Firearms.Firearm"/> events and registers derived wrappers.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.FirearmItem.Register(ItemType,System.Func{InventorySystem.Items.Firearms.Firearm,LabApi.Features.Wrappers.FirearmItem})">
            <summary>
            A private method to handle the addition of wrapper handlers.
            </summary>
            <param name="itemType">Item type of the target firearm.</param>
            <param name="constructor">A handler to construct the wrapper with the base game instance.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.FirearmItem.#ctor(InventorySystem.Items.Firearms.Firearm)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="firearm">The base <see cref="T:InventorySystem.Items.Firearms.Firearm"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.Base">
            <summary>
            The base <see cref="T:InventorySystem.Items.Firearms.Firearm"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.Weight">
            <summary>
            Gets the total firearm's weight including attachments in kilograms.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.Length">
            <summary>
            Gets the total length of this firearm in inches.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.BaseWeight">
            <summary>
            Gets the weight of the firearm in kilograms without any attachments.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.BaseLength">
            <summary>
            Gets the length of the firearm in inches without any attachments.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.CanReload">
            <summary>
            Gets whether the player can reload this firearm.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.CanUnload">
            <summary>
            Gets whether the player can unload this firearm.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.AmmoType">
            <summary>
            Gets the firearm's ammo type.
            </summary>
            <remarks>
            May be <see cref="F:ItemType.None"/> if the firearm item is no longer valid or this firearm is <see cref="T:LabApi.Features.Wrappers.ParticleDisruptorItem"/>.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.Cocked">
            <summary>
            Gets or sets whether the firearm's hammer is cocked.
            </summary>
            <remarks>
            Every automatic firearm requires <see cref="P:LabApi.Features.Wrappers.FirearmItem.Cocked"/> to be <see langword="true"/> and <see cref="P:LabApi.Features.Wrappers.FirearmItem.BoltLocked"/> to be <see langword="false"/> to be fired properly with chambered ammo.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.BoltLocked">
            <summary>
            Gets or sets whether the firearm's bolt is in rear position.<para/>
            This is only used by closed-bolt firearms.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.OpenBolt">
            <summary>
            Gets if the firearm fires from an open bolt, that means the chambers are not capable of storing any ammo in <see cref="P:LabApi.Features.Wrappers.FirearmItem.ChamberedAmmo"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.Firerate">
            <summary>
            Gets the firerate with current attachment's modifiers applied.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.AttachmentsCode">
            <summary>
            Gets or sets the attachments code for this firearm.<br/>
            Attachments code is a binary representation of <see cref="P:LabApi.Features.Wrappers.FirearmItem.Attachments"/> which are enabled/disabled.<br/>
            For validation, see <see cref="M:LabApi.Features.Wrappers.FirearmItem.ValidateAttachmentsCode(System.UInt32)"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.MagazineInserted">
            <summary>
            Gets or sets whether this firearm has inserted magazine.<br/>
            An empty magazine is inserted when set to <see langword="true"/>.<br/>
            Remaining ammo from the magazine is inserted back into player's inventory when removed.
            </summary>
            <remarks>
            Firearms with no external or internal magazine will always return <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.StoredAmmo">
            <summary>
            Gets or sets the stored ammo in a <b>ammo container</b> for this firearm.
            </summary>
            <remarks>
            Ammo in magazine beyond <see cref="P:LabApi.Features.Wrappers.FirearmItem.MaxAmmo"/> when pickup up this firearm again from the ground is added back to player's inventory.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.MaxAmmo">
            <summary>
            Gets the maximum ammo the firearm can have in its <b>ammo container</b>. Attachment modifiers are taken into account when calculating it.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.ChamberedAmmo">
            <summary>
            Gets or sets the current ammo in the chamber.
            <para><see cref="P:LabApi.Features.Wrappers.FirearmItem.OpenBolt"/> firearms do not use this value and take ammo directly from it's ammo container.</para>
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.ChamberMax">
            <summary>
            Gets or sets the maximum ammo in chamber.
            Visual side may be incorrect.<para/>
            For automatic firearms, this value won't properly sync above 16 as only 4 bits are used for the chambered sync to the client.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.FlashlightEnabled">
            <summary>
            Gets or sets whether the firearm's flashlight attachment is enabled and is emitting light.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.Attachments">
            <summary>
            All attachment used by this firearm.<br/>
            <b>Set the attachments status using <see cref="P:LabApi.Features.Wrappers.FirearmItem.AttachmentsCode"/></b>
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.Modules">
            <summary>
            All modules used by this firearm.
            Modules are the main scripts defining all of the functionality of a firearm.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.AvailableAttachmentsNames">
            <summary>
            Gets all available attachments names of this firearms.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.ActiveAttachments">
            <summary>
            Gets all enabled attachments of this firearm.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.AmmoContainerModule">
            <summary>
            Module for the magazine.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.ActionModule">
            <summary>
            Module for firearm's chamber.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.ReloaderModule">
            <summary>
            Module for handling gun's reloading and unloading.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmItem.MagazineControllerModule">
            <summary>
            Module for handling gun's magazine.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.FirearmItem.CheckAttachmentsCode(System.UInt32)">
            <summary>
            Gets whether the provided attachments code is valid and can be applied.
            </summary>
            <param name="code">The code to validate.</param>
            <returns>Whether the code is valid and can be applied.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.FirearmItem.CheckAttachmentsCode(InventorySystem.Items.Firearms.Attachments.AttachmentName[])">
            <summary>
            Gets whether the provided attachment names are valid together and only 1 belongs to each category.
            </summary>
            <param name="attachments">Attachment names.</param>
            <returns>Whether the attachments can be applied together.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.FirearmItem.ValidateAttachmentsCode(System.UInt32)">
            <summary>
            Gets validated attachments code.
            Validation of the code is following:
            <list type="bullet">
            <item>Only 1 attachments from the same <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentSlot"/> is applied. If multiple ones are enabled, only the first one is selected.</item>
            <item><see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentSlot"/> without any attachents assigned sets the first one to enabled.</item>
            </list>
            </summary>
            <param name="code">The code to be validated.</param>
            <returns>Validated code with missing attachments added for category and only 1 attachment per category selected.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.FirearmItem.ValidateAttachmentsCode(InventorySystem.Items.Firearms.Attachments.AttachmentName[])">
            <inheritdoc cref="M:LabApi.Features.Wrappers.FirearmItem.ValidateAttachmentsCode(System.UInt32)"/>
            <param name="attachments">Array of attachment names to be applied and validated.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.FirearmItem.GetCodeFromAttachmentNamesRaw(InventorySystem.Items.Firearms.Attachments.AttachmentName[])">
            <summary>
            Gets attachments code from <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentName"/>s. This value is NOT validated.
            </summary>
            <param name="attachments">Attachment names.</param>
            <returns>Unchecked attachments code.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.FirearmItem.Reload">
            <summary>
            Reloads the firearm if <see cref="P:LabApi.Features.Wrappers.FirearmItem.CanReload"/> is <see langword="true"/>.
            </summary>
            <returns>Whether the player started to reload.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.FirearmItem.Unload">
            <summary>
            Unloads the firearm if <see cref="P:LabApi.Features.Wrappers.FirearmItem.CanUnload"/> is <see langword="true"/>.
            </summary>
            <returns>Whether the player started the unload.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.FirearmItem.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.FirearmItem.CacheModules">
            <summary>
            Caches modules used by the firearm.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.ParticleDisruptorItem">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.Firearms.ParticleDisruptor"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ParticleDisruptorItem.Dictionary">
            <summary>
            Contains all the cached particle disruptor items, accessible through their <see cref="T:InventorySystem.Items.Firearms.ParticleDisruptor"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ParticleDisruptorItem.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.ParticleDisruptorItem"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.ParticleDisruptorItem.Get(InventorySystem.Items.Firearms.ParticleDisruptor)">
            <summary>
            Gets the particle disruptor item wrapper from the <see cref="P:LabApi.Features.Wrappers.ParticleDisruptorItem.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Firearms.ParticleDisruptor"/> was not <see langword="null"/>.
            </summary>
            <param name="particleDisruptor">The <see cref="P:LabApi.Features.Wrappers.ParticleDisruptorItem.Base"/> of the item.</param>
            <returns>The requested item or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.ParticleDisruptorItem.#ctor(InventorySystem.Items.Firearms.ParticleDisruptor)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="particleDisruptor">The base <see cref="T:InventorySystem.Items.Firearms.ParticleDisruptor"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.ParticleDisruptorItem.Base">
            <summary>
            The base <see cref="T:InventorySystem.Items.Firearms.ParticleDisruptor"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ParticleDisruptorItem.FiringState">
            <summary>
            Gets the current firing state.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ParticleDisruptorItem.SingleShotMode">
            <summary>
            Gets whether the disruptor has single-shot mode selected.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ParticleDisruptorItem.ChamberedAmmo">
            <summary>
            Gets the amount of chambered ammo in the chamber.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ParticleDisruptorItem.ChamberMax">
            <summary>
            Gets the maximum chambered ammo.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ParticleDisruptorItem.Cocked">
            <summary>
            Gets whether the firearm is cocked and can fire.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ParticleDisruptorItem.OpenBolt">
            <inheritdoc/>
        </member>
        <member name="M:LabApi.Features.Wrappers.ParticleDisruptorItem.Destroy">
            <summary>
            Destroys this disruptor and plays the destroy animation on the client.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.ParticleDisruptorItem.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.ParticleDisruptorItem.CacheModules">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Features.Wrappers.RevolverFirearm">
            <summary>
            Wrapper for revolver firearm.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.RevolverFirearm.#ctor(InventorySystem.Items.Firearms.Firearm)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="firearm">The base <see cref="T:InventorySystem.Items.Firearms.Firearm"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.RevolverFirearm.OpenBolt">
            <inheritdoc/>
        </member>
        <member name="P:LabApi.Features.Wrappers.RevolverFirearm.Chambers">
            <summary>
            Gets collection of all active chambers. The first chamber is the one aligned with the barrel.<br/>
            Each subsequent index corresponds to the next chambers that will become aligned with the barrel when the cylinder rotates in its intended direction.<br/>
            <b>Note that double-action revolvers rotate the cylinder right before firing, which means the 0th element isn't necessarily the next round to be fired (unless the revolver is already cocked).</b><para/>
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RevolverFirearm.Cocked">
            <inheritdoc/>
        </member>
        <member name="P:LabApi.Features.Wrappers.RevolverFirearm.StoredAmmo">
            <summary>
            Gets or sets the stored ammo in a <b>ammo container</b> for this firearm.
            </summary>
            <remarks>
            Stored ammo in revolver firearm cannot exceed its <see cref="P:LabApi.Features.Wrappers.FirearmItem.MaxAmmo"/> and any additional values are ignored.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.RevolverFirearm.ChamberedAmmo">
            <summary>
            Gets or sets the current ammo in the chamber.<para/>
            Revolver's <see cref="P:LabApi.Features.Wrappers.RevolverFirearm.ChamberedAmmo"/> only accounts for the currently aligned chamber with the barrel. Therefore the maximum of chambered ammo is 1 (live round) or 0 (empty / discharged).
            Any value greater than 1 is counted as live round.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.RevolverFirearm.SetChamberStatus(System.Int32,InventorySystem.Items.Firearms.Modules.CylinderAmmoModule.ChamberState)">
            <summary>
            Sets the status of the chamber at <paramref name="index"/>. 0th element is the one currently aligned with the barrel.<para/>
            <b>Indexes of each round are clockwise.</b>
            </summary>
            <param name="index">Index of the chamber clockwise. Starting at barrel aligned chamber.</param>
            <param name="state">Target state of the chamber.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.RevolverFirearm.Rotate(System.Int32)">
            <summary>
            Rotates the chamber counter-clockwise (positive numbers) or clockwise (negative numbers) <paramref name="amount"/> times.
            No animation is played client-side.
            </summary>
            <param name="amount">The amount of times to rotate this cylinder.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.RevolverFirearm.TrySpin">
            <summary>
            Attempts to spin the revolver if the firearm isn't busy doing something else.
            </summary>
            <returns>Whether the spin request was successful.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.RevolverFirearm.CacheModules">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Features.Wrappers.Scp127Firearm">
            <summary>
            Wrapper for SCP-127.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp127Firearm.#ctor(InventorySystem.Items.Firearms.Firearm)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="firearm">The base <see cref="T:InventorySystem.Items.Firearms.Firearm"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp127Firearm.OpenBolt">
            <inheritdoc/>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp127Firearm.Friends">
            <summary>
            Gets all players who are friended with this SCP.<br/>
            This means every player who talked with this SCP at least once and is still alive.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp127Firearm.Tier">
            <summary>
            Gets or sets the <see cref="T:InventorySystem.Items.Firearms.Modules.Scp127.Scp127Tier"/> the firearm has.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp127Firearm.Experience">
            <summary>
            Gets or sets the experience amount of this firearm.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp127Firearm.ChamberedAmmo">
            <inheritdoc/>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp127Firearm.ChamberMax">
            <inheritdoc/>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp127Firearm.MagazineInserted">
            <inheritdoc/>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp127Firearm.StoredAmmo">
            <summary>
            Gets or sets the stored ammo in a <b>ammo container</b> for this firearm.
            </summary>
            <remarks>
            SCP-127 stored ammo is capped at <see cref="P:LabApi.Features.Wrappers.FirearmItem.MaxAmmo"/> and any values beyond are ignored.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp127Firearm.PlayVoiceline(InventorySystem.Items.Firearms.Modules.Scp127.Scp127VoiceLinesTranslation,InventorySystem.Items.Firearms.Modules.Scp127.Scp127VoiceTriggerBase.VoiceLinePriority)">
            <summary>
            Plays a specific voiceline defined by the <see cref="T:InventorySystem.Items.Firearms.Modules.Scp127.Scp127VoiceLinesTranslation"/>.
            </summary>
            <param name="voiceline">The target voiceline to play.</param>
            <param name="priority">The priority to play this voice line with.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp127Firearm.CacheModules">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Features.Wrappers.ShotgunFirearm">
            <summary>
            Wrapper for shotgun firearm.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.ShotgunFirearm.#ctor(InventorySystem.Items.Firearms.Firearm)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="firearm">The base <see cref="T:InventorySystem.Items.Firearms.Firearm"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.ShotgunFirearm.OpenBolt">
            <inheritdoc/>
        </member>
        <member name="P:LabApi.Features.Wrappers.ShotgunFirearm.Cocked">
            <summary>
            Gets whether any of the hammers is cocked.
            Sets the cocked status of ALL hammers.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ShotgunFirearm.CockedChambers">
            <summary>
            Gets or sets the amount of currently cocked chambers.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ShotgunFirearm.ChamberMax">
            <summary>
            Gets or sets the amount of barrels this shotgun has.
            Useful when creating custom weapons.<br/>
            It is recommended to set this value before the shotgun has been pumped by the player, otherwise you might need to set <see cref="P:LabApi.Features.Wrappers.ShotgunFirearm.CockedChambers"/> and <see cref="P:LabApi.Features.Wrappers.ShotgunFirearm.ChamberedAmmo"/> to the correct value.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ShotgunFirearm.ChamberedAmmo">
            <summary>
            Gets or sets the current ammo in the barrels.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.ShotgunFirearm.Pump(System.Int32)">
            <summary>
            Schedules pumping for this firearm.<br/>
            Value of 0 pumps the firearm instantly. Any value above 0 delays the pump by <paramref name="shotsFired"/> * 0.5 second.
            </summary>
            <param name="shotsFired">The amount of shots that has been fired. Pumping is delayed by <paramref name="shotsFired"/> * 0.5 second.</param>
        </member>
        <member name="T:LabApi.Features.Wrappers.Item">
             <summary>
             The wrapper representing <see cref="T:InventorySystem.Items.ItemBase">object</see>.
            
             <para>Not to be confused with <see cref="T:LabApi.Features.Wrappers.Pickup">item pickup</see>.</para>
             </summary>
        </member>
        <member name="F:LabApi.Features.Wrappers.Item.TypeWrappers">
            <summary>
            Contains all the handlers for constructing wrappers for the associated base game types.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Item.Dictionary">
            <summary>
            Contains all the cached items, accessible through their <see cref="P:LabApi.Features.Wrappers.Item.Base"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Item.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.Item"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Item.SerialsCache">
            <summary>
            Contains all cached items with their <see cref="P:LabApi.Features.Wrappers.Item.Serial"/> as a key.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Item.Get(InventorySystem.Items.ItemBase)">
            <summary>
            Gets the item wrapper from the <see cref="P:LabApi.Features.Wrappers.Item.Dictionary"/> if it exists and the <see cref="T:InventorySystem.Items.ItemBase"/> was not <see langword="null"/>.
            </summary>
            <param name="itemBase">The <see cref="P:LabApi.Features.Wrappers.Item.Base"/> of the item.</param>
            <returns>The requested item or null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Item.TryGet(InventorySystem.Items.ItemBase,LabApi.Features.Wrappers.Item@)">
            <summary>
            Tries to get the item wrapper from the <see cref="P:LabApi.Features.Wrappers.Item.Dictionary"/>.
            </summary>
            <param name="itemBase">The <see cref="P:LabApi.Features.Wrappers.Item.Base"/> of the item.</param>
            <param name="item">The requested item.</param>
            <returns>True if the item exists, otherwise false.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Item.Get(System.UInt16)">
            <summary>
            Gets the item wrapper or null from <see cref="P:LabApi.Features.Wrappers.Item.SerialsCache"/>.
            </summary>
            <param name="serial">Serial of the item.</param>
            <returns>The requested item.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Item.TryGet(System.UInt16,LabApi.Features.Wrappers.Item@)">
            <summary>
            Gets the item wrapper or null from the <see cref="P:LabApi.Features.Wrappers.Item.Dictionary"/> based on provided serial number.
            </summary>
            <param name="serial">The serial number of the item.</param>
            <param name="item">The requested item.</param>
            <returns>Whether the was successfully retrieved, otherwise false.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Item.GetAll(ItemType)">
            <summary>
            Gets a pooled list of items having the same <see cref="T:ItemType"/>.
            </summary>
            <param name="type">Target type.</param>
            <returns>A List of items.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Item.GetAll(ItemCategory)">
            <summary>
            Gets a pooled list of items having the same <see cref="T:ItemCategory"/>.
            </summary>
            <param name="category">Target category.</param>
            <returns>A List of items.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Item.Initialize">
            <summary>
            Initializes the <see cref="T:LabApi.Features.Wrappers.Item"/> class by subscribing to <see cref="T:InventorySystem.Items.ItemBase"/> events and registers derived wrappers.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Item.CreateItemWrapper(InventorySystem.Items.ItemBase)">
            <summary>
            Creates a new wrapper from the base item object.
            </summary>
            <param name="item">The base object.</param>
            <returns>The newly created wrapper.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Item.AddItem(InventorySystem.Items.ItemBase)">
            <summary>
            A private method to handle the creation of new items in the server.
            </summary>
            <param name="item">The created <see cref="T:InventorySystem.Items.ItemBase"/> instance.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Item.RemoveItem(InventorySystem.Items.ItemBase)">
            <summary>
            A private method to handle the removal of items from the server.
            </summary>
            <param name="itemBase">The to be destroyed <see cref="T:InventorySystem.Items.ItemBase"/> instance.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Item.Register``1(System.Func{``0,LabApi.Features.Wrappers.Item})">
            <summary>
            A private method to handle the addition of wrapper handlers.
            </summary>
            <typeparam name="T">The derived base game type to handle.</typeparam>
            <param name="constructor">A handler to construct the wrapper with the base game instance.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Item.#ctor(InventorySystem.Items.ItemBase)">
            <summary>
            A private constructor to prevent external instantiation.
            </summary>
            <param name="itemBase">The <see cref="P:LabApi.Features.Wrappers.Item.Base"/> of the item.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Item.Base">
            <summary>
            The <see cref="P:LabApi.Features.Wrappers.Item.Base"/> of the item.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Item.GameObject">
            <summary>
            Gets the item's <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Item.IsDestroyed">
            <summary>
            Gets whether the item was destroyed.
            </summary>
            <remarks>
            Happens when an item is either dropped, removed or used up.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Item.IsPrefab">
            <summary>
            Gets whether or not this instance is used as a prefab.
            </summary>
            <remarks>
            Changes made to the prefab instance will be reflected across all subsequent new instances.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Item.Type">
            <summary>
            Gets the item's <see cref="T:ItemType"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Item.Category">
            <summary>
            Gets or sets the item's <see cref="T:ItemCategory"/>.
            <para>
            Category is not saved and is discarded when the item is dropped.
            </para>
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Item.TierFlags">
            <summary>
            Gets or sets the item's <see cref="T:ItemTierFlags"/>.
            <para>
            Flags are not saved and are discarded when the item is dropped.
            </para>
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Item.ThrowSettings">
            <summary>
            Gets or sets the item's <see cref="T:InventorySystem.Items.ItemThrowSettings"/>.
            <para>
            Settings are not saved and are discarded when the item is dropped.
            </para>
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Item.AddReason">
            <summary>
            Gets the item's reason for being added to the inventory.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Item.IsEquipped">
            <summary>
            Gets whether the item is being held.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Item.CanEquip">
            <summary>
            Gets whether the item can be equipped.
            </summary>
            <remarks>
            Only applies to player interactions, forcefully equipping an item is always possible.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Item.CanHolster">
            <summary>
            Gets whether the item can be holstered.
            </summary>
            <remarks>
            An item is holstered when either changing to another item or deflecting the item.
            Only applies to player interactions, forcefully holstering an item is always possible.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Item.CanDrop">
            <summary>
            Gets whether the item can be dropped.
            </summary>
            <remarks>
            Only applies to player interactions, forcefully dropping an item is always possible.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Item.CurrentOwner">
            <summary>
            Gets the item's current owner.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Item.Serial">
            <summary>
            Gets the item's serial.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Item.Weight">
            <summary>
            Gets the item's weight.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Item.CanCache">
            <summary>
            Gets whether the item wrapper is allowed to be cached.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Item.DropItem">
            <summary>
            Drops this item from player's inventory.
            </summary>
            <returns>The dropped item as a <see cref="T:LabApi.Features.Wrappers.Pickup"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Item.MoveTo(LabApi.Features.Wrappers.Player)">
            <summary>
            Moves the item to the specified players inventory.
            </summary>
            <param name="player">The player to move this item to.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Item.ToString">
            <inheritdoc />
        </member>
        <member name="M:LabApi.Features.Wrappers.Item.OnRemove">
            <summary>
            An internal virtual method to signal to derived implementations to uncache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.JailbirdItem">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.Jailbird.JailbirdItem"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.JailbirdItem.Dictionary">
            <summary>
            Contains all the cached jailbird items, accessible through their <see cref="T:InventorySystem.Items.Jailbird.JailbirdItem"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.JailbirdItem.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.JailbirdItem"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.JailbirdItem.Get(InventorySystem.Items.Jailbird.JailbirdItem)">
            <summary>
            Gets the jailbird item wrapper from the <see cref="P:LabApi.Features.Wrappers.JailbirdItem.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Jailbird.JailbirdItem"/> was not null.
            </summary>
            <param name="baseJailbirdItem">The <see cref="P:LabApi.Features.Wrappers.JailbirdItem.Base"/> of the item.</param>
            <returns>The requested item or null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.JailbirdItem.#ctor(InventorySystem.Items.Jailbird.JailbirdItem)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseJailbirdItem">The base <see cref="T:InventorySystem.Items.Jailbird.JailbirdItem"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.JailbirdItem.Base">
            <summary>
            The base <see cref="T:InventorySystem.Items.Jailbird.JailbirdItem"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.JailbirdItem.TotalChargesPerformed">
            <summary>
            Gets the number of charges performed.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.JailbirdItem.IsCharging">
            <summary>
            Gets whether the <see cref="P:LabApi.Features.Wrappers.Item.CurrentOwner"/> is currently charging with the jailbird.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.JailbirdItem.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.KeycardItem">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.Keycards.KeycardItem"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.KeycardItem.Dictionary">
            <summary>
            Contains all the cached keycard items, accessible through their <see cref="T:InventorySystem.Items.Keycards.KeycardItem"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.KeycardItem.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.KeycardItem"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.KeycardItem.CreateCustomKeycardSite02(LabApi.Features.Wrappers.Player,System.String,System.String,System.String,Interactables.Interobjects.DoorUtils.KeycardLevels,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,System.Byte)">
            <summary>
            Creates custom <see cref="F:ItemType.KeycardCustomSite02"/> and gives it to the <paramref name="targetPlayer"/>.
            </summary>
            <param name="targetPlayer">The player who should receive the keycard.</param>
            <param name="itemName">Item name of the keycard.</param>
            <param name="holderName">Name written as holder of the keycard.</param>
            <param name="cardLabel">Label written on the keycard.</param>
            <param name="permissions">Permission levels that the keycard has.</param>
            <param name="keycardColor">Primary color of the keycard.</param>
            <param name="permissionsColor">Color of the permission circles on the keycard.</param>
            <param name="labelColor">Color of the <paramref name="cardLabel"/>.</param>
            <param name="wearLevel">Wear level of the keycard. A number between 0-3 (inclusive).</param>
            <returns>The keycard item. Or <see langword="null"/> if the item couldn't be given to the target <paramref name="targetPlayer"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.KeycardItem.CreateCustomKeycardTaskForce(LabApi.Features.Wrappers.Player,System.String,System.String,Interactables.Interobjects.DoorUtils.KeycardLevels,UnityEngine.Color,UnityEngine.Color,System.String,System.Int32)">
            <summary>
            Creates custom <see cref="F:ItemType.KeycardCustomTaskForce"/> and gives it to the <paramref name="targetPlayer"/>.
            </summary>
            <param name="targetPlayer">The player who should receive the keycard.</param>
            <param name="itemName">Item name of the keycard.</param>
            <param name="holderName">Name written as holder of the keycard.</param>
            <param name="permissions">Permission levels that the keycard has.</param>
            <param name="keycardColor">Primary color of the keycard.</param>
            <param name="permissionsColor">Color of the permission circles on the keycard.</param>
            <param name="serialLabel">12 digit string containing serial number written on the keycard. Any missing digits are prepended with 0 and any extra characters after 12 are ignored.</param>
            <param name="rankIndex">Rank level of the keycard. A number between 0-3 (inclusive).</param>
            <returns>The keycard item. Or <see langword="null"/> if the item couldn't be given to the target <paramref name="targetPlayer"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.KeycardItem.CreateCustomKeycardMetal(LabApi.Features.Wrappers.Player,System.String,System.String,System.String,Interactables.Interobjects.DoorUtils.KeycardLevels,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,System.Byte,System.String)">
            <summary>
            Creates custom <see cref="F:ItemType.KeycardCustomMetalCase"/> and gives it to the <paramref name="targetPlayer"/>.
            </summary>
            <param name="targetPlayer">The player who should receive the keycard.</param>
            <param name="itemName">Item name of the keycard.</param>
            <param name="holderName">Name written as holder of the keycard.</param>
            <param name="cardLabel">Label written on the keycard.</param>
            <param name="permissions">Permission levels that the keycard has.</param>
            <param name="keycardColor">Primary color of the keycard.</param>
            <param name="permissionsColor">Color of the permission circles on the keycard.</param>
            <param name="labelColor">Color of the <paramref name="cardLabel"/>.</param>
            <param name="wearLevel">Wear level of the keycard. A number between 0-3 (inclusive).</param>
            <param name="serialLabel">12 digit string containing serial number written on the keycard. Any missing digits are prepended with 0 and any extra characters after 12 are ignored.</param>
            <returns>The keycard item. Or <see langword="null"/> if the item couldn't be given to the target <paramref name="targetPlayer"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.KeycardItem.CreateCustomKeycardManagement(LabApi.Features.Wrappers.Player,System.String,System.String,Interactables.Interobjects.DoorUtils.KeycardLevels,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Creates custom <see cref="F:ItemType.KeycardCustomManagement"/> and gives it to the <paramref name="targetPlayer"/>.
            </summary>
            <param name="targetPlayer">The player who should receive the keycard.</param>
            <param name="itemName">Item name of the keycard.</param>
            <param name="cardLabel">Label written on the keycard.</param>
            <param name="permissions">Permission levels that the keycard has.</param>
            <param name="keycardColor">Primary color of the keycard.</param>
            <param name="permissionsColor">Color of the permission circles on the keycard.</param>
            <param name="labelColor">Color of the <paramref name="cardLabel"/>.</param>
            <returns>The keycard item. Or <see langword="null"/> if the item couldn't be given to the target <paramref name="targetPlayer"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.KeycardItem.CreateCustomCard(ItemType,LabApi.Features.Wrappers.Player,System.Object[])">
            <summary>
            Creates a custom keycard of <see cref="T:ItemType"/>.<br/>
            It is recommended to use other methods such as <see cref="M:LabApi.Features.Wrappers.KeycardItem.CreateCustomKeycardSite02(LabApi.Features.Wrappers.Player,System.String,System.String,System.String,Interactables.Interobjects.DoorUtils.KeycardLevels,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,System.Byte)"/> rather than figuring the parameters yourself.
            </summary>
            <param name="itemType">Type of the custom keycard.</param>
            <param name="targetPlayer">Players who should receive the keycard.</param>
            <param name="args">Object arguments to be given to the keycard.</param>
            <returns>The keycard item. Or <see langword="null"/> if the <paramref name="itemType"/> is not customizable or item couldn't be given to the target <paramref name="targetPlayer"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.KeycardItem.Get(InventorySystem.Items.Keycards.KeycardItem)">
            <summary>
            Gets the keycard item wrapper from the <see cref="P:LabApi.Features.Wrappers.KeycardItem.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Keycards.KeycardItem"/> was not null.
            </summary>
            <param name="baseKeycardItem">The <see cref="P:LabApi.Features.Wrappers.KeycardItem.Base"/> of the item.</param>
            <returns>The requested item or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.KeycardItem.#ctor(InventorySystem.Items.Keycards.KeycardItem)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseKeycardItem">The base <see cref="T:InventorySystem.Items.Keycards.KeycardItem"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.KeycardItem.Base">
            <summary>
            The base <see cref="T:InventorySystem.Items.Keycards.KeycardItem"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.KeycardItem.Permissions">
            <summary>
            Gets the <see cref="T:Interactables.Interobjects.DoorUtils.DoorPermissionFlags"/> of the keycard.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.KeycardItem.Levels">
            <summary>
            Gets the <see cref="T:Interactables.Interobjects.DoorUtils.KeycardLevels"/> of the keycard which represent the tiers shown on the keycard.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.KeycardItem.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.FlashlightItem">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.ToggleableLights.Flashlight.FlashlightItem"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FlashlightItem.Dictionary">
            <summary>
            Contains all the cached flashlight items, accessible through their <see cref="T:InventorySystem.Items.ToggleableLights.Flashlight.FlashlightItem"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FlashlightItem.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.FlashlightItem"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.FlashlightItem.Get(InventorySystem.Items.ToggleableLights.Flashlight.FlashlightItem)">
            <summary>
            Gets the flashlight item wrapper from the <see cref="P:LabApi.Features.Wrappers.FlashlightItem.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.ToggleableLights.Flashlight.FlashlightItem"/> was not null.
            </summary>
            <param name="baseFlashlightItem">The <see cref="P:LabApi.Features.Wrappers.FlashlightItem.Base"/> of the item.</param>
            <returns>The requested item or null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.FlashlightItem.#ctor(InventorySystem.Items.ToggleableLights.Flashlight.FlashlightItem)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseFlashlightItem">The base <see cref="T:InventorySystem.Items.ToggleableLights.Flashlight.FlashlightItem"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.FlashlightItem.Base">
            <summary>
            The base <see cref="T:InventorySystem.Items.ToggleableLights.Flashlight.FlashlightItem"/> object.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.FlashlightItem.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.LanternItem">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.ToggleableLights.Lantern.LanternItem"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LanternItem.Dictionary">
            <summary>
            Contains all the cached lantern items, accessible through their <see cref="T:InventorySystem.Items.ToggleableLights.Lantern.LanternItem"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LanternItem.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.LanternItem"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.LanternItem.Get(InventorySystem.Items.ToggleableLights.Lantern.LanternItem)">
            <summary>
            Gets the lantern item wrapper from the <see cref="P:LabApi.Features.Wrappers.LanternItem.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.ToggleableLights.Lantern.LanternItem"/> was not null.
            </summary>
            <param name="baseLanternItem">The <see cref="P:LabApi.Features.Wrappers.LanternItem.Base"/> of the item.</param>
            <returns>The requested item or null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.LanternItem.#ctor(InventorySystem.Items.ToggleableLights.Lantern.LanternItem)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseLanternItem">The base <see cref="T:InventorySystem.Items.ToggleableLights.Lantern.LanternItem"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.LanternItem.Base">
            <summary>
            The base <see cref="T:InventorySystem.Items.ToggleableLights.Lantern.LanternItem"/> object.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.LanternItem.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.LightItem">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.ToggleableLights.ToggleableLightItemBase"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LightItem.Dictionary">
            <summary>
            Contains all the cached light items, accessible through their <see cref="T:InventorySystem.Items.ToggleableLights.ToggleableLightItemBase"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LightItem.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.LightItem"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.LightItem.Get(InventorySystem.Items.ToggleableLights.ToggleableLightItemBase)">
            <summary>
            Gets the light item wrapper from the <see cref="P:LabApi.Features.Wrappers.LightItem.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.ToggleableLights.ToggleableLightItemBase"/> was not null.
            </summary>
            <param name="toggleableLight">The <see cref="P:LabApi.Features.Wrappers.LightItem.Base"/> of the item.</param>
            <returns>The requested item or null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.LightItem.#ctor(InventorySystem.Items.ToggleableLights.ToggleableLightItemBase)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="toggleableLightItemBase">The base <see cref="T:InventorySystem.Items.ToggleableLights.ToggleableLightItemBase"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.LightItem.Base">
            <summary>
            The base <see cref="T:InventorySystem.Items.ToggleableLights.ToggleableLightItemBase"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.LightItem.IsEmitting">
            <summary>
            Gets or sets whether the item is emitting light.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.LightItem.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.MicroHIDItem">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.MicroHID.MicroHIDItem"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MicroHIDItem.Dictionary">
            <summary>
            Contains all the cached micro hid items, accessible through their <see cref="T:InventorySystem.Items.MicroHID.MicroHIDItem"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MicroHIDItem.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.MicroHIDItem"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.MicroHIDItem.Get(InventorySystem.Items.MicroHID.MicroHIDItem)">
            <summary>
            Gets the micro hid item wrapper from the <see cref="P:LabApi.Features.Wrappers.MicroHIDItem.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.MicroHID.MicroHIDItem"/> was not null.
            </summary>
            <param name="baseMicroHIDItem">The <see cref="P:LabApi.Features.Wrappers.MicroHIDItem.Base"/> of the item.</param>
            <returns>The requested item or null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.MicroHIDItem.#ctor(InventorySystem.Items.MicroHID.MicroHIDItem)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseMicroHIDItem">The base <see cref="T:InventorySystem.Items.MicroHID.MicroHIDItem"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.MicroHIDItem.Base">
            <summary>
            The base <see cref="T:InventorySystem.Items.MicroHID.MicroHIDItem"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MicroHIDItem.BaseEnergyManager">
            <summary>
            The base <see cref="T:InventorySystem.Items.MicroHID.Modules.EnergyManagerModule"/> module.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MicroHIDItem.BaseInputSyncModule">
            <summary>
            The base <see cref="T:InventorySystem.Items.MicroHID.Modules.InputSyncModule"/> module.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MicroHIDItem.BaseBrokenSyncModule">
            <summary>
            The base <see cref="T:InventorySystem.Items.MicroHID.Modules.BrokenSyncModule"/> module.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MicroHIDItem.BaseCycleController">
            <summary>
            The base <see cref="T:InventorySystem.Items.MicroHID.Modules.CycleController"/> controller.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MicroHIDItem.Energy">
            <summary>
            Gets or sets the remaining energy left in the micro.
            0.0 = empty, 1.0 = full.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MicroHIDItem.IsBroken">
            <summary>
            Gets or sets whether the micro is considered broken.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MicroHIDItem.Phase">
            <summary>
            Gets or sets the current <see cref="T:InventorySystem.Items.MicroHID.Modules.MicroHidPhase"/> of the micro.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MicroHIDItem.FiringMode">
            <summary>
            Gets or sets the last known firing mode of the micro.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MicroHIDItem.WindUpProgress">
            <summary>
            The progress from 0 to 1 for how ready the micro is to fire.
            Goes up when winding up, and down when winding down.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MicroHIDItem.PhaseElapsed">
            <summary>
            Time in seconds that the current phase has been active.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MicroHIDItem.IsPrimaryHeld">
            <summary>
            Gets whether the primary fire is being held by the <see cref="P:LabApi.Features.Wrappers.Item.CurrentOwner"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MicroHIDItem.IsSecondaryHeld">
            <summary>
            Gets whether the secondary fire is being held by the <see cref="P:LabApi.Features.Wrappers.Item.CurrentOwner"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.MicroHIDItem.TryGetSoundEmissionRange(System.Single@)">
            <summary>
            Tries to get the audible range in meters for the sound being emitted.
            </summary>
            <param name="range">The sounds range in meters.</param>
            <returns>Returns true if the micro is emitting sound, otherwise false.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.MicroHIDItem.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.RadioItem">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.Radio.RadioItem"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RadioItem.Dictionary">
            <summary>
            Contains all the cached radio items, accessible through their <see cref="T:InventorySystem.Items.Radio.RadioItem"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RadioItem.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.RadioItem"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.RadioItem.Get(InventorySystem.Items.Radio.RadioItem)">
            <summary>
            Gets the radio item wrapper from the <see cref="P:LabApi.Features.Wrappers.RadioItem.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Radio.RadioItem"/> was not null.
            </summary>
            <param name="baseRadioItem">The <see cref="P:LabApi.Features.Wrappers.RadioItem.Base"/> of the item.</param>
            <returns>The requested item or null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.RadioItem.#ctor(InventorySystem.Items.Radio.RadioItem)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseRadioItem">The base <see cref="T:InventorySystem.Items.Radio.RadioItem"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.RadioItem.Base">
            <summary>
            The base <see cref="T:InventorySystem.Items.Radio.RadioItem"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RadioItem.IsUsable">
            <summary>
            Gets whether the radio is enabled and had battery.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RadioItem.IsTransmitting">
            <summary>
            Gets whether the <see cref="P:LabApi.Features.Wrappers.Item.CurrentOwner"/> is talking into the radio.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RadioItem.BatteryPercent">
            <summary>
            Gets or sets the battery percentage from 0 to 100.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RadioItem.RangeLevel">
            <summary>
            Gets the current <see cref="T:InventorySystem.Items.Radio.RadioMessages.RadioRangeLevel"/> range level of the radio.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.RadioItem.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.ThrowableItem">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.ThrowableProjectiles.ThrowableItem"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ThrowableItem.Dictionary">
            <summary>
            Contains all the cached throwable items, accessible through their <see cref="T:InventorySystem.Items.ThrowableProjectiles.ThrowableItem"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ThrowableItem.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.ThrowableItem"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.ThrowableItem.Get(InventorySystem.Items.ThrowableProjectiles.ThrowableItem)">
            <summary>
            Gets the throwable item wrapper from the <see cref="P:LabApi.Features.Wrappers.ThrowableItem.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.ThrowableProjectiles.ThrowableItem"/> was not null.
            </summary>
            <param name="baseThrowableItem">The <see cref="P:LabApi.Features.Wrappers.ThrowableItem.Base"/> of the item.</param>
            <returns>The requested item or null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.ThrowableItem.#ctor(InventorySystem.Items.ThrowableProjectiles.ThrowableItem)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseThrowableItem">The base <see cref="T:InventorySystem.Items.ThrowableProjectiles.ThrowableItem"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.ThrowableItem.Base">
            <summary>
            The base <see cref="T:InventorySystem.Items.ThrowableProjectiles.ThrowableItem"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ThrowableItem.WeakThrowStartVelocity">
            <summary>
            Gets or set the velocity added in the forward direction on a weak throw.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ThrowableItem.WeakThrowUpwardsFactor">
            <summary>
            Gets or sets the velocity added in the upward direction on a weak throw.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ThrowableItem.WeakThrowStartTorque">
            <summary>
            Gets or sets the torque added to the projectile on a weak throw.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ThrowableItem.WeakThrowRelativePosition">
            <summary>
            Gets or sets the spawnpoint relative to the players camera on a weak throw.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ThrowableItem.FullThrowStartVelocity">
            <summary>
            Gets or set the velocity added in the forward direction on a full throw.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ThrowableItem.FullThrowUpwardsFactor">
            <summary>
            Gets or sets the velocity added in the upward direction on a full throw.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ThrowableItem.FullThrowStartTorque">
            <summary>
            Gets or sets the torque added to the projectile on a full throw.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ThrowableItem.FullThrowRelativePosition">
            <summary>
            Gets or sets the spawnpoint relative to the players camera on a full throw.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.ThrowableItem.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.AdrenalineItem">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.Usables.Adrenaline"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.AdrenalineItem.Dictionary">
            <summary>
            Contains all the cached adrenaline items, accessible through their <see cref="T:InventorySystem.Items.Usables.Adrenaline"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.AdrenalineItem.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.AdrenalineItem"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.AdrenalineItem.Get(InventorySystem.Items.Usables.Adrenaline)">
            <summary>
            Gets the adrenaline item wrapper from the <see cref="P:LabApi.Features.Wrappers.AdrenalineItem.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Usables.Adrenaline"/> was not null.
            </summary>
            <param name="adrenaline">The <see cref="P:LabApi.Features.Wrappers.AdrenalineItem.Base"/> of the item.</param>
            <returns>The requested item or null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.AdrenalineItem.#ctor(InventorySystem.Items.Usables.Adrenaline)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="adrenaline">The base <see cref="T:InventorySystem.Items.Usables.Adrenaline"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.AdrenalineItem.Base">
            <summary>
            The base <see cref="T:InventorySystem.Items.Usables.Adrenaline"/> object.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.AdrenalineItem.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.AntiScp207Item">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.Usables.AntiScp207"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.AntiScp207Item.Dictionary">
            <summary>
            Contains all the cached anti SCP-207 items, accessible through their <see cref="T:InventorySystem.Items.Usables.AntiScp207"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.AntiScp207Item.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.AntiScp207Item"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.AntiScp207Item.Get(InventorySystem.Items.Usables.AntiScp207)">
            <summary>
            Gets the anti SPC-207 item wrapper from the <see cref="P:LabApi.Features.Wrappers.AntiScp207Item.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Usables.AntiScp207"/> was not null.
            </summary>
            <param name="antiScp207">The <see cref="P:LabApi.Features.Wrappers.AntiScp207Item.Base"/> of the item.</param>
            <returns>The requested item or null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.AntiScp207Item.#ctor(InventorySystem.Items.Usables.AntiScp207)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="antiScp207">The base <see cref="T:InventorySystem.Items.Usables.AntiScp207"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.AntiScp207Item.Base">
            <summary>
            The base <see cref="T:InventorySystem.Items.Usables.AntiScp207"/> object.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.AntiScp207Item.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.ConsumableItem">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.Usables.Consumable"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ConsumableItem.Dictionary">
            <summary>
            Contains all the cached consumable items, accessible through their <see cref="T:InventorySystem.Items.Usables.Consumable"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ConsumableItem.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.ConsumableItem"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.ConsumableItem.Get(InventorySystem.Items.Usables.Consumable)">
            <summary>
            Gets the consumable item wrapper from the <see cref="P:LabApi.Features.Wrappers.ConsumableItem.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Usables.Consumable"/> was not null.
            </summary>
            <param name="consumable">The <see cref="P:LabApi.Features.Wrappers.ConsumableItem.Base"/> of the item.</param>
            <returns>The requested item or null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.ConsumableItem.#ctor(InventorySystem.Items.Usables.Consumable)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="consumable">The base <see cref="T:InventorySystem.Items.Usables.Consumable"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.ConsumableItem.Base">
            <summary>
            The base <see cref="T:InventorySystem.Items.Usables.Consumable"/> object.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.ConsumableItem.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.MedkitItem">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.Usables.Medkit"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MedkitItem.Dictionary">
            <summary>
            Contains all the cached medkit items, accessible through their <see cref="T:InventorySystem.Items.Usables.Medkit"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MedkitItem.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.MedkitItem"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.MedkitItem.Get(InventorySystem.Items.Usables.Medkit)">
            <summary>
            Gets the medkit item wrapper from the <see cref="P:LabApi.Features.Wrappers.MedkitItem.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Usables.Medkit"/> was not null.
            </summary>
            <param name="medkit">The <see cref="P:LabApi.Features.Wrappers.MedkitItem.Base"/> of the item.</param>
            <returns>The requested item or null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.MedkitItem.#ctor(InventorySystem.Items.Usables.Medkit)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="medkit">The base <see cref="T:InventorySystem.Items.Usables.Medkit"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.MedkitItem.Base">
            <summary>
            The base <see cref="T:InventorySystem.Items.Usables.Medkit"/> object.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.MedkitItem.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.PainkillersItem">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.Usables.Painkillers"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PainkillersItem.Dictionary">
            <summary>
            Contains all the cached painkiller items, accessible through their <see cref="T:InventorySystem.Items.Usables.Painkillers"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.PainkillersItem.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.PainkillersItem"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.PainkillersItem.Get(InventorySystem.Items.Usables.Painkillers)">
            <summary>
            Gets the painkillers item wrapper from the <see cref="P:LabApi.Features.Wrappers.PainkillersItem.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Usables.Painkillers"/> was not null.
            </summary>
            <param name="painkillers">The <see cref="P:LabApi.Features.Wrappers.PainkillersItem.Base"/> of the item.</param>
            <returns>The requested item or null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.PainkillersItem.#ctor(InventorySystem.Items.Usables.Painkillers)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="painkillers">The base <see cref="T:InventorySystem.Items.Usables.Painkillers"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.PainkillersItem.Base">
            <summary>
            The base <see cref="T:InventorySystem.Items.Usables.Painkillers"/> object.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.PainkillersItem.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Scp1853Item">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.Usables.Scp1853Item"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp1853Item.Dictionary">
            <summary>
            Contains all the cached SCP-1853 items, accessible through their <see cref="T:InventorySystem.Items.Usables.Scp1853Item"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp1853Item.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.Scp1853Item"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp1853Item.Get(InventorySystem.Items.Usables.Scp1853Item)">
            <summary>
            Gets the SCP-1853 item wrapper from the <see cref="P:LabApi.Features.Wrappers.Scp1853Item.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Usables.Scp1853Item"/> was not null.
            </summary>
            <param name="baseScp1853Item">The <see cref="P:LabApi.Features.Wrappers.Scp1853Item.Base"/> of the item.</param>
            <returns>The requested item or null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp1853Item.#ctor(InventorySystem.Items.Usables.Scp1853Item)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseScp1853Item">The base <see cref="T:InventorySystem.Items.Usables.Scp1853Item"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp1853Item.Base">
            <summary>
            The base <see cref="T:InventorySystem.Items.Usables.Scp1853Item"/> object.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp1853Item.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Scp207Item">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.Usables.Scp207"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp207Item.Dictionary">
            <summary>
            Contains all the cached SCP-207 items, accessible through their <see cref="T:InventorySystem.Items.Usables.Scp207"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp207Item.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.Scp207Item"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp207Item.Get(InventorySystem.Items.Usables.Scp207)">
            <summary>
            Gets the SCP-207 item wrapper from the <see cref="P:LabApi.Features.Wrappers.Scp207Item.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Usables.Scp207"/> was not null.
            </summary>
            <param name="scp207">The <see cref="P:LabApi.Features.Wrappers.Scp207Item.Base"/> of the item.</param>
            <returns>The requested item or null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp207Item.#ctor(InventorySystem.Items.Usables.Scp207)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="scp207">The base <see cref="T:InventorySystem.Items.Usables.Scp207"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp207Item.Base">
            <summary>
            The base <see cref="T:InventorySystem.Items.Usables.Scp207"/> object.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp207Item.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Scp500Item">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.Usables.Scp500"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp500Item.Dictionary">
            <summary>
            Contains all the cached SCP-500 items, accessible through their <see cref="T:InventorySystem.Items.Usables.Scp500"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp500Item.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.Scp500Item"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp500Item.Get(InventorySystem.Items.Usables.Scp500)">
            <summary>
            Gets the SCP-500 item wrapper from the <see cref="P:LabApi.Features.Wrappers.Scp500Item.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Usables.Scp500"/> was not null.
            </summary>
            <param name="scp500">The <see cref="P:LabApi.Features.Wrappers.Scp500Item.Base"/> of the item.</param>
            <returns>The requested item or null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp500Item.#ctor(InventorySystem.Items.Usables.Scp500)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="scp500">The base <see cref="T:InventorySystem.Items.Usables.Scp500"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp500Item.Base">
            <summary>
            The base <see cref="T:InventorySystem.Items.Usables.Scp500"/> object.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp500Item.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Scp1344Item">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.Usables.Scp1344.Scp1344Item"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp1344Item.Dictionary">
            <summary>
            Contains all the cached SCP-1344 items, accessible through their <see cref="T:InventorySystem.Items.Usables.Scp1344.Scp1344Item"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp1344Item.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.Scp1344Item"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp1344Item.Get(InventorySystem.Items.Usables.Scp1344.Scp1344Item)">
            <summary>
            Gets the SCP-1576 item wrapper from the <see cref="P:LabApi.Features.Wrappers.Scp1344Item.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Usables.Scp1344.Scp1344Item"/> was not null.
            </summary>
            <param name="baseItem">The <see cref="P:LabApi.Features.Wrappers.Scp1344Item.Base"/> of the item.</param>
            <returns>The requested item or null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp1344Item.#ctor(InventorySystem.Items.Usables.Scp1344.Scp1344Item)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseItem">The base <see cref="T:InventorySystem.Items.Usables.Scp1344.Scp1344Item"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp1344Item.Base">
            <summary>
            The base <see cref="T:InventorySystem.Items.Usables.Scp1344.Scp1344Item"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp1344Item.IsWorn">
            <summary>
            Gets whether the player is wearing scp1344.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp1344Item.Status">
            <summary>
            Gets or sets the current status of the item.
            </summary>
            <remarks>
            In some cases certain statuses wont sync with the client, so the corresponding animation wont play.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp1344Item.Scp1344Effect">
            <summary>
            The <see cref="T:CustomPlayerEffects.Scp1344"/> effect of the <see cref="P:LabApi.Features.Wrappers.Item.CurrentOwner"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp1344Item.BlindnessEffect">
            <summary>
            The <see cref="T:CustomPlayerEffects.Blindness"/> effect of the <see cref="P:LabApi.Features.Wrappers.Item.CurrentOwner"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp1344Item.SeveredEyesEffect">
            <summary>
            The <see cref="T:CustomPlayerEffects.SeveredEyes"/> effect of the <see cref="P:LabApi.Features.Wrappers.Item.CurrentOwner"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp1344Item.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Scp1576Item">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.Usables.Scp1576.Scp1576Item"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp1576Item.Dictionary">
            <summary>
            Contains all the cached SCP-1576 items, accessible through their <see cref="T:InventorySystem.Items.Usables.Scp1576.Scp1576Item"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp1576Item.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.Scp1576Item"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp1576Item.TransmitterList">
            <summary>
            The set of players who are able to transmit their voice to spectators using Scp1576.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp1576Item.ReceiverList">
            <summary>
            The set of players who are able to receive hear spectators talking through Scp1576.
            Includes people in the audible range of a player using Scp1567.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp1576Item.Get(InventorySystem.Items.Usables.Scp1576.Scp1576Item)">
            <summary>
            Gets the SCP-1576 item wrapper from the <see cref="P:LabApi.Features.Wrappers.Scp1576Item.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Usables.Scp1576.Scp1576Item"/> was not null.
            </summary>
            <param name="baseScp1576Item">The <see cref="P:LabApi.Features.Wrappers.Scp1576Item.Base"/> of the item.</param>
            <returns>The requested item or null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp1576Item.#ctor(InventorySystem.Items.Usables.Scp1576.Scp1576Item)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseScp1576Item">The base <see cref="T:InventorySystem.Items.Usables.Scp1576.Scp1576Item"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp1576Item.Base">
            <summary>
            The base <see cref="T:InventorySystem.Items.Usables.Scp1576.Scp1576Item"/> object.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp1576Item.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Scp244Item">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.Usables.Scp244.Scp244Item"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp244Item.Dictionary">
            <summary>
            Contains all the cached SCP-244 items, accessible through their <see cref="T:InventorySystem.Items.Usables.Scp244.Scp244Item"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp244Item.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.Scp244Item"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp244Item.Get(InventorySystem.Items.Usables.Scp244.Scp244Item)">
            <summary>
            Gets the SCP-244 item wrapper from the <see cref="P:LabApi.Features.Wrappers.Scp244Item.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Usables.Scp244.Scp244Item"/> was not null.
            </summary>
            <param name="baseScp244Item">The <see cref="P:LabApi.Features.Wrappers.Scp244Item.Base"/> of the item.</param>
            <returns>The requested item or null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp244Item.#ctor(InventorySystem.Items.Usables.Scp244.Scp244Item)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseScp244Item">The base <see cref="T:InventorySystem.Items.Usables.Scp244.Scp244Item"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp244Item.Base">
            <summary>
            The base <see cref="T:InventorySystem.Items.Usables.Scp244.Scp244Item"/> object.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp244Item.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Scp268Item">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.Usables.Scp268"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp268Item.Dictionary">
            <summary>
            Contains all the cached SCP-268 items, accessible through their <see cref="T:InventorySystem.Items.Usables.Scp268"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp268Item.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.Scp268Item"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp268Item.Get(InventorySystem.Items.Usables.Scp268)">
            <summary>
            Gets the SCP-268 item wrapper from the <see cref="P:LabApi.Features.Wrappers.Scp268Item.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Usables.Scp268"/> was not null.
            </summary>
            <param name="scp268">The <see cref="P:LabApi.Features.Wrappers.Scp268Item.Base"/> of the item.</param>
            <returns>The requested item or null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp268Item.#ctor(InventorySystem.Items.Usables.Scp268)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="scp268">The base <see cref="T:InventorySystem.Items.Usables.Scp268"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp268Item.Base">
            <summary>
            The base <see cref="T:InventorySystem.Items.Usables.Scp268"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp268Item.IsWorn">
            <summary>
            Gets or set whether or not the user is wearing Scp268.
            </summary>
            <remarks>
            Setting does not apply the items effects and only effects the third person model.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp268Item.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Scp330Item">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.Usables.Scp330.Scp330Bag"/>.
            </summary>
        </member>
        <member name="F:LabApi.Features.Wrappers.Scp330Item.MaxCandies">
            <summary>
            Maximum number of candies that can be contained in a bag.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp330Item.Dictionary">
            <summary>
            Contains all the cached SCP-330 items, accessible through their <see cref="T:InventorySystem.Items.Usables.Scp330.Scp330Bag"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp330Item.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.Scp330Item"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp330Item.Get(InventorySystem.Items.Usables.Scp330.Scp330Bag)">
            <summary>
            Gets the SCP-330 item wrapper from the <see cref="P:LabApi.Features.Wrappers.Scp330Item.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Usables.Scp330.Scp330Bag"/> was not null.
            </summary>
            <param name="baseScp330Item">The <see cref="P:LabApi.Features.Wrappers.Scp330Item.Base"/> of the item.</param>
            <returns>The requested item or null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp330Item.#ctor(InventorySystem.Items.Usables.Scp330.Scp330Bag)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseScp330Item">The base <see cref="T:InventorySystem.Items.Usables.Scp330.Scp330Bag"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp330Item.Base">
            <summary>
            The base <see cref="T:InventorySystem.Items.Usables.Scp330.Scp330Bag"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp330Item.Candies">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Usables.Scp330.CandyKindID">candies</see> contained in the bag.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp330Item.SelectedCandyIndex">
            <summary>
            Gets the selected candy index.
            </summary>
            <remarks>
            -1 if no candy is selected.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp330Item.AddCandies(System.Collections.Generic.IEnumerable{InventorySystem.Items.Usables.Scp330.CandyKindID},System.Boolean)">
            <summary>
            Adds the specified candies to the bag up to the <see cref="F:LabApi.Features.Wrappers.Scp330Item.MaxCandies"/>.
            </summary>
            <param name="candies">The set of candies to add.</param>
            <param name="sync">Whether to sync the changes to the client.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp330Item.RemoveCandies(System.Collections.Generic.IEnumerable{InventorySystem.Items.Usables.Scp330.CandyKindID},System.Boolean)">
            <summary>
            Removes the specified candies from the bag.
            </summary>
            <remarks>
            If the bag is empty and <paramref name="sync"/> is true the item will destroy itself.
            </remarks>
            <param name="candies">The set of candies to remove.</param>
            <param name="sync">Whether to sync the changes to the client.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp330Item.SetCandies(System.Collections.Generic.IEnumerable{InventorySystem.Items.Usables.Scp330.CandyKindID},System.Boolean)">
            <summary>
            Sets the bags candy contents.
            </summary>
            <param name="candies">The candies to have.</param>
            <param name="sync">Whether to sync the changes to the client.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp330Item.SyncCandies">
            <summary>
            Sync candy bag contents to the client.
            If the bag does not contain any candies this item will destroy itself.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp330Item.TryDrop(InventorySystem.Items.Usables.Scp330.CandyKindID,LabApi.Features.Wrappers.Pickup@)">
            <summary>
            Tries to drop the specified candy from the bag.
            </summary>
            <param name="kind">The candy kind to drop.</param>
            <param name="dropped">The dropped candy pickup.</param>
            <returns>True if the item was contained in the bag and it dropped successfully.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp330Item.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.UsableItem">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.Usables.UsableItem"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.UsableItem.Dictionary">
            <summary>
            Contains all the cached usable items, accessible through their <see cref="T:InventorySystem.Items.Usables.UsableItem"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.UsableItem.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.UsableItem"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.UsableItem.Get(InventorySystem.Items.Usables.UsableItem)">
            <summary>
            Gets the usable item wrapper from the <see cref="P:LabApi.Features.Wrappers.UsableItem.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Usables.UsableItem"/> was not null.
            </summary>
            <param name="baseUsableItem">The <see cref="P:LabApi.Features.Wrappers.UsableItem.Base"/> of the item.</param>
            <returns>The requested item or null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.UsableItem.#ctor(InventorySystem.Items.Usables.UsableItem)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseUsableItem">The base <see cref="T:InventorySystem.Items.Usables.UsableItem"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.UsableItem.Base">
            <summary>
            The base <see cref="T:InventorySystem.Items.Usables.UsableItem"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.UsableItem.IsUsing">
            <summary>
            Gets or sets whether the item is in use.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.UsableItem.UseDuration">
            <summary>
            Gets or set the duration in seconds to use the item.
            </summary>
            <remarks>
            Does not effect the client side animation time.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.UsableItem.MaxCancellableDuration">
            <summary>
            Gets or set the max duration in seconds after starting to use an item they are allowed to cancel.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.UsableItem.GlobalCooldownDuration">
            <summary>
            Gets or sets the duration in seconds for which the item of type <see cref="P:LabApi.Features.Wrappers.Item.Type"/> is on a cooldown for.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.UsableItem.PersonalCooldownDuration">
            <summary>
            Gets or sets the duration in seconds for which the item of type <see cref="P:LabApi.Features.Wrappers.Item.Type"/> is on a cooldown for the <see cref="P:LabApi.Features.Wrappers.Item.CurrentOwner"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.UsableItem.CanClientStartUsing">
            <summary>
            Gets whether the client is able to send use messages.
            </summary>
            <remarks>
            Not to be confused with whether the item can be used.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.UsableItem.Use">
            <summary>
            Apply the items effects to the <see cref="P:LabApi.Features.Wrappers.Item.CurrentOwner"/>.
            </summary>
            <remarks>
            Does not work on all items.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.UsableItem.TryGetSoundEmissionRange(System.Single@)">
            <summary>
            Tries to get the audible range in meters for the sound being emitted.
            </summary>
            <param name="range">The sounds range in meters.</param>
            <returns>Returns true if item is being used, otherwise false.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.UsableItem.OnRemove">
            <summary>
            An internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.AmmoPickup">
            <summary>
            Wrapper for the <see cref="T:InventorySystem.Items.Firearms.Ammo.AmmoPickup"/> class.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.AmmoPickup.Dictionary">
            <summary>
            Contains all the cached ammo pickups, accessible through their <see cref="T:InventorySystem.Items.Firearms.Ammo.AmmoPickup"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.AmmoPickup.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.AmmoPickup"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.AmmoPickup.Get(InventorySystem.Items.Firearms.Ammo.AmmoPickup)">
            <summary>
            Gets the ammo pickup from the <see cref="P:LabApi.Features.Wrappers.AmmoPickup.Dictionary"/> or creates a new if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Firearms.Ammo.AmmoPickup"/> was not <see langword="null"/>.
            </summary>
            <param name="pickup">The <see cref="P:LabApi.Features.Wrappers.AmmoPickup.Base"/> if the pickup.</param>
            <returns>The requested pickup or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.AmmoPickup.#ctor(InventorySystem.Items.Firearms.Ammo.AmmoPickup)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseAmmoPickup">The base <see cref="T:InventorySystem.Items.Firearms.Ammo.AmmoPickup"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.AmmoPickup.Base">
            <summary>
            The <see cref="T:InventorySystem.Items.Firearms.Ammo.AmmoPickup"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.AmmoPickup.Ammo">
            <summary>
            Gets or sets the ammo stored in this pickup.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.AmmoPickup.OnRemove">
            <summary>
            A internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.BodyArmorPickup">
            <summary>
            Wrapper for the <see cref="T:InventorySystem.Items.Armor.BodyArmorPickup"/> class.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.BodyArmorPickup.Dictionary">
            <summary>
            Contains all the cached body armor pickups, accessible through their <see cref="T:InventorySystem.Items.Armor.BodyArmorPickup"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.BodyArmorPickup.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.BodyArmorPickup"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.BodyArmorPickup.Get(InventorySystem.Items.Armor.BodyArmorPickup)">
            <summary>
            Gets the body armor pickup from the <see cref="P:LabApi.Features.Wrappers.BodyArmorPickup.Dictionary"/> or creates a new if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Armor.BodyArmorPickup"/> was not <see langword="null"/>.
            </summary>
            <param name="pickup">The <see cref="P:LabApi.Features.Wrappers.BodyArmorPickup.Base"/> if the pickup.</param>
            <returns>The requested pickup or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.BodyArmorPickup.#ctor(InventorySystem.Items.Armor.BodyArmorPickup)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseBodyArmorPickup">The base <see cref="T:InventorySystem.Items.Armor.BodyArmorPickup"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.BodyArmorPickup.Base">
            <summary>
            The <see cref="T:InventorySystem.Items.Armor.BodyArmorPickup"/> object.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.BodyArmorPickup.OnRemove">
            <summary>
            A internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.FirearmPickup">
            <summary>
            Wrapper for the <see cref="T:InventorySystem.Items.Firearms.FirearmPickup"/> class.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmPickup.Dictionary">
            <summary>
            Contains all the cached firearm pickups, accessible through their <see cref="T:InventorySystem.Items.Firearms.FirearmPickup"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmPickup.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.FirearmPickup"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.FirearmPickup.Get(InventorySystem.Items.Firearms.FirearmPickup)">
            <summary>
            Gets the firearm pickup from the <see cref="P:LabApi.Features.Wrappers.FirearmPickup.Dictionary"/> or creates a new if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Firearms.FirearmPickup"/> was not <see langword="null"/>.
            </summary>
            <param name="pickup">The <see cref="P:LabApi.Features.Wrappers.FirearmPickup.Base"/> if the pickup.</param>
            <returns>The requested pickup or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.FirearmPickup.#ctor(InventorySystem.Items.Firearms.FirearmPickup)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseFirearmPickup">The base <see cref="T:InventorySystem.Items.Firearms.FirearmPickup"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmPickup.Base">
            <summary>
            The <see cref="T:InventorySystem.Items.Firearms.FirearmPickup"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FirearmPickup.AttachmentCode">
            <summary>
            Gets or set the attachment code for the firearm.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.FirearmPickup.OnRemove">
            <summary>
            A internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.JailbirdPickup">
            <summary>
            Wrapper for the <see cref="T:InventorySystem.Items.Jailbird.JailbirdPickup"/> class.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.JailbirdPickup.Dictionary">
            <summary>
            Contains all the cached ammo pickups, accessible through their <see cref="T:InventorySystem.Items.Jailbird.JailbirdPickup"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.JailbirdPickup.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.JailbirdPickup"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.JailbirdPickup.Get(InventorySystem.Items.Jailbird.JailbirdPickup)">
            <summary>
            Gets the jailbird pickup from the <see cref="P:LabApi.Features.Wrappers.JailbirdPickup.Dictionary"/> or creates a new if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Jailbird.JailbirdPickup"/> was not <see langword="null"/>.
            </summary>
            <param name="pickup">The <see cref="P:LabApi.Features.Wrappers.JailbirdPickup.Base"/> if the pickup.</param>
            <returns>The requested pickup or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.JailbirdPickup.#ctor(InventorySystem.Items.Jailbird.JailbirdPickup)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseJailbirdPickup">The base <see cref="T:InventorySystem.Items.Jailbird.JailbirdPickup"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.JailbirdPickup.Base">
            <summary>
            The <see cref="T:InventorySystem.Items.Jailbird.JailbirdPickup"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.JailbirdPickup.TotalDamageDealt">
            <summary>
            Gets the total melee damage dealt.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.JailbirdPickup.TotalChargesPerformed">
            <summary>
            Gets the total charges performed so far.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.JailbirdPickup.WearState">
            <summary>
            Gets or sets the visual wear state.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.JailbirdPickup.OnRemove">
            <summary>
            A internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.KeycardPickup">
            <summary>
            Wrapper for the <see cref="T:InventorySystem.Items.Keycards.KeycardPickup"/> class.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.KeycardPickup.Dictionary">
            <summary>
            Contains all the cached keycard pickups, accessible through their <see cref="T:InventorySystem.Items.Keycards.KeycardPickup"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.KeycardPickup.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.KeycardPickup"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.KeycardPickup.Get(InventorySystem.Items.Keycards.KeycardPickup)">
            <summary>
            Gets the keycard pickup from the <see cref="P:LabApi.Features.Wrappers.KeycardPickup.Dictionary"/> or creates a new if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Keycards.KeycardPickup"/> was not <see langword="null"/>.
            </summary>
            <param name="pickup">The <see cref="P:LabApi.Features.Wrappers.KeycardPickup.Base"/> if the pickup.</param>
            <returns>The requested pickup or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.KeycardPickup.#ctor(InventorySystem.Items.Keycards.KeycardPickup)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseKeycardPickup">The base <see cref="T:InventorySystem.Items.Keycards.KeycardPickup"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.KeycardPickup.Base">
            <summary>
            The <see cref="T:InventorySystem.Items.Keycards.KeycardPickup"/> object.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.KeycardPickup.OnRemove">
            <summary>
            A internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.MicroHIDPickup">
            <summary>
            Wrapper for the <see cref="T:InventorySystem.Items.MicroHID.MicroHIDPickup"/> class.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MicroHIDPickup.Dictionary">
            <summary>
            Contains all the cached micro hid pickups, accessible through their <see cref="T:InventorySystem.Items.MicroHID.MicroHIDPickup"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MicroHIDPickup.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.MicroHIDPickup"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.MicroHIDPickup.Get(InventorySystem.Items.MicroHID.MicroHIDPickup)">
            <summary>
            Gets the micro hid pickup from the <see cref="P:LabApi.Features.Wrappers.MicroHIDPickup.Dictionary"/> or creates a new if it doesn't exist and the provided <see cref="T:InventorySystem.Items.MicroHID.MicroHIDPickup"/> was not <see langword="null"/>.
            </summary>
            <param name="pickup">The <see cref="P:LabApi.Features.Wrappers.MicroHIDPickup.Base"/> if the pickup.</param>
            <returns>The requested pickup or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.MicroHIDPickup.#ctor(InventorySystem.Items.MicroHID.MicroHIDPickup)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseMicroHIDPickup">The base <see cref="T:InventorySystem.Items.MicroHID.MicroHIDPickup"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.MicroHIDPickup.Base">
            <summary>
            The <see cref="T:InventorySystem.Items.MicroHID.MicroHIDPickup"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MicroHIDPickup.BaseCycleController">
            <summary>
            The base <see cref="T:InventorySystem.Items.MicroHID.Modules.CycleController"/> controller.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MicroHIDPickup.Phase">
            <summary>
            Gets or sets the current <see cref="T:InventorySystem.Items.MicroHID.Modules.MicroHidPhase"/> of the micro.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MicroHIDPickup.FiringMode">
            <summary>
            Gets or sets the last known firing mode of the micro.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MicroHIDPickup.Energy">
            <summary>
            Gets or sets the energy amount in this Micro-HID pickup.<para/>
            The energy value, automatically clamped, ranges from 0f to 1f.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MicroHIDPickup.WindUpProgress">
            <summary>
            The progress from 0 to 1 for how ready the micro is to fire.
            Goes up when winding up, and down when winding down.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.MicroHIDPickup.PhaseElapsed">
            <summary>
            Time in seconds that the current phase has been active.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.MicroHIDPickup.OnRemove">
            <summary>
            A internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Pickup">
             <summary>
             The wrapper representing <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase">item pickups</see>.
            
             <para>Not to be confused with <see cref="T:LabApi.Features.Wrappers.Item">regular items</see>.</para>
             </summary>
        </member>
        <member name="F:LabApi.Features.Wrappers.Pickup.TypeWrappers">
            <summary>
            Contains all the handlers for constructing wrappers for the associated base game types.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Pickup.SerialCache">
            <summary>
            Contains all the cached items that have a none zero serial, accessible through their serial.
            </summary>
            <remarks>
            Item pickups spawned by the map do not have a serial until they are unlocked so may not be cached here.
            Use <see cref="P:LabApi.Features.Wrappers.Pickup.Dictionary"/> or <see cref="P:LabApi.Features.Wrappers.Pickup.List"/> instead if you need all item pickups.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Pickup.Dictionary">
            <summary>
            Contains all the cached item pickups, accessible through their <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Pickup.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.Pickup"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Pickup.Get(InventorySystem.Items.Pickups.ItemPickupBase)">
            <summary>
            Gets the pickup wrapper from the <see cref="P:LabApi.Features.Wrappers.Pickup.Dictionary"/> or creates a new one if it doesn't exist.
            </summary>
            <param name="itemPickupBase">The <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/> of the pickup.</param>
            <returns>The requested item <see cref="T:LabApi.Features.Wrappers.Pickup"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Pickup.Get(System.UInt16)">
            <summary>
            Gets the pickup wrapper from the <see cref="P:LabApi.Features.Wrappers.Pickup.SerialCache"/>.
            </summary>
            <param name="itemSerial">The serial of the pickup.</param>
            <returns>The requested item <see cref="T:LabApi.Features.Wrappers.Pickup"/> or null if it doesn't exist.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Pickup.TryGet(System.UInt16,LabApi.Features.Wrappers.Pickup@)">
            <summary>
            Tries to get the pickup wrapper from the <see cref="P:LabApi.Features.Wrappers.Pickup.SerialCache"/>.
            </summary>
            <param name="itemSerial">The serial of the pickup.</param>
            <param name="pickup">The requested item <see cref="T:LabApi.Features.Wrappers.Pickup"/> or null if it doesn't exist.</param>
            <returns>True of the pickup exists, otherwise false.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Pickup.Create(ItemType,UnityEngine.Vector3)">
            <summary>
            Creates a new <see cref="T:LabApi.Features.Wrappers.Pickup"/>.
            </summary>
            <param name="type">The <see cref="T:ItemType"/>.</param>
            <param name="position">The initial position.</param>
            <returns>The instantiated <see cref="T:LabApi.Features.Wrappers.Pickup"/>.</returns>
            <remarks>The pickup is only spawned on the server, to spawn the pickup for clients use <see cref="M:LabApi.Features.Wrappers.Pickup.Spawn"/>.</remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.Pickup.Create(ItemType,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Creates a new <see cref="T:LabApi.Features.Wrappers.Pickup"/>.
            </summary>
            <param name="type">The <see cref="T:ItemType"/>.</param>
            <param name="position">The initial position.</param>
            <param name="rotation">The initial rotation.</param>
            <returns>The instantiated <see cref="T:LabApi.Features.Wrappers.Pickup"/>.</returns>
            <remarks>The pickup is only spawned on the server, to spawn the pickup for clients use <see cref="M:LabApi.Features.Wrappers.Pickup.Spawn"/>.</remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.Pickup.Create(ItemType,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
            <summary>
            Creates a new <see cref="T:LabApi.Features.Wrappers.Pickup"/>.
            </summary>
            <param name="type">The <see cref="T:ItemType"/>.</param>
            <param name="position">The initial position.</param>
            <param name="rotation">The initial rotation.</param>
            <param name="scale">The initial scale.</param>
            <returns>The instantiated <see cref="T:LabApi.Features.Wrappers.Pickup"/>.</returns>
            <remarks>The pickup is only spawned on the server, to spawn the pickup for clients use <see cref="M:LabApi.Features.Wrappers.Pickup.Spawn"/>.</remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.Pickup.Initialize">
            <summary>
            Initializes the <see cref="T:LabApi.Features.Wrappers.Pickup"/> class.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Pickup.CreateItemWrapper(InventorySystem.Items.Pickups.ItemPickupBase)">
            <summary>
            Creates a new wrapper from the base pickup object.
            </summary>
            <param name="pickupBase">The base object.</param>
            <returns>The newly created wrapper.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Pickup.AddPickup(InventorySystem.Items.Pickups.ItemPickupBase)">
            <summary>
            A private method to handle the creation of new pickups in the server.
            </summary>
            <param name="pickup">The created <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/> instance.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Pickup.RemovePickup(InventorySystem.Items.Pickups.ItemPickupBase)">
            <summary>
            A private method to handle the removal of pickups from the server.
            </summary>
            <param name="pickup">The to be destroyed <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/> instance.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Pickup.Register``1(System.Func{``0,LabApi.Features.Wrappers.Pickup})">
            <summary>
            A private method to handle the addition of wrapper handlers.
            </summary>
            <typeparam name="T">The derived base game type to handle.</typeparam>
            <param name="constructor">A handler to construct the wrapper with the base game instance.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Pickup.#ctor(InventorySystem.Items.Pickups.ItemPickupBase)">
            <summary>
            A protected constructor to prevent external instantiation.
            </summary>
            <param name="itemPickupBase">The <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/> of the pickup.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Pickup.Base">
            <summary>
            The <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/> of the pickup.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Pickup.NetworkIdentity">
            <summary>
            The <see cref="T:Mirror.NetworkIdentity"/> of the pickup.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Pickup.PickupStandardPhysics">
            <summary>
            THe <see cref="P:LabApi.Features.Wrappers.Pickup.PickupStandardPhysics"/> of the pickup.
            </summary>
            <remarks>
            Will be null if the <see cref="T:InventorySystem.Items.Pickups.PickupPhysicsModule"/> is not a <see cref="T:InventorySystem.Items.Pickups.PickupStandardPhysics"/> e.g. when SCP018 it is in its "Activated" state and uses an alternate physics module.
            Use <see cref="P:LabApi.Features.Wrappers.Pickup.PhysicsModule"/> instead for those cases.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Pickup.PhysicsModule">
            <summary>
            Gets the pickup's <see cref="T:InventorySystem.Items.Pickups.PickupPhysicsModule"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Pickup.Rigidbody">
            <summary>
            Gets the pickup's <see cref="T:UnityEngine.Rigidbody"/>.
            </summary>
            <remarks>
            Null if <see cref="P:LabApi.Features.Wrappers.Pickup.PickupStandardPhysics"/> is null.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Pickup.Transform">
            <summary>
            Gets the pickup's <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Pickup.GameObject">
            <summary>
            Gets the pickup's <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Pickup.IsDestroyed">
            <summary>
            Gets whether the pickup was destroyed.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Pickup.IsPrefab">
            <summary>
            Gets whether or not this instance is used as a prefab.
            </summary>
            <remarks>
            Changes made to the prefab instance will be reflected across all subsequent new instances.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Pickup.IsSpawned">
            <summary>
            Gets whether the pickup is spawned on the client.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Pickup.Type">
            <summary>
            Gets the pickup's <see cref="T:ItemType"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Pickup.LastOwner">
            <summary>
            Gets the pickup's previous owner <see cref="T:LabApi.Features.Wrappers.Player"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Pickup.Serial">
            <summary>
            Gets the pickup's serial.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Pickup.Weight">
            <summary>
            Gets or sets the pickup's weight.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Pickup.IsLocked">
            <summary>
            Gets or sets whether or not the pickup is locked.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Pickup.IsInUse">
            <summary>
            Gets or sets whether or not the pickup is in use.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Pickup.Position">
            <summary>
            Gets or sets the pickup's position.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Pickup.Rotation">
            <summary>
            Gets or sets the pickup's rotation.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Pickup.Category">
            <summary>
            Gets the pickup's <see cref="T:ItemCategory"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Pickup.Tier">
            <summary>
            Gets the pickup's <see cref="T:ItemTierFlags"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Pickup.Room">
            <summary>
            Gets the <see cref="T:LabApi.Features.Wrappers.Room"/> at the pickup's current position.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Pickup.CanCache">
            <summary>
            Gets whether the item wrapper is allowed to be cached.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Pickup.Spawn">
            <summary>
            Spawns the pickup.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Pickup.Destroy">
            <summary>
            Destroys the pickup.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Pickup.ToString">
            <inheritdoc />
        </member>
        <member name="M:LabApi.Features.Wrappers.Pickup.OnRemove">
            <summary>
            An internal virtual method to signal to derived implementations to uncache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.ExplosiveGrenadeProjectile">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.ThrowableProjectiles.ExplosionGrenade">HE grenade</see>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ExplosiveGrenadeProjectile.Dictionary">
            <summary>
            Contains all the cached item pickups, accessible through their <see cref="T:InventorySystem.Items.ThrowableProjectiles.TimeGrenade"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ExplosiveGrenadeProjectile.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.ExplosiveGrenadeProjectile"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.ExplosiveGrenadeProjectile.Get(InventorySystem.Items.ThrowableProjectiles.ExplosionGrenade)">
            <summary>
            Gets the explosion grenade from the <see cref="P:LabApi.Features.Wrappers.ExplosiveGrenadeProjectile.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.ThrowableProjectiles.ExplosionGrenade"/> was not <see langword="null"/>.
            </summary>
            <param name="projectile">The <see cref="P:LabApi.Features.Wrappers.ExplosiveGrenadeProjectile.Base"/> of the projectile.</param>
            <returns>The requested projectile or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.ExplosiveGrenadeProjectile.#ctor(InventorySystem.Items.ThrowableProjectiles.ExplosionGrenade)">
            <summary>
            A protected constructor to prevent external instantiation.
            </summary>
            <param name="projectilePickup">The <see cref="T:InventorySystem.Items.ThrowableProjectiles.ExplosionGrenade"/> of the pickup.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.ExplosiveGrenadeProjectile.Base">
            <summary>
            The <see cref="T:InventorySystem.Items.ThrowableProjectiles.ExplosionGrenade"/> of the pickup.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ExplosiveGrenadeProjectile.DetectionMask">
            <summary>
            Gets or sets the <see cref="T:UnityEngine.LayerMask"/> this grenade will detect collisions on during explosion.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ExplosiveGrenadeProjectile.MaxRadius">
            <summary>
            Gets or sets the maximum range this grenade will detect collisions during explosion.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ExplosiveGrenadeProjectile.ScpDamageMultiplier">
            <summary>
            Gets or sets the damage multiplier for SCPs.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.ExplosiveGrenadeProjectile.OnRemove">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Features.Wrappers.FlashbangProjectile">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.ThrowableProjectiles.FlashbangGrenade">flashbang</see>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FlashbangProjectile.Dictionary">
            <summary>
            Contains all the cached item pickups, accessible through their <see cref="T:InventorySystem.Items.ThrowableProjectiles.FlashbangGrenade"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FlashbangProjectile.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.ExplosiveGrenadeProjectile"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.FlashbangProjectile.Get(InventorySystem.Items.ThrowableProjectiles.FlashbangGrenade)">
            <summary>
            Gets the flashbang from the <see cref="P:LabApi.Features.Wrappers.FlashbangProjectile.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.ThrowableProjectiles.FlashbangGrenade"/> was not <see langword="null"/>.
            </summary>
            <param name="projectile">The <see cref="P:LabApi.Features.Wrappers.FlashbangProjectile.Base"/> of the projectile.</param>
            <returns>The requested projectile or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.FlashbangProjectile.#ctor(InventorySystem.Items.ThrowableProjectiles.FlashbangGrenade)">
            <summary>
            A protected constructor to prevent external instantiation.
            </summary>
            <param name="projectilePickup">The <see cref="T:InventorySystem.Items.ThrowableProjectiles.FlashbangGrenade"/> of the pickup.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.FlashbangProjectile.Base">
            <summary>
            The <see cref="T:InventorySystem.Items.ThrowableProjectiles.FlashbangGrenade"/> of the pickup.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FlashbangProjectile.BlockingMask">
            <summary>
            Gets or sets the mask used to block linecast from the flashbang to the <see cref="T:LabApi.Features.Wrappers.Player"/> to determine whether the <see cref="T:LabApi.Features.Wrappers.Player"/> should be affected.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.FlashbangProjectile.BaseBlindTime">
            <summary>
            Gets or sets the base blind time to affect people with.
            <para>Note that this value is affected by distance from the grenade as well as whether the player is looking at it and if it is on surface.</para>
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.FlashbangProjectile.OnRemove">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Features.Wrappers.Scp018Projectile">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.ThrowableProjectiles.Scp018Projectile">SCP-018</see>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp018Projectile.Dictionary">
            <summary>
            Contains all the cached item pickups, accessible through their <see cref="T:InventorySystem.Items.ThrowableProjectiles.Scp018Projectile"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp018Projectile.List">
            <summary>
            A reference to all instances of <see cref="T:InventorySystem.Items.ThrowableProjectiles.Scp018Projectile"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp018Projectile.Get(InventorySystem.Items.ThrowableProjectiles.Scp018Projectile)">
            <summary>
            Gets the Scp-018 from the <see cref="P:LabApi.Features.Wrappers.Scp018Projectile.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.ThrowableProjectiles.Scp018Projectile"/> was not <see langword="null"/>.
            </summary>
            <param name="projectile">The <see cref="P:LabApi.Features.Wrappers.Scp018Projectile.Base"/> of the projectile.</param>
            <returns>The requested projectile or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp018Projectile.#ctor(InventorySystem.Items.ThrowableProjectiles.Scp018Projectile)">
            <summary>
            A protected constructor to prevent external instantiation.
            </summary>
            <param name="projectilePickup">The <see cref="T:InventorySystem.Items.ThrowableProjectiles.Scp018Projectile"/> of the pickup.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp018Projectile.Base">
            <summary>
            The <see cref="T:InventorySystem.Items.ThrowableProjectiles.Scp018Projectile"/> of the pickup.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp018Projectile.PhysicsModule">
            <summary>
            Gets the physics module for this ball.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp018Projectile.CurrentDamage">
            <summary>
            Gets the damage applied to player on hit.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp018Projectile.Velocity">
            <summary>
            Gets or sets the velocity of SCP-018.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp018Projectile.PlayBounceSound(System.Single)">
            <summary>
            Plays the bounce sound. Defaults to <see cref="P:LabApi.Features.Wrappers.Scp018Projectile.Velocity"/> if value is below 0.
            <para>
            Intensities:<br/>
            4-150 Low<br/>
            150-400 Medium<br/>
            400+ High.
            </para>
            </summary>
            <param name="velSqrt">Velocity to play the sound for.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp018Projectile.OnRemove">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Features.Wrappers.Scp2176Projectile">
            <summary>
            The wrapper representing <see cref="T:LabApi.Features.Wrappers.Scp2176Projectile">SCP-2176</see>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp2176Projectile.Dictionary">
            <summary>
            Contains all the cached item pickups, accessible through their <see cref="T:InventorySystem.Items.ThrowableProjectiles.Scp2176Projectile"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp2176Projectile.List">
            <summary>
            A reference to all instances of <see cref="T:InventorySystem.Items.ThrowableProjectiles.Scp2176Projectile"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp2176Projectile.Get(InventorySystem.Items.ThrowableProjectiles.Scp2176Projectile)">
            <summary>
            Gets the Scp-2176 from the <see cref="P:LabApi.Features.Wrappers.Scp2176Projectile.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.ThrowableProjectiles.Scp2176Projectile"/> was not <see langword="null"/>.
            </summary>
            <param name="projectile">The <see cref="P:LabApi.Features.Wrappers.Scp2176Projectile.Base"/> of the projectile.</param>
            <returns>The requested projectile or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp2176Projectile.#ctor(InventorySystem.Items.ThrowableProjectiles.Scp2176Projectile)">
            <summary>
            A protected constructor to prevent external instantiation.
            </summary>
            <param name="projectilePickup">The <see cref="T:InventorySystem.Items.ThrowableProjectiles.Scp2176Projectile"/> of the pickup.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp2176Projectile.Base">
            <summary>
            The <see cref="T:InventorySystem.Items.ThrowableProjectiles.Scp2176Projectile"/> of the pickup.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp2176Projectile.LockdownDuration">
            <summary>
            Gets or sets the lockdown duration in seconds that is applied to the room once this SCP shatters.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp2176Projectile.PlaySound">
            <summary>
            Plays the shattering sound without shattering the SCP itself. Very spooky indeed.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp2176Projectile.FuseEnd">
            <inheritdoc/>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp2176Projectile.OnRemove">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Features.Wrappers.TimedGrenadeProjectile">
            <summary>
            The wrapper representing <see cref="T:InventorySystem.Items.ThrowableProjectiles.TimeGrenade">time grenade</see>.
            This includes HE grenade, Flashbang, SCP-018 and SCP-2176.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.TimedGrenadeProjectile.Dictionary">
            <summary>
            Contains all the cached item pickups, accessible through their <see cref="T:InventorySystem.Items.ThrowableProjectiles.TimeGrenade"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.TimedGrenadeProjectile.List">
            <summary>
            A reference to all instances of <see cref="T:InventorySystem.Items.ThrowableProjectiles.TimeGrenade"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.TimedGrenadeProjectile.Get(InventorySystem.Items.ThrowableProjectiles.TimeGrenade)">
            <summary>
            Gets the timed grenade from the <see cref="P:LabApi.Features.Wrappers.TimedGrenadeProjectile.Dictionary"/> or creates a new one if it doesn't exist and the provided <see cref="T:InventorySystem.Items.ThrowableProjectiles.TimeGrenade"/> was not <see langword="null"/>.
            </summary>
            <param name="projectile">The <see cref="P:LabApi.Features.Wrappers.TimedGrenadeProjectile.Base"/> of the projectile.</param>
            <returns>The requested projectile or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.TimedGrenadeProjectile.PlayEffect(UnityEngine.Vector3,ItemType)">
            <summary>
            Spawns a explosion particles and effect on specified location.<br/>
            Valid for <see cref="F:ItemType.GrenadeHE"/>, <see cref="F:ItemType.GrenadeFlash"/> and <see cref="F:ItemType.SCP2176"/>. Doesn't do anything for any other input.
            </summary>
            <param name="position">Target world position to play the effect on.</param>
            <param name="type">The type of the effect.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.TimedGrenadeProjectile.SpawnActive(UnityEngine.Vector3,ItemType,LabApi.Features.Wrappers.Player,System.Double)">
            <summary>
            Spawns a active timed grenade with specified parameters.
            </summary>
            <param name="pos">The position to spawn the grenade on.</param>
            <param name="type">Type of the grenade.</param>
            <param name="owner">The player owner of the grenade.</param>
            <param name="timeOverride">Time override until detonation.</param>
            <returns>An active projectile.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.TimedGrenadeProjectile.#ctor(InventorySystem.Items.ThrowableProjectiles.TimeGrenade)">
            <summary>
            A protected constructor to prevent external instantiation.
            </summary>
            <param name="projectilePickup">The <see cref="T:InventorySystem.Items.ThrowableProjectiles.TimeGrenade"/> of the pickup.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.TimedGrenadeProjectile.Base">
            <summary>
            The <see cref="T:InventorySystem.Items.ThrowableProjectiles.TimeGrenade"/> of the pickup.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.TimedGrenadeProjectile.RemainingTime">
            <summary>
            Gets or sets the remaining time until detonation in seconds.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.TimedGrenadeProjectile.FuseEnd">
            <summary>
            Ends the fuse of this grenade, causing instant detonation.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.TimedGrenadeProjectile.OnRemove">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Features.Wrappers.Projectile">
             <summary>
             The wrapper representing <see cref="T:InventorySystem.Items.ThrowableProjectiles.ThrownProjectile">thrown projectile</see>.
            
             <para>Note that both pickups and physical projectiles share the same base class so they share the same base properties.</para>
             </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Projectile.Dictionary">
            <summary>
            Contains all the cached projectiles, accessible through their <see cref="T:InventorySystem.Items.ThrowableProjectiles.ThrownProjectile"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Projectile.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.Projectile"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Projectile.Get(InventorySystem.Items.ThrowableProjectiles.ThrownProjectile)">
            <summary>
            Gets the projectile wrapper from the <see cref="P:LabApi.Features.Wrappers.Projectile.Dictionary"/> or creates a new if it doesn't exist and the provided <see cref="T:InventorySystem.Items.ThrowableProjectiles.ThrownProjectile"/> was not <see langword="null"/>.
            </summary>
            <param name="projectile">The <see cref="P:LabApi.Features.Wrappers.Projectile.Base"/> if the projectile.</param>
            <returns>The requested wrapper or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Projectile.#ctor(InventorySystem.Items.ThrowableProjectiles.ThrownProjectile)">
            <summary>
            A protected constructor to prevent external instantiation.
            </summary>
            <param name="projectilePickup">The <see cref="T:InventorySystem.Items.ThrowableProjectiles.ThrownProjectile"/> of the pickup.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Projectile.Base">
            <summary>
            The <see cref="T:InventorySystem.Items.ThrowableProjectiles.ThrownProjectile"/> of the pickup.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Projectile.OnRemove">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Features.Wrappers.RadioPickup">
            <summary>
            Wrapper for the <see cref="T:InventorySystem.Items.Radio.RadioPickup"/> class.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RadioPickup.Dictionary">
            <summary>
            Contains all the cached radio pickups, accessible through their <see cref="T:InventorySystem.Items.Radio.RadioPickup"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RadioPickup.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.RadioPickup"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.RadioPickup.Get(InventorySystem.Items.Radio.RadioPickup)">
            <summary>
            Gets the radio pickup from the <see cref="P:LabApi.Features.Wrappers.RadioPickup.Dictionary"/> or creates a new if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Radio.RadioPickup"/> was not <see langword="null"/>.
            </summary>
            <param name="pickup">The <see cref="P:LabApi.Features.Wrappers.RadioPickup.Base"/> if the pickup.</param>
            <returns>The requested pickup or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.RadioPickup.#ctor(InventorySystem.Items.Radio.RadioPickup)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseRadioPickup">The base <see cref="T:InventorySystem.Items.Radio.RadioPickup"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.RadioPickup.Base">
            <summary>
            The <see cref="T:InventorySystem.Items.Radio.RadioPickup"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RadioPickup.IsEnabled">
            <summary>
            Gets or sets whether the radio is on.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RadioPickup.RangeLevel">
            <summary>
            Gets or set the <see cref="T:InventorySystem.Items.Radio.RadioMessages.RadioRangeLevel"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.RadioPickup.Battery">
            <summary>
            Gets or sets the battery percentage from 0.0 to 1.0.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.RadioPickup.OnRemove">
            <summary>
            A internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Scp1576Pickup">
            <summary>
            Wrapper for the <see cref="T:InventorySystem.Items.Usables.Scp1576.Scp1576Pickup"/> class.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp1576Pickup.Dictionary">
            <summary>
            Contains all the cached SCP-1576 pickups, accessible through their <see cref="T:InventorySystem.Items.Usables.Scp1576.Scp1576Pickup"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp1576Pickup.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.Scp1576Pickup"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp1576Pickup.Get(InventorySystem.Items.Usables.Scp1576.Scp1576Pickup)">
            <summary>
            Gets the SCP-1576 pickup from the <see cref="P:LabApi.Features.Wrappers.Scp1576Pickup.Dictionary"/> or creates a new if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Usables.Scp1576.Scp1576Pickup"/> was not <see langword="null"/>.
            </summary>
            <param name="pickup">The <see cref="P:LabApi.Features.Wrappers.Scp1576Pickup.Base"/> if the pickup.</param>
            <returns>The requested pickup or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp1576Pickup.#ctor(InventorySystem.Items.Usables.Scp1576.Scp1576Pickup)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseScp1576Pickup">The base <see cref="T:InventorySystem.Items.Usables.Scp1576.Scp1576Pickup"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp1576Pickup.Base">
            <summary>
            The <see cref="T:InventorySystem.Items.Usables.Scp1576.Scp1576Pickup"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp1576Pickup.HornPosition">
            <summary>
            Gets or set the horn position from 0.0 to 1.0.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp1576Pickup.OnRemove">
            <summary>
            A internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Scp244Pickup">
            <summary>
            Wrapper for the <see cref="T:InventorySystem.Items.Usables.Scp244.Scp244DeployablePickup"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp244Pickup.Dictionary">
            <summary>
            Contains all the cached SCP-244 pickups, accessible through their <see cref="T:InventorySystem.Items.Usables.Scp244.Scp244DeployablePickup"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp244Pickup.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.Scp244Pickup"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp244Pickup.Get(InventorySystem.Items.Usables.Scp244.Scp244DeployablePickup)">
            <summary>
            Gets the SCP-244 pickup from the <see cref="P:LabApi.Features.Wrappers.Scp244Pickup.Dictionary"/> or creates a new if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Usables.Scp244.Scp244DeployablePickup"/> was not <see langword="null"/>.
            </summary>
            <param name="pickup">The <see cref="P:LabApi.Features.Wrappers.Scp244Pickup.Base"/> if the pickup.</param>
            <returns>The requested pickup or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp244Pickup.#ctor(InventorySystem.Items.Usables.Scp244.Scp244DeployablePickup)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="scp244DeployablePickup">The base <see cref="T:InventorySystem.Items.Usables.Scp244.Scp244DeployablePickup"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp244Pickup.Base">
            <summary>
            The <see cref="T:InventorySystem.Items.Usables.Scp244.Scp244DeployablePickup"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp244Pickup.State">
            <summary>
            Gets or sets the <see cref="T:InventorySystem.Items.Usables.Scp244.Scp244State"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp244Pickup.SizePercent">
            <summary>
            Gets the size of the SCP-244 cloud.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp244Pickup.OnRemove">
            <summary>
            A internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Scp330Pickup">
            <summary>
            Wrapper for the <see cref="T:InventorySystem.Items.Usables.Scp330.Scp330Pickup"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp330Pickup.Dictionary">
            <summary>
            Contains all the cached SCP-330 pickups, accessible through their <see cref="T:InventorySystem.Items.Usables.Scp330.Scp330Pickup"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp330Pickup.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.Scp330Pickup"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp330Pickup.Get(InventorySystem.Items.Usables.Scp330.Scp330Pickup)">
            <summary>
            Gets the SCP-330 pickup from the <see cref="P:LabApi.Features.Wrappers.Scp330Pickup.Dictionary"/> or creates a new if it doesn't exist and the provided <see cref="T:InventorySystem.Items.Usables.Scp330.Scp330Pickup"/> was not <see langword="null"/>.
            </summary>
            <param name="pickup">The <see cref="P:LabApi.Features.Wrappers.Scp330Pickup.Base"/> if the pickup.</param>
            <returns>The requested pickup or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp330Pickup.#ctor(InventorySystem.Items.Usables.Scp330.Scp330Pickup)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseScp330Pickup">The base <see cref="T:InventorySystem.Items.Usables.Scp330.Scp330Pickup"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp330Pickup.Base">
            <summary>
            The <see cref="T:InventorySystem.Items.Usables.Scp330.Scp330Pickup"/> object.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp330Pickup.Candies">
            <summary>
            The list of candies stored in the bag.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Scp330Pickup.ExposedCandy">
            <summary>
            Gets or sets the visual candy model used.
            Typically only used if theres one candy stored in <see cref="P:LabApi.Features.Wrappers.Scp330Pickup.Candies"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Scp330Pickup.OnRemove">
            <summary>
            A internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.TimedGrenadePickup">
            <summary>
            Wrapper for the <see cref="T:InventorySystem.Items.ThrowableProjectiles.TimedGrenadePickup"/> class.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.TimedGrenadePickup.Dictionary">
            <summary>
            Contains all the cached timed grenade pickups, accessible through their <see cref="T:InventorySystem.Items.ThrowableProjectiles.TimedGrenadePickup"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.TimedGrenadePickup.List">
            <summary>
            A reference to all instances of <see cref="T:LabApi.Features.Wrappers.TimedGrenadePickup"/>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.TimedGrenadePickup.Get(InventorySystem.Items.ThrowableProjectiles.TimedGrenadePickup)">
            <summary>
            Gets the timed grenade pickup from the <see cref="P:LabApi.Features.Wrappers.TimedGrenadePickup.Dictionary"/> or creates a new if it doesn't exist and the provided <see cref="T:InventorySystem.Items.ThrowableProjectiles.TimedGrenadePickup"/> was not <see langword="null"/>.
            </summary>
            <param name="pickup">The <see cref="P:LabApi.Features.Wrappers.TimedGrenadePickup.Base"/> if the pickup.</param>
            <returns>The requested pickup or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.TimedGrenadePickup.#ctor(InventorySystem.Items.ThrowableProjectiles.TimedGrenadePickup)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="baseTimedGrenadePickup">The base <see cref="T:InventorySystem.Items.ThrowableProjectiles.TimedGrenadePickup"/> object.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.TimedGrenadePickup.Base">
            <summary>
            The <see cref="T:InventorySystem.Items.ThrowableProjectiles.TimedGrenadePickup"/> object.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.TimedGrenadePickup.OnRemove">
            <summary>
            A internal method to remove itself from the cache when the base object is destroyed.
            </summary>
        </member>
        <member name="T:LabApi.Features.Wrappers.Player">
            <summary>
            The wrapper representing <see cref="P:LabApi.Features.Wrappers.Player.ReferenceHub">reference hubs</see>, the in-game players.
            </summary>
        </member>
        <member name="F:LabApi.Features.Wrappers.Player.UserIdCache">
            <summary>
            A cache of players by their User ID. Does not necessarily contain all players.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.Dictionary">
            <summary>
            Contains all the cached players in the game, accessible through their <see cref="P:LabApi.Features.Wrappers.Player.ReferenceHub"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.Player"/> instances currently in the game.
            </summary>
            <remarks>
            This list includes the host player, NPCs and unauthenticated players.
            <para>
            Unauthenticated players you must be especially careful with as interacting with them incorrectly will cause them to softlock while joining the game.
            Use <see cref="P:LabApi.Features.Wrappers.Player.ReadyList"/> to get connected players that you can send network messages to.
            </para>
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.ReadyList">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.Player"/> instances that are authenticated or dummy players.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.NpcList">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.Player"/> instances that are NPCs.
            </summary>
            <remarks>
            The host player is not counted as an NPC.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.UnauthenticatedList">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.Player"/> instance that are real players but are not authenticated yet.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.DummyList">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.Player"/> instances that are dummy NPCs.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.RegularNpcList">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.Player"/> instance that are NPCs but are not dummies.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.Host">
            <summary>
            The <see cref="T:LabApi.Features.Wrappers.Player"/> representing the host or server.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.Count">
            <summary>
            Gets the amount of ready players or dummies.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.NonVerifiedCount">
            <summary>
            Gets the amount of non-verified players.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.ConnectionsCount">
            <summary>
            Gets the amount of connected players. Regardless of their authentication status.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.ValidateCustomInfo(System.String,System.String@)">
            <summary>
            Validates the custom info text and returns result whether it is valid or invalid.<br/>
            Current validation requirements are the following:
            <br/>
            <list type="bullet">
            <item>Match the <see cref="F:Misc.PlayerCustomInfoRegex"/> regex.</item>
            <item>Use only color,i,b and size rich text tags.</item>
            <item>Colors used have to be from <see cref="F:Misc.AcceptedColours"/></item>
            </list>
            <br/>
            </summary>
            <param name="text">The text to check on.</param>
            <param name="rejectionReason">Out parameter containing rejection reason.</param>
            <returns>Whether is the info parameter valid.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.GetAll(LabApi.Features.Enums.PlayerSearchFlags)">
            <summary>
            Gets a all players matching the criteria specified by the <see cref="T:LabApi.Features.Enums.PlayerSearchFlags"/>.
            </summary>
            <param name="flags">The <see cref="T:LabApi.Features.Enums.PlayerSearchFlags"/> of the players to include.</param>
            <returns>The set of players that match the criteria.</returns>
            <remarks>
            By default this returns the same set of players as <see cref="P:LabApi.Features.Wrappers.Player.ReadyList"/>.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.Get(ReferenceHub)">
            <summary>
            Gets the player wrapper from the <see cref="P:LabApi.Features.Wrappers.Player.Dictionary"/>, or creates a new one if it doesn't exist.
            </summary>
            <param name="referenceHub">The reference hub of the player.</param>
            <returns>The requested player or null if the reference hub is null.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.Get(System.Collections.Generic.IEnumerable{ReferenceHub})">
            <summary>
            Gets a list of players from a list of reference hubs.
            </summary>
            <param name="referenceHubs">The reference hubs of the players.</param>
            <returns>A list of players.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.GetNonAlloc(System.Collections.Generic.IEnumerable{ReferenceHub},System.Collections.Generic.List{LabApi.Features.Wrappers.Player})">
            <summary>
            Gets a list of players from a list of reference hubs without allocating a new list.
            </summary>
            <param name="referenceHubs">The reference hubs of the players.</param>
            <param name="list">A reference to the list to add the players to.</param>
            <returns>The <paramref name="list"/> passed in.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.Get(UnityEngine.GameObject)">
            <summary>
            Gets the <see cref="T:LabApi.Features.Wrappers.Player"/> associated with the <see cref="P:LabApi.Features.Wrappers.Player.GameObject"/>.
            </summary>
            <param name="gameObject">The <see cref="T:UnityEngine.GameObject"/> to get the player from.</param>
            <returns>The <see cref="T:LabApi.Features.Wrappers.Player"/> associated with the <see cref="P:LabApi.Features.Wrappers.Player.GameObject"/> or null if it doesn't exist.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.TryGet(UnityEngine.GameObject,LabApi.Features.Wrappers.Player@)">
            <summary>
            Tries to get the <see cref="T:LabApi.Features.Wrappers.Player"/> associated with the <see cref="P:LabApi.Features.Wrappers.Player.GameObject"/>.
            </summary>
            <param name="gameObject">The <see cref="T:UnityEngine.GameObject"/> to get the player from.</param>
            <param name="player">The <see cref="T:LabApi.Features.Wrappers.Player"/> associated with the <see cref="T:UnityEngine.GameObject"/> or null if it doesn't exist.</param>
            <returns>Whether the player was successfully retrieved.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.Get(Mirror.NetworkIdentity)">
            <summary>
            Gets the <see cref="T:LabApi.Features.Wrappers.Player"/> associated with the <see cref="T:Mirror.NetworkIdentity"/>.
            </summary>
            <param name="identity">The <see cref="T:Mirror.NetworkIdentity"/> to get the player from.</param>
            <returns>The <see cref="T:LabApi.Features.Wrappers.Player"/> associated with the <see cref="T:Mirror.NetworkIdentity"/> or null if it doesn't exist.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.TryGet(Mirror.NetworkIdentity,LabApi.Features.Wrappers.Player@)">
            <summary>
            Tries to get the <see cref="T:LabApi.Features.Wrappers.Player"/> associated with the <see cref="T:Mirror.NetworkIdentity"/>.
            </summary>
            <param name="identity">The <see cref="T:Mirror.NetworkIdentity"/> to get the player from.</param>
            <param name="player">The <see cref="T:LabApi.Features.Wrappers.Player"/> associated with the <see cref="T:Mirror.NetworkIdentity"/> or null if it doesn't exist.</param>
            <returns>Whether the player was successfully retrieved.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.Get(System.UInt32)">
            <summary>
            Gets the <see cref="T:LabApi.Features.Wrappers.Player"/> associated with the <see cref="P:Mirror.NetworkIdentity.netId"/>.
            </summary>
            <param name="netId">The <see cref="P:Mirror.NetworkIdentity.netId"/> to get the player from.</param>
            <returns>The <see cref="T:LabApi.Features.Wrappers.Player"/> associated with the <see cref="P:Mirror.NetworkIdentity.netId"/> or null if it doesn't exist.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.TryGet(System.UInt32,LabApi.Features.Wrappers.Player@)">
            <summary>
            Tries to get the <see cref="T:LabApi.Features.Wrappers.Player"/> associated with the <see cref="P:Mirror.NetworkIdentity.netId"/>.
            </summary>
            <param name="netId">The <see cref="P:Mirror.NetworkIdentity.netId"/> to get the player from.</param>
            <param name="player">The <see cref="T:LabApi.Features.Wrappers.Player"/> associated with the <see cref="P:Mirror.NetworkIdentity.netId"/> or null if it doesn't exist.</param>
            <returns>Whether the player was successfully retrieved.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.Get(CommandSystem.ICommandSender)">
            <summary>
            Gets the <see cref="T:LabApi.Features.Wrappers.Player"/> associated with the <see cref="T:CommandSystem.ICommandSender"/>.
            </summary>
            <param name="sender">The <see cref="T:CommandSystem.ICommandSender"/> to get the player from.</param>
            <returns>The <see cref="T:LabApi.Features.Wrappers.Player"/> associated with the <see cref="T:CommandSystem.ICommandSender"/> or null if it doesn't exist.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.TryGet(CommandSystem.ICommandSender,LabApi.Features.Wrappers.Player@)">
            <summary>
            Tries to get the <see cref="T:LabApi.Features.Wrappers.Player"/> associated with the <see cref="T:CommandSystem.ICommandSender"/>.
            </summary>
            <param name="sender">The <see cref="T:CommandSystem.ICommandSender"/> to get the player from.</param>
            <param name="player">The <see cref="T:LabApi.Features.Wrappers.Player"/> associated with the <see cref="T:CommandSystem.ICommandSender"/> or null if it doesn't exist.</param>
            <returns>Whether the player was successfully retrieved.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.Get(System.String)">
            <summary>
            Gets the <see cref="T:LabApi.Features.Wrappers.Player"/> associated with the <paramref name="userId"/>.
            </summary>
            <param name="userId">The User ID of the player.</param>
            <returns>The <see cref="T:LabApi.Features.Wrappers.Player"/> associated with the <paramref name="userId"/> or null if it doesn't exist.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.TryGet(System.String,LabApi.Features.Wrappers.Player@)">
            <summary>
            Tries to get the <see cref="T:LabApi.Features.Wrappers.Player"/> associated with the <paramref name="userId"/>.
            </summary>
            <param name="userId">The user ID of the player.</param>
            <param name="player">The <see cref="T:LabApi.Features.Wrappers.Player"/> associated with the <paramref name="userId"/> or null if it doesn't exist.</param>
            <returns>Whether the player was successfully retrieved.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.Get(System.Int32)">
            <summary>
            Gets the <see cref="T:LabApi.Features.Wrappers.Player" /> associated with the <paramref name="playerId" />.
            </summary>
            <param name="playerId">The player ID of the player.</param>
            <returns>The <see cref="T:LabApi.Features.Wrappers.Player" /> associated with the <paramref name="playerId" /> or null if it doesn't exist.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.TryGet(System.Int32,LabApi.Features.Wrappers.Player@)">
            <summary>
            Tries to get the <see cref="T:LabApi.Features.Wrappers.Player" /> associated with the <paramref name="playerId" />.
            </summary>
            <param name="playerId">The player ID of the player.</param>
            <param name="player">The <see cref="T:LabApi.Features.Wrappers.Player" /> associated with the <paramref name="playerId" /> or null if it doesn't exist.</param>
            <returns>Whether the player was successfully retrieved.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.GetByDisplayName(System.String,System.Boolean)">
            <summary>
            Get closest player by lexicographical order.
            Players are compared by their <see cref="P:LabApi.Features.Wrappers.Player.DisplayName"/>.
            </summary>
            <param name="input">The input to search the player by.</param>
            <param name="requireFullMatch">Whether the full match is required.</param>
            <returns>Player or <see langword="null"/> if no close player found.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.GetByNickname(System.String,System.Boolean)">
            <summary>
            Gets the closest player by lexicographical order.
            Players are compared by their <see cref="P:LabApi.Features.Wrappers.Player.Nickname"/>.
            </summary>
            <param name="input">The input to search the player by.</param>
            <param name="requireFullMatch">Whether the full match is required.</param>
            <returns>Player or <see langword="null"/> if no close player found.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.GetByName(System.String,System.Boolean,System.Func{LabApi.Features.Wrappers.Player,System.String})">
            <summary>
            Gets the closest player by lexicographical order.
            Base function to allow to select by <see langword="string"/> player property.
            </summary>
            <param name="input">The input to search the player by.</param>
            <param name="requireFullMatch">Whether the full match is required.</param>
            <param name="propertySelector">Function to select player property.</param>
            <returns>Player or <see langword="null"/> if no close player found.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.TryGetPlayersByName(System.String,System.Collections.Generic.List{LabApi.Features.Wrappers.Player}@)">
            <summary>
            Tries to get players by name by seeing if their name starts with the input.
            </summary>
            <param name="input">The input to search for.</param>
            <param name="players">The output players if found.</param>
            <returns>True if the players are found, false otherwise.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.Initialize">
            <summary>
            Initializes the <see cref="T:LabApi.Features.Wrappers.Player"/> class to subscribe to <see cref="P:LabApi.Features.Wrappers.Player.ReferenceHub"/> events and handle the player cache.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.CreatePlayerWrapper(ReferenceHub)">
            <summary>
            Creates a new wrapper for the player using the player's <see cref="T:ReferenceHub"/>.
            </summary>
            <param name="referenceHub">The <see cref="T:ReferenceHub"/> of the player.</param>
            <returns>The created player wrapper.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.AddPlayer(ReferenceHub)">
            <summary>
            Handles the creation of a player in the server.
            </summary>
            <param name="referenceHub">The reference hub of the player.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.RemovePlayer(ReferenceHub)">
            <summary>
            Handles the removal of a player from the server.
            </summary>
            <param name="referenceHub">The reference hub of the player.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.#ctor(ReferenceHub)">
            <summary>
            An internal constructor to prevent external instantiation.
            </summary>
            <param name="referenceHub">The reference hub of the player.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.ReferenceHub">
            <summary>
            The <see cref="P:LabApi.Features.Wrappers.Player.ReferenceHub">Reference Hub</see> of the player.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.GameObject">
            <summary>
            Gets the player's <see cref="P:LabApi.Features.Wrappers.Player.GameObject"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsHost">
            <summary>
            Gets whether the player is the host or server.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsServer">
            <summary>
            Gets whether the player is the dedicated server.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsNpc">
            <summary>
            Gets whether this <see cref="T:LabApi.Features.Wrappers.Player"/> instance is not controlled by a real human being.
            </summary>
            <remarks>
            This list includes dummy players.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsPlayer">
            <summary>
            Gets whether the player is a real player and not the host or an Npc.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsDummy">
            <summary>
            Gets whether the player is a dummy instance.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.UserId">
            <summary>
            Gets the Player's User ID.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.NetworkId">
            <summary>
            Gets the player's Network ID.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.Connection">
            <summary>
            Gets the player's <see cref="T:Mirror.NetworkConnection"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.ConnectionToClient">
            <summary>
            Gets the player's <see cref="T:Mirror.NetworkConnectionToClient"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.PlayerId">
            <summary>
            Gets the player's <see cref="T:RecyclablePlayerId"/> value.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsOffline">
            <summary>
            Gets if the player is currently offline.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsOnline">
            <summary>
            Gets if the player is currently online.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsDestroyed">
            <summary>
            Gets whether the player was destroyed.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsReady">
            <summary>
            Gets if the player is properly connected and authenticated.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IpAddress">
            <summary>
            Gets the player's IP address.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.Role">
            <summary>
            Gets or sets the player's current role.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.RoleBase">
            <summary>
            Gets the player's current <see cref="T:PlayerRoles.PlayerRoleBase"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.LifeId">
            <summary>
            Get's the player's current role unique identifier.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.Nickname">
            <summary>
            Gets the Player's Nickname.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.DisplayName">
            <summary>
            Gets or sets the Player's Display Name.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.LogName">
            <summary>
            Gets the log name needed for command senders.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.CustomInfo">
            <summary>
            Gets or sets the player's custom info.<br/>
            Do note that custom info is restricted by several things listed in <see cref="M:LabApi.Features.Wrappers.Player.ValidateCustomInfo(System.String,System.String@)"/>.
            Please use this method to validate your string as it is validated on the client by the same method.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.InfoArea">
            <summary>
            Gets or sets the player's info area flags.
            Flags determine what info is displayed to other players when they hover their cross-hair over.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.Health">
            <summary>
            Gets or sets the player's current health.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.MaxHealth">
            <summary>
            Gets or sets the player's current maximum health.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.ArtificialHealth">
            <summary>
            Gets or sets the player's current artificial health.<br/>
            Setting the value will clear all the current "processes" (each process is responsible for decaying AHP value separately. E.g 2 processes blue candy AHP, which doesn't decay and adrenaline process, where AHP does decay).<br/>
            Note: This value cannot be greater than <see cref="P:LabApi.Features.Wrappers.Player.MaxArtificialHealth"/>. Set it to your desired value first if its over <see cref="F:PlayerStatsSystem.AhpStat.DefaultMax"/> and then set this one.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.MaxArtificialHealth">
            <summary>
            Gets or sets the player's current maximum artificial health or hume shield.<br/>
            Note: The value resets to <see cref="F:PlayerStatsSystem.AhpStat.DefaultMax"/> when the player's AHP reaches 0.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.HumeShield">
            <summary>
            Gets or sets the player's hume shield current value.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.MaxHumeShield">
            <summary>
            Gets or sets the player's maximum hume shield value.
            Note: This value may change if the player passes a new hume shield threshold for SCPs.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.HumeShieldRegenRate">
            <summary>
            Gets or sets the current regeneration rate of the hume shield per second.
            Returns -1 if the player's role doesn't have hume shield controller.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.HumeShieldRegenCooldown">
            <summary>
            Gets or sets the time that must pass after taking damage for hume shield to regenerate again.
            Returns -1 if the player's role doesn't have hume shield controller.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.Gravity">
            <summary>
            Gets or sets the player's current gravity. Default value is <see cref="P:PlayerRoles.FirstPersonControl.FpcGravityController.DefaultGravity"/>.<br/>
            If the player's current role is not first person controlled (inherit from <see cref="T:PlayerRoles.FirstPersonControl.IFpcRole"/> then <see cref="P:UnityEngine.Vector3.zero"/> is returned.<br/>
            Y-axis is up and down. Negative values makes the player go down. Positive upwards. Player must not be grounded in order for gravity to take effect.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.RemoteAdminAccess">
            <summary>
            Gets a value indicating whether the player has remote admin access.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.DoNotTrack">
            <summary>
            Gets a value indicating whether the player has Do-Not-Track enabled.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsOverwatchEnabled">
            <summary>
            Gets or sets a value indicating whether the player is in overwatch mode.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.CurrentlySpectating">
            <summary>
            Gets the player this player is currently spectating.<br/>
            Returns null if current player is not spectator or the spectated player is not valid.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.CurrentSpectators">
            <summary>
            Gets a pooled list of players who are currently spectating this player.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsSpectatable">
            <summary>
            Gets or sets whether this player can be spectated by other players.
            </summary>
            <remarks>
            This property is reset when player leaves.
            </remarks>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.CurrentItem">
            <summary>
            Gets or sets the player's current <see cref="T:LabApi.Features.Wrappers.Item">item</see>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.ActiveEffects">
            <summary>
            Gets the player's currently active <see cref="T:CustomPlayerEffects.StatusEffectBase">status effects</see>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.Room">
            <summary>
            Gets the <see cref="T:LabApi.Features.Wrappers.Room"/> at the player's current position.
            May be <see langword="null"/> if the player is in the void.
            <para>
            Player inside of the elevator is consider to be in the said room until the elevator teleports to the next door.
            </para>
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.CachedRoom">
            <summary>
            Gets the cached room of the player. Cached room is revalidated once every frame or when player teleports.<br/>
            It is not guarantee that the <see cref="P:LabApi.Features.Wrappers.Player.Position"/> will match the exact same room it should be in due to the caching.<br/>
            May be <see langword="null"/> if the player is in the void.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.Zone">
            <summary>
            Gets the <see cref="T:MapGeneration.FacilityZone"/> for the player's current room. Returns <see cref="F:MapGeneration.FacilityZone.None"/> if the room is null.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.Items">
            <summary>
            Gets the <see cref="T:LabApi.Features.Wrappers.Item">items</see> in the player's inventory.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.Ammo">
            <summary>
            Gets the player's Reserve Ammo.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.GroupColor">
            <summary>
            Gets or sets the player's group color.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.GroupName">
            <summary>
            Gets or sets what is displayed for the player's group.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.UserGroup">
            <summary>
            Gets or sets the player's <see cref="P:LabApi.Features.Wrappers.Player.UserGroup"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.PermissionsGroupName">
            <summary>
            Gets the player's default permission group name. Or null if the player is not in a group.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.UnitId">
            <summary>s
            Gets the player's unit ID, or -1 if the role is not a <see cref="T:PlayerRoles.HumanRole"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.HasReservedSlot">
            <summary>
            Gets a value indicating whether the player has a reserved slot.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.Velocity">
            <summary>
            Gets the player's velocity.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.Inventory">
            <summary>
            Gets the player's <see cref="P:LabApi.Features.Wrappers.Player.Inventory"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.VoiceModule">
            <summary>
            Gets the <see cref="T:PlayerRoles.Voice.VoiceModuleBase"/> for the player, or null if the player does not have a voice module.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.VoiceChannel">
            <summary>
            Gets the current <see cref="T:VoiceChat.VoiceChatChannel"/> for the player, or <see cref="F:VoiceChat.VoiceChatChannel.None"/> if the player is not using a voice module.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsWithoutItems">
            <summary>
            Gets a value indicating whether the player has no items in their inventory.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsInventoryFull">
            <summary>
            Gets a value indicating whether the player's inventory is full.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsOutOfAmmo">
            <summary>
            Gets a value indicating whether the player is out of ammunition.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsDisarmed">
            <summary>
            Gets or sets a value indicating whether the player is disarmed.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsMuted">
            <summary>
            Gets a value indicating whether the player is muted.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsIntercomMuted">
            <summary>
            Gets a value indicating whether the player is muted from the intercom.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsUsingRadio">
            <summary>
            Gets a value indicating whether the player is talking through a radio.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsSpeaking">
            <summary>
            Gets a value indicating whether the player is speaking.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsGlobalModerator">
            <summary>
            Gets a value indicating whether the player is a Global Moderator.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsNorthwoodStaff">
            <summary>
            Gets a value indicating whether the player is a Northwood Staff member.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsBypassEnabled">
            <summary>
            Gets or sets a value indicating whether bypass mode is enabled for the player, allowing them to open doors/gates without keycards.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsGodModeEnabled">
            <summary>
            Gets or sets a value indicating whether god mode is enabled for the player.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsNoclipEnabled">
            <summary>
            Gets or sets a value indicating whether noclip mode is enabled for the player.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.DisarmedBy">
            <summary>
            Gets or sets the player who disarmed this player.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.Team">
            <summary>
            Gets the player's current <see cref="P:LabApi.Features.Wrappers.Player.Team"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.Faction">
            <summary>
            Gets the player's current <see cref="P:LabApi.Features.Wrappers.Player.Faction"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsAlive">
            <summary>
            Gets whether the player is currently Alive.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsSCP">
            <summary>
            Gets if the player is an SCP.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsHuman">
            <summary>
            Gets if the player is a human.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsNTF">
            <summary>
            Gets if the player is part of the NTF.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsChaos">
            <summary>
            Gets if the player is part of the Chaos Insurgency.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.IsTutorial">
            <summary>
            Gets if the player is a tutorial.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.Camera">
            <summary>
            Gets the player's Camera <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.Position">
            <summary>
            Gets or sets the player's position.<br/>
            Returns <see cref="P:UnityEngine.Vector3.zero"/> if the player's role is not currently derived from <see cref="T:PlayerRoles.FirstPersonControl.IFpcRole"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.Rotation">
            <summary>
            Gets or sets the player's rotation.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.LookRotation">
            <summary>
            Gets or sets the player's look rotation. X is vertical axis while Y is horizontal. Vertical axis is clamped by the base game logic.<br/>
            Returns <see cref="P:UnityEngine.Vector2.zero"/> if the player's role is not currently derived from <see cref="T:PlayerRoles.FirstPersonControl.IFpcRole"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.Scale">
            <summary>
            Gets or sets player's scale. Player's role must be <see cref="T:PlayerRoles.FirstPersonControl.IFpcRole"/> for it to take effect.<br/>
            Vertical scale is not linear as the model's origin and scaling is done from player's feet.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Player.StaminaRemaining">
            <summary>
            Gets or sets player's remaining stamina (min = 0, max = 1).
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.Move(UnityEngine.Vector3)">
            <summary>
            Teleports the player by the delta location.
            </summary>
            <param name="delta">Position to add to the current one.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.Rotate(UnityEngine.Vector2)">
            <summary>
            Rotates the player by the parameter.
            </summary>
            <param name="delta">Rotation to add to the current one. X is vertical and Y is horizontal rotation.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.Jump(System.Single)">
            <summary>
            Forces <see cref="T:PlayerRoles.FirstPersonControl.IFpcRole"/> to jump.
            <para>Jumping can be also adjusted via <see cref="T:CustomPlayerEffects.HeavyFooted"/> and <see cref="T:CustomPlayerEffects.Lightweight"/> status effects.</para>
            </summary>
            <param name="jumpStrength">Strength that the player will jump with.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.Jump">
            <inheritdoc cref="M:LabApi.Features.Wrappers.Player.Jump(System.Single)"/>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.ClearBroadcasts">
            <summary>
            Clears displayed broadcast(s).
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.SendBroadcast(System.String,System.UInt16,Broadcast.BroadcastFlags,System.Boolean)">
            <summary>
            Sends a broadcast to the player.
            </summary>
            <param name="message">The message to be broadcast.</param>
            <param name="duration">The broadcast duration.</param>
            <param name="type">The broadcast type.</param>
            <param name="shouldClearPrevious">Whether it should clear previous broadcasts.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.SendConsoleMessage(System.String,System.String)">
            <summary>
            Sends a message to the player's console.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="color">The color of the message.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.Mute(System.Boolean)">
            <summary>
            Issue a mute to a player, preventing them from speaking.
            </summary>
            <param name="isTemporary">Whether the mute is temporary, or should be added to the mute file.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.Unmute(System.Boolean)">
            <summary>
            Revokes a mute from a player, allowing them to speak again.
            </summary>
            <param name="revokeMute">If set to true, this player's <see cref="P:LabApi.Features.Wrappers.Player.UserId"/> will be removed from the mute file.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.IntercomMute(System.Boolean)">
            <summary>
            Issue a mute to a player, preventing them from speaking through the intercom.
            </summary>
            <param name="isTemporary">Whether the mute is temporary, or should be added to the mute file.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.IntercomUnmute(System.Boolean)">
            <summary>
            Revokes a mute from a player, allowing them to speak through the intercom again.
            </summary>
            <param name="revokeMute">If set to true, this player's <see cref="P:LabApi.Features.Wrappers.Player.UserId"/> will be removed from the mute file.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.AddAmmo(ItemType,System.UInt16)">
            <summary>
            Adds ammo of the specified type to the player's inventory.
            </summary>
            <param name="item">The type of ammo.</param>
            <param name="amount">The amount of ammo.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.AddItem(ItemType,InventorySystem.Items.ItemAddReason)">
            <summary>
            Adds an item of the specified type to the player's inventory.
            </summary>
            <param name="item">The type of item.</param>
            <param name="reason">The reason why is this item being added.</param>
            <returns>The <see cref="T:LabApi.Features.Wrappers.Item"/> added or null if it could not be added.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.AddItem(LabApi.Features.Wrappers.Pickup)">
            <summary>
            Adds an item by picking it up.
            </summary>
            <param name="pickup">The <see cref="T:LabApi.Features.Wrappers.Pickup"/> to pickup.</param>
            <returns>The <see cref="T:LabApi.Features.Wrappers.Item"/> added or null if it could not be added.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.RemoveItem(LabApi.Features.Wrappers.Item)">
            <summary>
            Removes a specific <see cref="T:LabApi.Features.Wrappers.Item"/> from the player's inventory.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.RemoveItem(InventorySystem.Items.ItemBase)">
            <summary>
            Removes a specific <see cref="T:InventorySystem.Items.ItemBase"/> from the player's inventory.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.RemoveItem(LabApi.Features.Wrappers.Pickup)">
            <summary>
            Removes a specific <see cref="T:LabApi.Features.Wrappers.Pickup"/> from the player's inventory.
            </summary>
            <param name="pickup">The pickup to remove.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.RemoveItem(InventorySystem.Items.Pickups.ItemPickupBase)">
            <summary>
            Removes a specific <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/> from the player's inventory.
            </summary>
            <param name="pickup">The pickup to remove.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.RemoveItem(ItemType,System.Int32)">
            <summary>
            Removes all items of the specified type from the player's inventory.
            </summary>
            <param name="item">The type of item.</param>
            <param name="maxAmount">The maximum amount of items to remove.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.DropItem(LabApi.Features.Wrappers.Item)">
            <summary>
            Drops the specified <see cref="T:LabApi.Features.Wrappers.Item"/> from the player's inventory.
            </summary>
            <param name="item">The item.</param>
            <returns>The dropped <see cref="T:LabApi.Features.Wrappers.Pickup">item pickup</see>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.DropItem(InventorySystem.Items.ItemBase)">
            <summary>
            Drops the specified <see cref="T:InventorySystem.Items.ItemBase"/> from the player's inventory.
            </summary>
            <param name="item">The item.</param>
            <returns>The dropped <see cref="T:LabApi.Features.Wrappers.Pickup">item pickup</see>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.DropItem(System.UInt16)">
            <summary>
            Drops the item with the specified serial from the player's inventory.
            </summary>
            <param name="serial">The serial of the item.</param>
            <returns>The dropped <see cref="T:LabApi.Features.Wrappers.Pickup">item pickup</see>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.DropAllItems">
            <summary>
            Drops all items from the player's inventory.
            </summary>
            <returns>The pooled list of dropped items. Please return when your done with it.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.SetAmmo(ItemType,System.UInt16)">
            <summary>
            Sets the ammo amount of a specific ammo type.
            </summary>
            <param name="item">The type of ammo.</param>
            <param name="amount">The amount of ammo.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.GetAmmo(ItemType)">
            <summary>
            Gets ammo amount of specific ammo type.
            </summary>
            <param name="item">The type of ammo.</param>
            <returns>The amount of ammo which the player has.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.DropAmmo(ItemType,System.UInt16,System.Boolean)">
            <summary>
            Drops ammo of the specified type from the player's inventory.
            </summary>
            <param name="item">The type of ammo.</param>
            <param name="amount">The amount to drop.</param>
            <param name="checkMinimals">Will prevent dropping small amounts of ammo.</param>
            <returns>The dropped ammo.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.DropAllAmmo">
            <summary>
            Drops all ammo from the player's inventory.
            </summary>
            <returns>The list of dropped ammo.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.DropEverything">
            <summary>
            Drops all items and ammo from the player's inventory.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.ClearItems">
            <summary>
            Clear Items from the player's inventory.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.ClearAmmo">
            <summary>
            Clear Ammo from the player's inventory.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.ClearInventory(System.Boolean,System.Boolean)">
            <summary>
            Clears the player's inventory.
            </summary>
            <param name="clearAmmo">Whether to clear the player's ammo.</param>
            <param name="clearItems">Whether to clear the player's items.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.GiveCandy(InventorySystem.Items.Usables.Scp330.CandyKindID,InventorySystem.Items.ItemAddReason)">
            <summary>
            Gives a candy to the player.
            </summary>
            <param name="candy">The candy to give the player.</param>
            <param name="reason">The reason to grant the candy bag.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.GiveRandomCandy(InventorySystem.Items.ItemAddReason)">
            <summary>
            Gives a random candy to the player.
            </summary>
            <param name="reason">The reason to grant the candy bag.</param>
            <remarks>This will use <see cref="M:InventorySystem.Items.Usables.Scp330.Scp330Candies.GetRandom(InventorySystem.Items.Usables.Scp330.CandyKindID)"/>, meaning it will use <see cref="P:InventorySystem.Items.Usables.Scp330.ICandy.SpawnChanceWeight"/> to choose the candy.</remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.HasPermission(PlayerPermissions)">
            <summary>
            Checks if a player has the specified <see cref="T:PlayerPermissions"/>.
            </summary>
            <param name="permission">The permission to check the player for.</param>
            <returns>Whether the permission check was successful.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.AddRegeneration(System.Single,System.Single)">
            <summary>
            Adds regeneration to the player.
            </summary>
            <param name="rate">The rate to heal per second.</param>
            <param name="duration">How long the regeneration should last.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.Heal(System.Single)">
            <summary>
            Heals the player by the specified amount.
            </summary>
            <param name="amount">The amount to heal.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.CreateAhpProcess(System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates and run a new AHP process.
            </summary>
            <param name="amount">Amount of AHP to be added.</param>
            <param name="limit">Adds limit to the AHP.</param>
            <param name="decay">Rate of AHP decay (per second).</param>
            <param name="efficacy">Value between 0 and 1. Defines what % of damage will be absorbed.</param>
            <param name="sustain">Pauses decay for specified amount of seconds.</param>
            <param name="persistent">If true, it won't be automatically removed when reaches 0.</param>
            <returns>Process in case it needs to be removed. Use <see cref="M:LabApi.Features.Wrappers.Player.ServerKillProcess(PlayerStatsSystem.AhpStat.AhpProcess)"/> to kill it.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.ServerKillProcess(PlayerStatsSystem.AhpStat.AhpProcess)">
            <summary>
            Kills the AHP process.
            </summary>
            <param name="process">Process to be killed.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.SetRole(PlayerRoles.RoleTypeId,PlayerRoles.RoleChangeReason,PlayerRoles.RoleSpawnFlags)">
            <summary>
            Sets the player's role.
            </summary>
            <param name="newRole">The <see cref="T:PlayerRoles.RoleTypeId"/> which will be set.</param>
            <param name="reason">The <see cref="T:PlayerRoles.RoleChangeReason"/> of role change.</param>
            <param name="flags">The <see cref="T:PlayerRoles.RoleSpawnFlags"/> of role change.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.GetRoleVisibilityFor(LabApi.Features.Wrappers.Player)">
            <summary>
            Determines if <paramref name="otherPlayer"/> is seen as spectator or their role based on visibility, permissions, and distance of this player.
            </summary>
            <param name="otherPlayer">The other player to check.</param>
            <returns>The role this player sees for the other player.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.Disconnect(System.String)">
            <summary>
            Disconnects the player from the server.
            </summary>
            <param name="reason">The reason for the disconnection.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.SendHint(System.String,System.Single)">
            <summary>
            Sends the player a text hint.
            </summary>
            <param name="text">The text which will be displayed.</param>
            <param name="duration">The duration of which the text will be visible in seconds.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.SendHint(System.String,Hints.HintEffect[],System.Single)">
            <summary>
            Sends the player a text hint with effects.
            </summary>
            <param name="text">The text which will be displayed.</param>
            <param name="effects">The effects of text.</param>
            <param name="duration">The duration of which the text will be visible in seconds.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.SendHint(System.String,Hints.HintParameter[],Hints.HintEffect[],System.Single)">
            <summary>
            Sends the player a text hint with parameters.
            </summary>
            <param name="text">The text which will be displayed.</param>
            <param name="parameters">The parameters to interpolate into the text.</param>
            <param name="effects">The effects used for hint animations. See <see cref="T:Hints.HintEffect"/>.</param>
            <param name="duration">The duration of which the text will be visible.</param>
            <remarks>
            Parameters are interpolated into the string on the client.
            E.g. <c>"Test param1: {0} param2: {1}"</c>.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.SendHitMarker(System.Single)">
            <summary>
            Sends the player a hit marker.
            </summary>
            <param name="size">The size of hit marker.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.GetStatModule``1">
            <summary>
            Gets the stats module.
            </summary>
            <typeparam name="T">The type of the stat module.</typeparam>
            <returns>The stat module.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.HasEffect``1">
            <summary>
            Gets whether the player has a specific <see cref="T:CustomPlayerEffects.StatusEffectBase">status effect</see>.
            </summary>
            <typeparam name="T">The type of the status effect to check.</typeparam>
            <returns>Whether the player has the status effect.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.DisableAllEffects">
            <summary>
            Disables all active <see cref="T:CustomPlayerEffects.StatusEffectBase">status effects</see>.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.DisableEffect``1">
            <summary>
            Disables a specific <see cref="T:CustomPlayerEffects.StatusEffectBase">status effect</see>.
            </summary>
            <typeparam name="T">The type of the status effect to disable.</typeparam>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.DisableEffect(CustomPlayerEffects.StatusEffectBase)">
            <summary>
            Disables a specific <see cref="T:CustomPlayerEffects.StatusEffectBase">status effect</see>.
            </summary>
            <param name="effect">The status effect to disable.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.EnableEffect``1(System.Byte,System.Single,System.Boolean)">
            <summary>
            Enables a specific <see cref="T:CustomPlayerEffects.StatusEffectBase">status effect</see>.
            </summary>
            <typeparam name="T">The type of the status effect to enable.</typeparam>
            <param name="intensity">The intensity of the status effect.</param>
            <param name="duration">The duration of the status effect.</param>
            <param name="addDuration">Whether to add the duration to the current duration, if the effect is already active.</param>
            <remarks>A duration of 0 means that it will not expire.</remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.EnableEffect(CustomPlayerEffects.StatusEffectBase,System.Byte,System.Single,System.Boolean)">
            <summary>
            Enables a specific <see cref="T:CustomPlayerEffects.StatusEffectBase">status effect</see>.
            </summary>
            <param name="effect">The status effect to enable.</param>
            <param name="intensity">The intensity of the status effect.</param>
            <param name="duration">The duration of the status effect.</param>
            <param name="addDuration">Whether to add the duration to the current duration, if the effect is already active.</param>
            <remarks>A duration of 0 means that it will not expire.</remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.TryGetEffect``1(``0@)">
            <summary>
            Tries to get a specific <see cref="T:CustomPlayerEffects.StatusEffectBase">status effect</see>.
            </summary>
            <typeparam name="T">The specified effect that will be looked for.</typeparam>
            <param name="effect">The found player effect.</param>
            <returns>Whether the <see cref="T:CustomPlayerEffects.StatusEffectBase">status effect</see> was successfully retrieved (And was cast successfully).</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.TryGetEffect(System.String,CustomPlayerEffects.StatusEffectBase@)">
            <summary>
            Tries to get a specific <see cref="T:CustomPlayerEffects.StatusEffectBase"/> based on its name.
            </summary>
            <param name="effectName">The name of the effect to get.</param>
            <param name="effect">The effect found.</param>
            <returns>Whether the <see cref="T:CustomPlayerEffects.StatusEffectBase"/> was successfully found.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.GetEffect``1">
            <summary>
            Gets a specific <see cref="T:CustomPlayerEffects.StatusEffectBase">status effect</see>.
            </summary>
            <typeparam name="T">The specified effect that will be looked for.</typeparam>
            <returns>The <see cref="T:CustomPlayerEffects.StatusEffectBase"/> instance of <typeparamref name="T"/>, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.RedirectToServer(System.UInt16)">
            <summary>
            Redirects player connection to a target server port.
            </summary>
            <param name="port">The port of the target server.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.Reconnect(System.Single,System.Boolean)">
            <summary>
            Tells the player to reconnect to the server.
            </summary>
            <param name="delay">The delay before reconnecting.</param>
            <param name="isFastRestart">Whether fast restart is enabled.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.Kill">
            <summary>
            Kills the player.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.Kill(System.String,System.String)">
            <summary>
            Kills the player.
            </summary>
            <param name="reason">The reason for the kill.</param>
            <param name="cassieAnnouncement">The CASSIE announcement to make upon death.</param>
            <returns>Whether the player was successfully killed.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.Damage(System.Single,System.String,System.String)">
            <summary>
            Damages player with a custom reason.
            </summary>
            <param name="amount">The amount of damage.</param>
            <param name="reason">The reason of damage.</param>
            <param name="cassieAnnouncement">The CASSIE announcement send after death.</param>
            <returns>Whether the player was successfully damaged.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.Damage(System.Single,LabApi.Features.Wrappers.Player,UnityEngine.Vector3,System.Int32)">
            <summary>
            Damages player with explosion force.
            </summary>
            <param name="amount">The amount of damage.</param>
            <param name="attacker">The player which attacked.</param>
            <param name="force">The force of explosion.</param>
            <param name="armorPenetration">The amount of armor penetration.</param>
            <returns>Whether the player was successfully damaged.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.Damage(PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Damages player.
            </summary>
            <param name="damageHandlerBase">The damage handler base.</param>
            <returns>Whether the player was successfully damaged.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.Ban(LabApi.Features.Wrappers.Player,System.String,System.Int64)">
            <summary>
            Bans the player from the server.
            </summary>
            <param name="issuer">The player that issued the ban.</param>
            <param name="reason">The reason of the ban.</param>
            <param name="duration">The duration of the ban in seconds.</param>
            <returns>Whether the player was successfully banned.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.Ban(System.String,System.Int64)">
            <summary>
            Bans the player from the server.
            </summary>
            <param name="reason">The reason of the ban.</param>
            <param name="duration">The duration of the ban in seconds.</param>
            <returns>Whether the player was successfully banned.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.Kick(LabApi.Features.Wrappers.Player,System.String)">
            <summary>
            Kicks the player from the server.
            </summary>
            <param name="issuer">The player that issued the kick.</param>
            <param name="reason">The reason of the kick.</param>
            <returns>Whether the player was successfully kicked.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.Kick(System.String)">
            <summary>
            Kicks the player from the server.
            </summary>
            <param name="reason">The reason of the kick.</param>
            <returns>Whether the player was successfully kicked.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.GetDataStore``1">
            <summary>
            Gets the <see cref="T:LabApi.Features.Stores.CustomDataStore"/> associated with the player, or creates a new one if it doesn't exist.
            </summary>
            <typeparam name="TStore">The type of the <see cref="T:LabApi.Features.Stores.CustomDataStore"/>.</typeparam>
            <returns>The <see cref="T:LabApi.Features.Stores.CustomDataStore"/> associated with the player.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Player.ToString">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Features.Wrappers.Ragdoll">
            <summary>
            The wrapper representing <see cref="T:PlayerRoles.Ragdolls.BasicRagdoll">basic ragdolls</see>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Ragdoll.Dictionary">
            <summary>
            Contains all the cached ragdolls in the game, accessible through their <see cref="T:PlayerRoles.Ragdolls.BasicRagdoll"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Ragdoll.List">
            <summary>
            A reference to all <see cref="T:LabApi.Features.Wrappers.Ragdoll"/> instances currently in the game.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Ragdoll.SpawnRagdoll(LabApi.Features.Wrappers.Player,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Spawns a new ragdoll based on a specified player and damage handler.
            </summary>
            <param name="player">Player for ragdoll template.</param>
            <param name="handler">Handler that is shown as a death cause.</param>
            <returns>New ragdoll.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Ragdoll.SpawnRagdoll(PlayerRoles.RoleTypeId,UnityEngine.Vector3,UnityEngine.Quaternion,PlayerStatsSystem.DamageHandlerBase,System.String,System.Nullable{UnityEngine.Vector3})">
            <summary>
            Attempts to spawn a ragdoll from specified role. Ragdoll is not created if specified role doesn't have any ragdoll model available.
            </summary>
            <param name="role">Target role type.</param>
            <param name="position">Spawn position.</param>
            <param name="rotation">Spawn rotation.</param>
            <param name="handler">Damage handler of the death cause.</param>
            <param name="nickname">Nickname that is visible when hovering over.</param>
            <param name="scale">Spawn scale. Converted to base ragdoll scale if <see langword="null"/>.</param>
            <returns>Ragdoll object or <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Ragdoll.Get(PlayerRoles.Ragdolls.BasicRagdoll)">
            <summary>
            Gets the ragdoll wrapper from the <see cref="P:LabApi.Features.Wrappers.Ragdoll.Dictionary"/>, or creates a new one if it doesn't exist.
            </summary>
            <param name="ragdoll">The ragdoll.</param>
            <returns>The requested ragdoll.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Ragdoll.Initialize">
            <summary>
            Initializes the <see cref="T:LabApi.Features.Wrappers.Ragdoll"/> class to subscribe to <see cref="T:PlayerRoles.Ragdolls.RagdollManager"/> events and handle the ragdoll caching.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Ragdoll.RagdollSpawned(PlayerRoles.Ragdolls.BasicRagdoll)">
            <summary>
            Event method for <see cref="E:PlayerRoles.Ragdolls.RagdollManager.OnRagdollSpawned"/>.
            </summary>
            <param name="ragdoll">New ragdoll.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Ragdoll.RagdollRemoved(PlayerRoles.Ragdolls.BasicRagdoll)">
            <summary>
            Event method for <see cref="E:PlayerRoles.Ragdolls.RagdollManager.OnRagdollRemoved"/>.
            </summary>
            <param name="ragdoll">Destroyed ragdoll.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Ragdoll.#ctor(PlayerRoles.Ragdolls.BasicRagdoll)">
            <summary>
            A private constructor to prevent external instantiation.
            </summary>
            <param name="ragdoll">The ragdoll component.</param>
        </member>
        <member name="P:LabApi.Features.Wrappers.Ragdoll.Base">
            <summary>
            Gets the <see cref="T:PlayerRoles.Ragdolls.BasicRagdoll"/> of the ragdoll.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Ragdoll.IsDestroyed">
            <summary>
            Gets whether the base room instance was destroyed.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Ragdoll.Role">
            <summary>
            Gets or sets the role info of the ragdoll.
            <para>This does NOT change the ragdoll visually.</para>
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Ragdoll.Nickname">
            <summary>
            Gets or sets the ragdoll nickname.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Ragdoll.DamageHandler">
            <summary>
            Gets or sets the ragdoll damage handler, providing death cause.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Ragdoll.Position">
            <summary>
            Gets or sets the position of the ragdoll.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Ragdoll.Rotation">
            <summary>
            Gets or sets the rotation of the ragdoll.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Ragdoll.Scale">
            <summary>
            Gets or sets the ragdoll's scale.
            Scale is set relative to the ragdoll's gameObject size.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Ragdoll.IsConsumed">
            <summary>
            Gets or sets whether the corpse is consumed.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Ragdoll.CanCache">
            <summary>
            Whether to cache this wrapper.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Ragdoll.IsRevivableBy(LabApi.Features.Wrappers.Player)">
            <summary>
            Gets whether the ragdoll is revivable by SCP-049 player.
            </summary>
            <param name="scp049">Player who is SCP-049.</param>
            <returns>True if corpse is revivable. False if it isn't or specified player is not SCP-049.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Ragdoll.Destroy">
            <summary>
            Destroys this ragdoll.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Ragdoll.Freeze">
            <summary>
            Forcefully freezes this ragdoll for all clients.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Ragdoll.UnFreeze">
            <summary>
            Unfreezes this ragdoll by spawning a copy of it and destroying the original. Reference to the <see cref="P:LabApi.Features.Wrappers.Ragdoll.Base"/> changes, but no other action is required if you are referencing this object. <br/>
            </summary>
            <remarks>
            Note that the position and rotation is set to the server one.
            </remarks>
        </member>
        <member name="M:LabApi.Features.Wrappers.Ragdoll.ToString">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Features.Wrappers.ReservedSlots">
            <summary>
            A static wrapper representing the <see cref="T:LabApi.Features.Wrappers.ReservedSlots">reserved slots</see> of the server.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ReservedSlots.FilePath">
            <summary>
            Absolute path to UserIDReservedSlots file.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ReservedSlots.WhitelistedPlayers">
            <summary>
            All currently players with reserved slots.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.ReservedSlots.Count">
            <summary>
            Amount of players with reserved slots.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.ReservedSlots.HasReservedSlot(System.String)">
            <summary>
            Checks if player has a reserved slot on the server.
            </summary>
            <param name="userId">The user id of the player.</param>
            <returns>Whether player has a reserved slot.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.ReservedSlots.Reload">
            <summary>
            Reloads reserved slots from the file.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.ReservedSlots.Add(System.String)">
            <summary>
            Gives the player a reserved slot and saves it to file.
            </summary>
            <param name="userId">The user id.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.ReservedSlots.Add(LabApi.Features.Wrappers.Player)">
            <summary>
            Gives the player a reserved slot and saves it to file.
            </summary>
            <param name="player">The target player.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.ReservedSlots.Remove(System.String)">
            <summary>
            Removes the player's reserved slot and saves it to file.
            </summary>
            <param name="userId">The user id.</param>
            <returns>Whether the user id was found and removed from reserved slots.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.ReservedSlots.Remove(LabApi.Features.Wrappers.Player)">
            <summary>
             Removes player from whitelist and saves it to file.
            </summary>
            <param name="player">The target player.</param>
            <returns>Whether the player was found and removed from the reserved slots.</returns>
        </member>
        <member name="T:LabApi.Features.Wrappers.Server">
            <summary>
            Represents the server.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Server.Host">
            <summary>
            The <see cref="T:LabApi.Features.Wrappers.Server"/> Instance.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Server.IpAddress">
            <summary>
            Gets the IP address of the server.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Server.Port">
            <summary>
            Gets the port of the server.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Server.PlayerCount">
            <summary>
            Gets the amount of online players.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Server.MaxPlayers">
            <summary>
            Gets or sets the maximum amount of players allowed online at the same time.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Server.ReservedSlots">
            <summary>
            Gets or sets the amount of reserved slots.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Server.DefaultPermissionProvider">
            <summary>
            Gets the <see cref="T:LabApi.Features.Permissions.Providers.DefaultPermissionsProvider"/>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Server.Tps">
            <summary>
            Gets the Ticks Per Second of the server.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Server.MaxTps">
            <summary>
            Gets the max Ticks Per Second of the server.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Server.SpawnProtectDuration">
            <summary>
            Gets or sets the spawn protection duration for players.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Server.IdleModeActive">
            <summary>
            Gets whether the server is in Idle Mode.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Server.PauseIdleMode">
            <summary>
            Gets or sets whether the server temporarily can't enter Idle Mode.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Server.IdleModeAvailable">
            <summary>
            Gets or sets whether Idle Mode is available on the server.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Server.FriendlyFire">
            <summary>
            Gets or sets a value indicating whether friendly fire is enabled.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Server.AchievementsEnabled">
            <summary>
            Gets or sets a value indicating whether achievement granting is enabled.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Server.ServerListName">
            <summary>
            Gets or sets the server name as seen on the server list.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Server.PlayerListName">
            <summary>
            Gets or sets the server name as seen on the player list.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Server.PlayerListNameRefreshRate">
            <summary>
            Gets or sets the refresh rate for the player list name.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Server.IsTransparentlyModded">
            <summary>
            Gets or sets whether the server has been marked as transparently modded.<br/>
            For this status to be applied automatically, all installed plugins must have their
            <see cref="P:LabApi.Loader.Features.Plugins.Plugin.IsTransparent"/> property set to <see langword="true"/>.<br/>
            For more information, see article 5.2 in the official documentation: https://scpslgame.com/csg.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Server.CategoryLimits">
            <summary>
            Gets the <see cref="T:ItemCategory">Category</see> <see cref="T:LabApi.Features.Wrappers.Server.ILimit`2">limits</see>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Server.AmmoLimits">
            <summary>
            Gets the <see cref="T:ItemType">Ammo</see> <see cref="T:LabApi.Features.Wrappers.Server.ILimit`2">limits</see>.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Server.RemoteAdminCommandHandler">
            <summary>
            Gets the <see cref="T:CommandSystem.RemoteAdminCommandHandler"/> instance.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Server.ClientCommandHandler">
            <summary>
            Gets the <see cref="T:CommandSystem.ClientCommandHandler"/> instance.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Server.GameConsoleCommandHandler">
            <summary>
            Gets the <see cref="T:CommandSystem.GameConsoleCommandHandler"/> instance.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Server.ShutdownState">
            <summary>
            Gets the <see cref="T:ServerShutdown.ServerShutdownState"/> of the server.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Server.BanPlayer(LabApi.Features.Wrappers.Player,System.String,System.Int64)">
            <summary>
            Bans the specified <see cref="T:LabApi.Features.Wrappers.Player"/> from the server.
            </summary>
            <param name="player">The player to ban.</param>
            <param name="reason">The reason of the ban.</param>
            <param name="duration">The duration of the ban in seconds.</param>
            <returns>Whether the player was successfully banned.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Server.BanPlayer(LabApi.Features.Wrappers.Player,LabApi.Features.Wrappers.Player,System.String,System.Int64)">
            <summary>
            Bans the specified <see cref="T:LabApi.Features.Wrappers.Player"/> from the server.
            </summary>
            <param name="player">The player to ban.</param>
            <param name="issuer">The player that issued the ban.</param>
            <param name="reason">The reason of the ban.</param>
            <param name="duration">The duration of ban in seconds.</param>
            <returns>Whether the player was successfully banned.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Server.KickPlayer(LabApi.Features.Wrappers.Player,System.String)">
            <summary>
            Kicks the specified <see cref="T:LabApi.Features.Wrappers.Player"/> from the server.
            </summary>
            <param name="player">The player to kick.</param>
            <param name="reason">The reason of the kick.</param>
            <returns>Whether the player was successfully kicked.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Server.KickPlayer(LabApi.Features.Wrappers.Player,LabApi.Features.Wrappers.Player,System.String)">
            <summary>
            Kicks the specified <see cref="T:LabApi.Features.Wrappers.Player"/> from the server.
            </summary>
            <param name="player">The player to kick.</param>
            <param name="issuer">The player that issued the kick.</param>
            <param name="reason">The reason of the kick.</param>
            <returns>Whether the player was successfully kicked.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Server.BanUserId(System.String,System.String,System.Int64,System.String)">
            <summary>
            Bans a player from the server.
            </summary>
            <param name="userId">The User ID of player that will be banned.</param>
            <param name="reason">The ban reason.</param>
            <param name="duration">The duration of the ban.</param>
            <param name="bannedPlayerNickname">The nickname of the banned player.</param>
            <returns>Whether or not the ban was successful.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Server.BanUserId(System.String,LabApi.Features.Wrappers.Player,System.String,System.Int64,System.String)">
            <summary>
            Bans a player from the server.
            </summary>
            <param name="userId">The User ID of the player that will be banned.</param>
            <param name="issuer">The issuer of the ban.</param>
            <param name="reason">The ban reason.</param>
            <param name="duration">The duration of the ban.</param>
            <param name="bannedPlayerNickname">The nickname of the banned player.</param>
            <returns>Whether the ban was successful.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Server.BanIpAddress(System.String,System.String,System.Int64,System.String)">
            <summary>
            Bans a player from the server.
            </summary>
            <param name="ipAddress">The IP address of the player which will be banned.</param>
            <param name="reason">The ban reason.</param>
            <param name="duration">The duration of the ban.</param>
            <param name="bannedPlayerNickname">The nickname of the banned player.</param>
            <returns>Whether the ban was successful.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Server.BanIpAddress(System.String,LabApi.Features.Wrappers.Player,System.String,System.Int64,System.String)">
            <summary>
            Bans a player from the server.
            </summary>
            <param name="ipAddress">The IP address of the player that will be banned.</param>
            <param name="issuer">The issuer of the ban.</param>
            <param name="reason">The ban reason.</param>
            <param name="duration">The duration of the ban.</param>
            <param name="bannedPlayerNickname">The nickname of the banned player.</param>
            <returns>Whether the ban was successful.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Server.UnbanUserId(System.String)">
            <summary>
            Unbans a player from the server.
            </summary>
            <param name="userId">The User ID of the player to unban.</param>
            <returns>Whether the unban was successful.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Server.UnbanIpAddress(System.String)">
            <summary>
            Unbans a player from the server.
            </summary>
            <param name="ipAddress">The IP address of the player.</param>
            <returns>Whether the unban was successful.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Server.IsPlayerBanned(System.String)">
            <summary>
            Checks whether a player is banned.
            </summary>
            <param name="value">The User ID or IP address of the player.</param>
            <returns>Whether the player is banned.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Server.GetAllBannedPlayers">
            <summary>
            Gets all banned players.
            </summary>
            <returns>A pooled list of all banned players.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Server.GetAllBannedPlayers(BanHandler.BanType)">
            <summary>
            Gets all banned players by ban type.
            </summary>
            <param name="banType">The type of ban.</param>
            <returns>A pooled list of specified ban types.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Server.Restart">
            <summary>
            Restarts the server and reconnects all players.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Server.Restart(System.UInt16)">
            <summary>
            Restarts the server and reconnects all players to target server port.
            </summary>
            <param name="redirectPort">The port number of the server to send all the players too.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Server.Shutdown">
            <summary>
            Shutdowns the server and disconnects all players.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Server.Shutdown(System.UInt16)">
            <summary>
            Shutdowns the server and reconnects all players to target server port.
            </summary>
            <param name="redirectPort">The port number of the server to send all the players too.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Server.RunCommand(System.String,CommandSender)">
            <summary>
            Run a command in the server console.
            </summary>
            <param name="command">The command name.</param>
            <param name="sender">The <see cref="T:CommandSender"/> running the command.</param>
            <returns>The commands response.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Server.SendBroadcast(System.String,System.UInt16,Broadcast.BroadcastFlags,System.Boolean)">
            <summary>
            Sends a broadcast to all players.
            </summary>
            <param name="message">The message to be broadcast.</param>
            <param name="duration">The broadcast duration.</param>
            <param name="type">The broadcast type.</param>
            <param name="shouldClearPrevious">Clears previous displayed broadcast.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Server.SendBroadcast(LabApi.Features.Wrappers.Player,System.String,System.UInt16,Broadcast.BroadcastFlags,System.Boolean)">
            <summary>
            Sends a broadcast to the specified <see cref="T:LabApi.Features.Wrappers.Player"/>.
            </summary>
            <param name="player">The player to send a broadcast.</param>
            <param name="message">The message to be broadcast.</param>
            <param name="duration">The broadcast duration.</param>
            <param name="type">The broadcast type.</param>
            <param name="shouldClearPrevious">Clears previous displayed broadcast.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Server.SendAdminChatMessage(System.String,System.Boolean)">
            <summary>
            Sends the admin chat messages to all players with <see cref="F:PlayerPermissions.AdminChat"/> permissions.
            </summary>
            <param name="message">The message to send.</param>
            <param name="isSilent">Whether the message should not appear in broadcast.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Server.SendAdminChatMessage(System.Collections.Generic.IEnumerable{LabApi.Features.Wrappers.Player},System.String,System.Boolean)">
            <summary>
            Sends admin chat message to all specified players.
            </summary>
            <param name="targetPlayers">The target players.</param>
            <param name="message">The message to send.</param>
            <param name="isSilent">Whether the message should not appear in broadcast.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Server.ClearBroadcasts">
            <summary>
            Clears broadcast's for all players.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Server.ClearBroadcasts(LabApi.Features.Wrappers.Player)">
            <summary>
            Clears broadcast's for the specified <see cref="T:LabApi.Features.Wrappers.Player"/>.
            </summary>
            <param name="player">The player to clear the broadcast's.</param>
        </member>
        <member name="T:LabApi.Features.Wrappers.Server.ILimit`2">
            <summary>
            Interface for getting and setting key value limits.
            </summary>
            <typeparam name="TKey">The Key type.</typeparam>
            <typeparam name="TValue">The Value type.</typeparam>
        </member>
        <member name="P:LabApi.Features.Wrappers.Server.ILimit`2.Item(`0)">
            <summary>
            Key value getter and setter.
            </summary>
            <param name="index">The key used to identify the limit.</param>
            <returns>The limit value for the corresponding key.</returns>
        </member>
        <member name="T:LabApi.Features.Wrappers.Server.CategoryLimitsSynchronizer">
            <summary>
            Private implementation class for synchronizing ItemCategory limits.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Server.CategoryLimitsSynchronizer.Item(ItemCategory)">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Features.Wrappers.Server.AmmoLimitsSynchronizer">
            <summary>
            Private implementation class for synchronizing Ammo limits.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Server.AmmoLimitsSynchronizer.Item(ItemType)">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Features.Wrappers.Whitelist">
            <summary>
            A static wrapper representing the <see cref="T:WhiteList">whitelist</see> of the server.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Whitelist.FilePath">
            <summary>
            Absolute path to UserIDWhitelist file.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Whitelist.WhitelistedPlayers">
            <summary>
            All currently whitelisted players.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Whitelist.Count">
            <summary>
            Amount of whitelisted players.
            </summary>
        </member>
        <member name="P:LabApi.Features.Wrappers.Whitelist.WhitelistEnabled">
            <summary>
            Gets or sets whether the whitelist is currently enabled. This value is reset to the config one after server restart.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Whitelist.IsOnWhitelist(System.String)">
            <summary>
            Checks if player is on whitelist.
            </summary>
            <param name="userId">The user id of the player.</param>
            <returns>Whether player is on whitelist.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Whitelist.IsWhitelisted(System.String)">
            <summary>
            Checks if the player is allowed on the server if the whitelist is enabled.
            </summary>
            <param name="userId">The user id of the player.</param>
            <returns>Whether the player is whitelisted. Will always return true if whitelist is disabled.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Whitelist.Reload">
            <summary>
            Reloads whitelist from the whitelist file.
            </summary>
        </member>
        <member name="M:LabApi.Features.Wrappers.Whitelist.Add(System.String)">
            <summary>
            Adds player to whitelist and saves it to file.
            </summary>
            <param name="userId">The user id.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Whitelist.Add(LabApi.Features.Wrappers.Player)">
            <summary>
            Adds player to whitelist and saves it to file.
            </summary>
            <param name="player">The player to be added onto whitelist.</param>
        </member>
        <member name="M:LabApi.Features.Wrappers.Whitelist.Remove(System.String)">
            <summary>
            Removes player from whitelist and saves it to file.
            </summary>
            <param name="userId">The user id.</param>
            <returns>Whether the user id was found and removed from the whitelist.</returns>
        </member>
        <member name="M:LabApi.Features.Wrappers.Whitelist.Remove(LabApi.Features.Wrappers.Player)">
            <summary>
             Removes player from whitelist and saves it to file.
            </summary>
            <param name="player">The player to be removed from the whitelist.</param>
            <returns>Whether the player was found and removed from the whitelist.</returns>
        </member>
        <member name="T:LabApi.Loader.CommandLoader">
            <summary>
            LabAPIs command loader.
            Responsible for loading all the different Commands in plugin assemblies.
            </summary>
        </member>
        <member name="P:LabApi.Loader.CommandLoader.CommandHandlers">
            <summary>
            The dictionary of command handlers.
            </summary>
        </member>
        <member name="P:LabApi.Loader.CommandLoader.RegisteredCommands">
            <summary>
            The dictionary of registered commands by plugins.
            </summary>
        </member>
        <member name="P:LabApi.Loader.CommandLoader.LabApiCommands">
            <summary>
            The dictionary of registered LabAPI commands.
            </summary>
        </member>
        <member name="M:LabApi.Loader.CommandLoader.RegisterCommands(LabApi.Loader.Features.Plugins.Plugin)">
            <summary>
            Registers all commands in the given <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/>.
            </summary>
            <param name="plugin">The <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/> to register the commands from.</param>
        </member>
        <member name="M:LabApi.Loader.CommandLoader.RegisterCommands(System.Reflection.Assembly,System.String)">
            <summary>
            Registers all commands in the given <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to register the commands from.</param>
            <param name="logName">The name of the plugin to log to use when logging errors.</param>
            <returns>An enumeration of all registered commands.</returns>
        </member>
        <member name="M:LabApi.Loader.CommandLoader.RegisterCommands(System.Type,System.String)">
            <summary>
            Registers all commands in the given <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to register the commands from.</param>
            <param name="logName">The name of the plugin to log to use when logging errors.</param>
            <returns>Returns a list of registered commands.</returns>
        </member>
        <member name="M:LabApi.Loader.CommandLoader.TryRegisterCommand(System.Type,System.Type,CommandSystem.ICommand@,System.String)">
            <summary>
            We register a command with the given <see cref="T:System.Type"/> and <see cref="T:System.Type"/>.
            </summary>
            <param name="commandType">The <see cref="T:System.Type"/> of the command to register.</param>
            <param name="commandHandlerType">The <see cref="T:System.Type"/> of the command handler to register the command to.</param>
            <param name="command">The registered command if the command was successfully registered.</param>
            <param name="logName">The name of the plugin to log to use when logging errors.</param>
            <returns>Whether the command registered successfully.</returns>
        </member>
        <member name="M:LabApi.Loader.CommandLoader.TryRegisterCommand(CommandSystem.ICommand,CommandSystem.CommandHandler,System.String)">
            <summary>
            Tries to register a command with the given <see cref="T:CommandSystem.ICommand"/> and <see cref="T:CommandSystem.CommandHandler"/>.
            </summary>
            <param name="command">The <see cref="T:CommandSystem.ICommand"/> to register.</param>
            <param name="commandHandler">The <see cref="T:CommandSystem.CommandHandler"/> to register the command to.</param>
            <param name="logName">The name of the plugin to log to use when logging errors.</param>
            <returns>Whether the command was successfully registered.</returns>
        </member>
        <member name="M:LabApi.Loader.CommandLoader.UnregisterCommands(LabApi.Loader.Features.Plugins.Plugin)">
            <summary>
            Unregisters all commands in the given <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/>.
            </summary>
            <param name="plugin">The <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/> to unregister the commands from.</param>
        </member>
        <member name="M:LabApi.Loader.CommandLoader.UnregisterCommand(CommandSystem.ICommand)">
            <summary>
            Unregisters a command from all registered <see cref="T:CommandSystem.CommandHandler"/>s.
            </summary>
            <param name="command">The command to unregister.</param>
        </member>
        <member name="M:LabApi.Loader.CommandLoader.RegisterCommands">
            <summary>
            Registers all commands in the LabAPI solution.
            </summary>
        </member>
        <member name="T:LabApi.Loader.ConfigurationLoader">
            <summary>
            LabAPIs plugin configuration loader.
            Responsible for loading all the different <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/> configs.
            </summary>
        </member>
        <member name="M:LabApi.Loader.ConfigurationLoader.TrySaveConfig``1(LabApi.Loader.Features.Plugins.Plugin,``0,System.String,System.Boolean)">
            <summary>
            Tries to save the configuration of the specified <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/>.
            </summary>
            <param name="plugin">The <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/> to save the configuration for.</param>
            <param name="config">The configuration to save.</param>
            <param name="fileName">The name of the configuration file.</param>
            <param name="isGlobal">Whether the configuration is global or per-port.</param>
            <typeparam name="TConfig">The type of the configuration to save.</typeparam>
            <returns>Whether the configuration was successfully saved.</returns>
        </member>
        <member name="M:LabApi.Loader.ConfigurationLoader.TryReadConfig``1(LabApi.Loader.Features.Plugins.Plugin,System.String,``0@,System.Boolean)">
            <summary>
            Tries to read the configuration of the specified <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/>.
            </summary>
            <param name="plugin">The <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/> to read the configuration for.</param>
            <param name="fileName">The name of the configuration file.</param>
            <param name="config">The read configuration of the specified <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/> if successful, otherwise <see langword="null"/>.</param>
            <param name="isGlobal">Whether the configuration is global or per-port.</param>
            <typeparam name="TConfig">The type of the configuration to read.</typeparam>
            <returns>Whether the configuration was successfully read.</returns>
        </member>
        <member name="M:LabApi.Loader.ConfigurationLoader.TryLoadConfig``1(LabApi.Loader.Features.Plugins.Plugin,System.String,``0@,System.Boolean)">
            <summary>
            Tries to read the configuration of the specified <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/> and creates a default instance if it doesn't exist.
            </summary>
            <param name="plugin">The <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/> to load the configuration for.</param>
            <param name="fileName">The name of the configuration file.</param>
            <param name="config">The loaded configuration of the specified <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/> if successful, otherwise <see langword="null"/>.</param>
            <param name="isGlobal">Whether the configuration is global or per-port.</param>
            <typeparam name="TConfig">The type of the configuration to load.</typeparam>
            <returns>Whether the configuration was successfully loaded.</returns>
        </member>
        <member name="M:LabApi.Loader.ConfigurationLoader.SaveConfig``1(LabApi.Loader.Features.Plugins.Plugin,``0,System.String,System.Boolean)">
            <summary>
            Saves the configuration of the specified <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/>.
            </summary>
            <param name="plugin">The <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/> to save the configuration for.</param>
            <param name="config">The configuration to save.</param>
            <param name="fileName">The name of the configuration file.</param>
            <param name="isGlobal">Whether the configuration is global or per-port.</param>
            <typeparam name="TConfig">The type of the configuration to save.</typeparam>
        </member>
        <member name="M:LabApi.Loader.ConfigurationLoader.ReadConfig``1(LabApi.Loader.Features.Plugins.Plugin,System.String,System.Boolean)">
            <summary>
            Reads the configuration of the specified <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/>.
            </summary>
            <param name="plugin">The <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/> to read the configuration for.</param>
            <param name="fileName">The name of the configuration file.</param>
            <param name="isGlobal">Whether the configuration is global or per-port.</param>
            <typeparam name="TConfig">The type of the configuration to read.</typeparam>
            <returns>The read configuration of the specified <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/> if successful, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Loader.ConfigurationLoader.LoadConfig``1(LabApi.Loader.Features.Plugins.Plugin,System.String,System.Boolean)">
            <summary>
            Reads the configuration of the specified <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/> and creates a default instance if it doesn't exist.
            </summary>
            <param name="plugin">The <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/> to load the configuration for.</param>
            <param name="fileName">The name of the configuration file.</param>
            <param name="isGlobal">Whether the configuration is global or per-port.</param>
            <typeparam name="TConfig">The type of the configuration to load.</typeparam>
            <returns>The loaded configuration of the specified <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/> if successful, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:LabApi.Loader.ConfigurationLoader.TryCreateDefaultConfig``1(LabApi.Loader.Features.Plugins.Plugin,``0@)">
            <summary>
            Tries to create a default instance of the specified configuration.
            </summary>
            <param name="plugin">The <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/> to create the default configuration for.</param>
            <param name="config">The default instance of the configuration if successful, otherwise <see langword="null"/>.</param>
            <typeparam name="TConfig">The type of the configuration to create.</typeparam>
            <returns>Whether the configuration was successfully created.</returns>
        </member>
        <member name="M:LabApi.Loader.ConfigurationLoader.GetConfigDirectory(LabApi.Loader.Features.Plugins.Plugin,System.Boolean)">
            <summary>
            Gets the configuration directory for a plugin, considering whether it's global or per-port.
            </summary>
            <param name="plugin">The plugin to gets its config directory.</param>
            <param name="isGlobal">Whether the directory is for global configs or per-port ones.</param>
            <returns>The <see cref="T:System.IO.DirectoryInfo"/> of the plugin.</returns>
        </member>
        <member name="M:LabApi.Loader.ConfigurationLoader.GetConfigPath(LabApi.Loader.Features.Plugins.Plugin,System.String,System.Boolean)">
            <summary>
            Gets the path of the configuration file for the specified <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/>.
            </summary>
            <param name="plugin">The <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/> to get the configuration path for.</param>
            <param name="fileName">The name of the configuration file.</param>
            <param name="isGlobal">Whether the configuration is global or per-port.</param>
            <returns>The path of the configuration of the specified <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/>.</returns>
        </member>
        <member name="M:LabApi.Loader.ConfigurationLoader.TryLoadProperties(LabApi.Loader.Features.Plugins.Plugin)">
            <summary>
            Tries to load the properties of the specified <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/>.
            </summary>
            <param name="plugin">The <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/> to load the properties for.</param>
            <returns>Whether the properties were successfully loaded.</returns>
        </member>
        <member name="T:LabApi.Loader.Constants.Priority">
            <summary>
            Represents priority levels as constant byte values. (Lower values indicate higher priority)
            Used throughout the API to determine the order of execution order of various features.
            </summary>
            <remarks>
            You can use a value lower than <see cref="F:LabApi.Loader.Constants.Priority.Highest"/> or higher than <see cref="F:LabApi.Loader.Constants.Priority.Lowest"/> to create custom priority levels.
            </remarks>
        </member>
        <member name="F:LabApi.Loader.Constants.Priority.Highest">
            <summary>
            Represents the highest priority level.
            </summary>
        </member>
        <member name="F:LabApi.Loader.Constants.Priority.High">
            <summary>
            Represents a high priority level.
            </summary>
        </member>
        <member name="F:LabApi.Loader.Constants.Priority.Medium">
            <summary>
            Represents a medium priority level.
            </summary>
        </member>
        <member name="F:LabApi.Loader.Constants.Priority.Low">
            <summary>
            Represents a low priority level.
            </summary>
        </member>
        <member name="F:LabApi.Loader.Constants.Priority.Lowest">
            <summary>
            Represents the lowest priority level.
            </summary>
        </member>
        <member name="T:LabApi.Loader.Features.Commands.Extensions.CommandExtensions">
            <summary>
            Extension class for LabAPI commands.
            </summary>
        </member>
        <member name="M:LabApi.Loader.Features.Commands.Extensions.CommandExtensions.ListSubCommands(ParentCommand,System.ArraySegment{System.String},System.String@)">
            <summary>
            Responds to a parent command execution by listing out all sub commands, and/or printing an invalid arg message if any invalid args were provided.
            </summary>
            <param name="parent">The parent command instance.</param>
            <param name="arguments">The arguments passed to the parent command.</param>
            <param name="response">The output response.</param>
            <returns><see langword="true"/> if there were no arguments, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:LabApi.Loader.Features.Commands.LabApiParentCommand">
            <summary>
            LabAPI parent command used for all LabAPI related subcommands.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Commands.LabApiParentCommand.Command">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Loader.Features.Commands.LabApiParentCommand.Aliases">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Loader.Features.Commands.LabApiParentCommand.Description">
            <inheritdoc />
        </member>
        <member name="M:LabApi.Loader.Features.Commands.LabApiParentCommand.LoadGeneratedCommands">
            <inheritdoc />
        </member>
        <member name="M:LabApi.Loader.Features.Commands.LabApiParentCommand.ExecuteParent(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Loader.Features.Commands.PluginPermissionsCommand">
            <summary>
            Represents a command that allows players to view their plugin permissions.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Commands.PluginPermissionsCommand.Command">
            <inheritdoc cref="P:CommandSystem.ICommand.Command"/>
        </member>
        <member name="P:LabApi.Loader.Features.Commands.PluginPermissionsCommand.Aliases">
            <inheritdoc cref="P:CommandSystem.ICommand.Aliases"/>
        </member>
        <member name="P:LabApi.Loader.Features.Commands.PluginPermissionsCommand.Description">
            <inheritdoc cref="P:CommandSystem.ICommand.Description"/>
        </member>
        <member name="M:LabApi.Loader.Features.Commands.PluginPermissionsCommand.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc cref="M:CommandSystem.ICommand.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)"/>
        </member>
        <member name="T:LabApi.Loader.Features.Commands.Reload.ConfigsCommand">
            <summary>
            Represents a command used to reload all plugin configs.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Commands.Reload.ConfigsCommand.Command">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Loader.Features.Commands.Reload.ConfigsCommand.Aliases">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Loader.Features.Commands.Reload.ConfigsCommand.Description">
            <inheritdoc />
        </member>
        <member name="M:LabApi.Loader.Features.Commands.Reload.ConfigsCommand.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Loader.Features.Commands.Reload.ReloadParentCommand">
            <summary>
            Reload parent command used for all LabAPI reload related sub commands.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Commands.Reload.ReloadParentCommand.Command">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Loader.Features.Commands.Reload.ReloadParentCommand.Aliases">
            <inheritdoc />
        </member>
        <member name="P:LabApi.Loader.Features.Commands.Reload.ReloadParentCommand.Description">
            <inheritdoc />
        </member>
        <member name="M:LabApi.Loader.Features.Commands.Reload.ReloadParentCommand.LoadGeneratedCommands">
            <inheritdoc />
        </member>
        <member name="M:LabApi.Loader.Features.Commands.Reload.ReloadParentCommand.ExecuteParent(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc />
        </member>
        <member name="T:LabApi.Loader.Features.Configuration.LabApiConfig">
            <summary>
            Configuration for LabAPI core functionality.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Configuration.LabApiConfig.DependencyPaths">
            <summary>
            List of dependency paths relative to <see cref="P:LabApi.Loader.Features.Paths.PathManager.Dependencies"/>.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Configuration.LabApiConfig.PluginPaths">
            <summary>
            List of plugin paths relative to <see cref="P:LabApi.Loader.Features.Paths.PathManager.Plugins"/>.
            </summary>
        </member>
        <member name="T:LabApi.Loader.Features.Misc.AssemblyUtils">
            <summary>
            A collection of utilities for working with <see cref="T:System.Reflection.Assembly"/>s.
            </summary>
        </member>
        <member name="M:LabApi.Loader.Features.Misc.AssemblyUtils.HasMissingDependencies(System.Reflection.Assembly,System.String,System.Type[]@)">
            <summary>
            Checks whether the specified <see cref="T:System.Reflection.Assembly"/> has missing dependencies and gets the types if it is loaded.
            </summary>
            <param name="assembly">The assembly to check missing dependencies for.</param>
            <param name="assemblyPath">The path of the assembly to log an error message.</param>
            <param name="types">The types of the assembly if it is loaded.</param>
            <returns>Whether the specified <see cref="T:System.Reflection.Assembly"/> has missing dependencies.</returns>
        </member>
        <member name="M:LabApi.Loader.Features.Misc.AssemblyUtils.GetLoadedAssemblies">
            <summary>
            Gets the loaded assemblies in the current <see cref="T:System.AppDomain"/>.
            </summary>
            <returns>Returns a list of the formatted loaded assemblies.</returns>
        </member>
        <member name="M:LabApi.Loader.Features.Misc.AssemblyUtils.GetMissingDependencies(System.Reflection.Assembly)">
            <summary>
            Gets the missing dependencies of the specified <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="assembly">The assembly to check missing dependencies from.</param>
            <returns>A formatted <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the missing dependencies.</returns>
        </member>
        <member name="M:LabApi.Loader.Features.Misc.AssemblyUtils.ResolveEmbeddedResources(System.Reflection.Assembly)">
            <summary>
            Resolves embedded resources from the specified <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="assembly">The assembly to resolve embedded resources from.</param>
            <remarks>This method loads each DLL if no such assembly with the same name has been loaded into the current AppDomain yet.</remarks>
        </member>
        <member name="M:LabApi.Loader.Features.Misc.AssemblyUtils.LoadEmbeddedDll(System.Reflection.Assembly,System.String)">
            <summary>
            Loads an embedded dll from the specified <see cref="T:System.Reflection.Assembly"/> if no such assembly with the same name has been loaded.
            </summary>
            <param name="target">The assembly to load the embedded dll from.</param>
            <param name="name">The resource name of the embedded dll.</param>
            <remarks>The name check only checks for the <see cref="P:System.Reflection.AssemblyName.Name"/> of the <see cref="T:System.Reflection.AssemblyName"/>.</remarks>
        </member>
        <member name="M:LabApi.Loader.Features.Misc.AssemblyUtils.LoadCompressedEmbeddedDll(System.Reflection.Assembly,System.String)">
            <summary>
            Loads a compressed embedded dll from the specified <see cref="T:System.Reflection.Assembly"/> if no such assembly with the same name has been loaded.
            </summary>
            <param name="target">The assembly to load the compressed embedded dll from.</param>
            <param name="name">The resource name of the compressed embedded dll.</param>
            <remarks>The name check only checks for the <see cref="P:System.Reflection.AssemblyName.Name"/> of the <see cref="T:System.Reflection.AssemblyName"/>.</remarks>
        </member>
        <member name="M:LabApi.Loader.Features.Misc.AssemblyUtils.TryGetDataStream(System.Reflection.Assembly,System.String,System.IO.Stream@)">
            <summary>
            Try to get the data stream of the specified resource name from the specified <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="target">The assembly to get the data stream from.</param>
            <param name="name">The resource name to get the data stream from.</param>
            <param name="dataStream">The data stream of the specified resource name if it was successfully retrieved, otherwise <see langword="null"/>.</param>
            <returns>Whether or not the data stream was successfully retrieved.</returns>
        </member>
        <member name="M:LabApi.Loader.Features.Misc.AssemblyUtils.TryGetLoadedAssembly(LabApi.Loader.Features.Plugins.Plugin,System.Reflection.Assembly@)">
            <summary>
            Tries to get the assembly of a loaded <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/>.
            </summary>
            <param name="plugin">The <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/> to get the assembly from.</param>
            <param name="assembly">The assembly of the loaded <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/>.</param>
            <returns>Whether the assembly was successfully retrieved.</returns>
        </member>
        <member name="T:LabApi.Loader.Features.Paths.PathManager">
            <summary>
            The manager for all paths used by LabAPI.
            It is recommended to use this class instead of hard-coded paths.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Paths.PathManager.AppData">
            <summary>
            Gets the path to the system's AppData folder.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Paths.PathManager.SecretLab">
            <summary>
            Gets the path to the <see cref="F:LabApi.Loader.Features.Paths.PathManager.SecretLabFolderName"/> folder, located inside <see cref="P:LabApi.Loader.Features.Paths.PathManager.AppData"/>.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Paths.PathManager.LabApi">
            <summary>
            Gets the path to the <see cref="F:LabApi.Loader.Features.Paths.PathManager.LabApiFolderName"/> folder, located inside <see cref="P:LabApi.Loader.Features.Paths.PathManager.SecretLab"/>.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Paths.PathManager.Plugins">
            <summary>
            Gets the path to the plugins folder, located inside <see cref="P:LabApi.Loader.Features.Paths.PathManager.LabApi"/>.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Paths.PathManager.Dependencies">
            <summary>
            Gets the path to the dependencies folder, located inside <see cref="P:LabApi.Loader.Features.Paths.PathManager.LabApi"/>.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Paths.PathManager.Configs">
            <summary>
            Gets the path to the configs folder, located inside <see cref="P:LabApi.Loader.Features.Paths.PathManager.LabApi"/>.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Paths.PathManager.RAConfigPath">
            <summary>
            Gets an absolute path to the bans file.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Paths.PathManager.GameplayConfigPath">
            <summary>
            Gets an absolute path to the gameplay config file.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Paths.PathManager.SharingConfigPath">
            <summary>
            Gets an absolute path to the config sharing file.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Paths.PathManager.MutesConfigPath">
            <summary>
            Gets an absolute path to the mutes config file.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Paths.PathManager.UserIdBansPath">
            <summary>
            Gets an absolute path to the user id bans file.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Paths.PathManager.IpBansPath">
            <summary>
            Gets an absolute path to the IP bans file.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Paths.PathManager.WhitelistConfigPath">
            <summary>
            Gets an absolute path to the whitelist config file.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Paths.PathManager.ReservedSlotsConfigPath">
            <summary>
            Gets an absolute path to the reserved slots config file.
            </summary>
        </member>
        <member name="T:LabApi.Loader.Features.Plugins.Configuration.Properties">
            <summary>
            The properties of the <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/>.
            </summary>
        </member>
        <member name="M:LabApi.Loader.Features.Plugins.Configuration.Properties.CreateDefault">
            <summary>
            Creates a new instance of the <see cref="T:LabApi.Loader.Features.Plugins.Configuration.Properties"/> class.
            </summary>
            <returns>A new instance of the <see cref="T:LabApi.Loader.Features.Plugins.Configuration.Properties"/> class.</returns>
        </member>
        <member name="P:LabApi.Loader.Features.Plugins.Configuration.Properties.IsEnabled">
            <summary>
            Whether the <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/> is enabled.
            </summary>
        </member>
        <member name="T:LabApi.Loader.Features.Plugins.Enums.LoadPriority">
            <summary>
            Represents load priorities for <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/>s.
            </summary>
        </member>
        <member name="F:LabApi.Loader.Features.Plugins.Enums.LoadPriority.Highest">
            <summary>
            These plugins are loaded first.
            <para>We recommend using it in plugins which may be used as dependencies.</para>
            </summary>
        </member>
        <member name="F:LabApi.Loader.Features.Plugins.Enums.LoadPriority.High">
            <summary>
            These are high priority plugins, a middle ground between <see cref="F:LabApi.Loader.Features.Plugins.Enums.LoadPriority.Highest"/> and <see cref="F:LabApi.Loader.Features.Plugins.Enums.LoadPriority.Medium"/>.
            <para>We recommend using it in plugins which may be used as dependencies, or <see cref="F:LabApi.Loader.Features.Plugins.Enums.LoadPriority.Highest"/> as an alternative.</para>
            </summary>
        </member>
        <member name="F:LabApi.Loader.Features.Plugins.Enums.LoadPriority.Medium">
            <summary>
            The default value for plugins.
            </summary>
        </member>
        <member name="F:LabApi.Loader.Features.Plugins.Enums.LoadPriority.Low">
            <summary>
            These are low priority plugins, a middle ground between <see cref="F:LabApi.Loader.Features.Plugins.Enums.LoadPriority.Medium"/> and <see cref="F:LabApi.Loader.Features.Plugins.Enums.LoadPriority.Lowest"/>.
            <para>We recommend using it in plugins which require plugins as dependencies, or <see cref="F:LabApi.Loader.Features.Plugins.Enums.LoadPriority.Lowest"/> as an alternative.</para>
            </summary>
        </member>
        <member name="F:LabApi.Loader.Features.Plugins.Enums.LoadPriority.Lowest">
            <summary>
            These plugins are loaded last.
            <para>We recommend using it in plugins which require plugins as dependencies.</para>
            </summary>
        </member>
        <member name="T:LabApi.Loader.Features.Plugins.Plugin">
            <summary>
            Represents a plugin which can be loaded by the <see cref="T:LabApi.Loader.PluginLoader"/>.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Plugins.Plugin.Name">
            <summary>
            The name of the <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/>.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Plugins.Plugin.Description">
            <summary>
            A description of the <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/>.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Plugins.Plugin.Author">
            <summary>
            The author of the <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/>.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Plugins.Plugin.Version">
            <summary>
            The <see cref="P:LabApi.Loader.Features.Plugins.Plugin.Version"/> of the <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/>.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Plugins.Plugin.RequiredApiVersion">
            <summary>
            The <see cref="P:LabApi.Loader.Features.Plugins.Plugin.Version"/> of LabAPI required by the <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/>.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Plugins.Plugin.Priority">
            <summary>
            The <see cref="T:LabApi.Loader.Features.Plugins.Enums.LoadPriority"/> of the <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/>.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Plugins.Plugin.IsTransparent">
            <summary>
            Whether this plugin is considered transparent.<br/>
            A plugin can be marked as transparent if the server’s modifications are strictly limited to non-intrusive features that do not affect gameplay balance or make significant alterations to the user interface.
            Examples of transparent modifications are: admin tools, automated timed broadcasts for tips, message of the day or other administrative utilities.<br/>
            For more information, see article 5.2 in the official documentation: https://scpslgame.com/csg.
            </summary>
            <remarks>
            You can keep using the 'transparently modded' flag during occasional short events organized and supervised by
            Server Staff, regardless of the Modifications used for these events.
            </remarks>
        </member>
        <member name="P:LabApi.Loader.Features.Plugins.Plugin.Properties">
            <summary>
            The <see cref="P:LabApi.Loader.Features.Plugins.Plugin.Properties"/> of the <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/>.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Plugins.Plugin.FilePath">
            <summary>
            The full path to the plugin's DLL file.
            </summary>
        </member>
        <member name="M:LabApi.Loader.Features.Plugins.Plugin.Enable">
            <summary>
            Called when the <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/> is enabled.
            Should be used to register events, etc.
            </summary>
        </member>
        <member name="M:LabApi.Loader.Features.Plugins.Plugin.Disable">
            <summary>
            Called when the <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/> is disabled.
            Should be used to unregister events, etc.
            </summary>
        </member>
        <member name="M:LabApi.Loader.Features.Plugins.Plugin.LoadConfigs">
            <summary>
            Called before the <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/> is enabled.
            <br/>
            <para>Commonly used to load configurations, or any data files before the plugin is enabled.</para>
            </summary>
        </member>
        <member name="M:LabApi.Loader.Features.Plugins.Plugin.ToString">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Loader.Features.Plugins.Plugin`1">
            <summary>
            Represents a plugin which can be loaded by the <see cref="T:LabApi.Loader.PluginLoader"/>.
            It also accepts a configuration file as a generic type.
            </summary>
            <typeparam name="TConfig">The configuration of the <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/>.</typeparam>
        </member>
        <member name="P:LabApi.Loader.Features.Plugins.Plugin`1.Config">
            <summary>
            The configuration of the <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/>.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Plugins.Plugin`1.ConfigFileName">
            <summary>
            The file name of the configuration file.
            </summary>
        </member>
        <member name="M:LabApi.Loader.Features.Plugins.Plugin`1.LoadConfigs">
            <inheritdoc/>
        </member>
        <member name="M:LabApi.Loader.Features.Plugins.Plugin`1.SaveConfig">
            <summary>
            Saves the configuration of the <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/> to its configuration file.
            </summary>
        </member>
        <member name="T:LabApi.Loader.Features.Yaml.CustomConverters.CustomColor32Converter">
            <summary>
            A custom class for serializing/deserializing <see cref="T:UnityEngine.Color32"/>.
            </summary>
        </member>
        <member name="M:LabApi.Loader.Features.Yaml.CustomConverters.CustomColor32Converter.ReadYaml(YamlDotNet.Core.IParser,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:LabApi.Loader.Features.Yaml.CustomConverters.CustomColor32Converter.WriteYaml(YamlDotNet.Core.IEmitter,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:LabApi.Loader.Features.Yaml.CustomConverters.CustomColor32Converter.Accepts(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Loader.Features.Yaml.CustomConverters.CustomColorConverter">
            <summary>
            A custom class for serializing/deserializing <see cref="T:UnityEngine.Color"/>.
            </summary>
        </member>
        <member name="M:LabApi.Loader.Features.Yaml.CustomConverters.CustomColorConverter.ReadYaml(YamlDotNet.Core.IParser,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:LabApi.Loader.Features.Yaml.CustomConverters.CustomColorConverter.WriteYaml(YamlDotNet.Core.IEmitter,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:LabApi.Loader.Features.Yaml.CustomConverters.CustomColorConverter.Accepts(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Loader.Features.Yaml.CustomConverters.CustomQuaternionConverter">
            <summary>
            A custom class for serializing/deserializing <see cref="T:UnityEngine.Quaternion"/> as euler angles.
            </summary>
        </member>
        <member name="M:LabApi.Loader.Features.Yaml.CustomConverters.CustomQuaternionConverter.ReadYaml(YamlDotNet.Core.IParser,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:LabApi.Loader.Features.Yaml.CustomConverters.CustomQuaternionConverter.WriteYaml(YamlDotNet.Core.IEmitter,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:LabApi.Loader.Features.Yaml.CustomConverters.CustomQuaternionConverter.Accepts(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Loader.Features.Yaml.CustomConverters.CustomVectorConverter">
            <summary>
            A custom class for serializing/deserializing <see cref="T:UnityEngine.Vector2"/>, <see cref="T:UnityEngine.Vector3"/> and <see cref="T:UnityEngine.Vector4"/>.
            </summary>
        </member>
        <member name="M:LabApi.Loader.Features.Yaml.CustomConverters.CustomVectorConverter.ReadYaml(YamlDotNet.Core.IParser,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:LabApi.Loader.Features.Yaml.CustomConverters.CustomVectorConverter.WriteYaml(YamlDotNet.Core.IEmitter,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:LabApi.Loader.Features.Yaml.CustomConverters.CustomVectorConverter.Accepts(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:LabApi.Loader.Features.Yaml.Extensions.YamlMappingExtensions">
            <summary>
            Extension class for <see cref="T:YamlDotNet.Core.IEmitter"/> and <see cref="T:YamlDotNet.Core.IParser"/>.
            </summary>
        </member>
        <member name="M:LabApi.Loader.Features.Yaml.Extensions.YamlMappingExtensions.EmitMapping(YamlDotNet.Core.IEmitter,System.String,System.String)">
            <summary>
            Emits 2 scalar values as key value pair.
            </summary>
            <param name="emitter">This emitter to emit from.</param>
            <param name="key">The key value.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LabApi.Loader.Features.Yaml.Extensions.YamlMappingExtensions.TryReadMapping(YamlDotNet.Core.IParser,System.String@,System.String@)">
            <summary>
            Attempts to read a key value pair.
            </summary>
            <param name="parser">This parser to read from.</param>
            <param name="key">The key value.</param>
            <param name="value">The value.</param>
            <returns>Whether was the kvp successfully parsed.</returns>
        </member>
        <member name="T:LabApi.Loader.Features.Yaml.YamlConfigParser">
            <summary>
            Static class for yaml config serializer and deserializer.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Yaml.YamlConfigParser.Serializer">
            <summary>
            Static yaml serializer instance.
            </summary>
        </member>
        <member name="P:LabApi.Loader.Features.Yaml.YamlConfigParser.Deserializer">
            <summary>
            Static yaml deserializer instance.
            </summary>
        </member>
        <member name="T:LabApi.Loader.PluginLoader">
            <summary>
            LabAPIs plugin loader.
            Responsible for loading all the different <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/>s.
            </summary>
        </member>
        <member name="P:LabApi.Loader.PluginLoader.Config">
            <summary>
            The current LabAPI configuration.
            </summary>
        </member>
        <member name="P:LabApi.Loader.PluginLoader.Initialized">
            <summary>
            Whether the <see cref="T:LabApi.Loader.PluginLoader"/> has been initialized.
            </summary>
        </member>
        <member name="P:LabApi.Loader.PluginLoader.Dependencies">
            <summary>
            The loaded <see cref="T:System.Reflection.Assembly"/> dependencies.
            </summary>
        </member>
        <member name="P:LabApi.Loader.PluginLoader.Plugins">
            <summary>
            The loaded <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/>s.
            </summary>
        </member>
        <member name="P:LabApi.Loader.PluginLoader.EnabledPlugins">
            <summary>
            The enabled <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/>s.
            </summary>
        </member>
        <member name="M:LabApi.Loader.PluginLoader.Initialize">
            <summary>
            Initializes the <see cref="T:LabApi.Loader.PluginLoader"/> and loads all plugins.
            </summary>
        </member>
        <member name="M:LabApi.Loader.PluginLoader.LoadAllDependencies">
            <summary>
            Loads all dependencies from the configured dependency paths in <see cref="P:LabApi.Loader.Features.Configuration.LabApiConfig.DependencyPaths"/>.
            Each path is relative to <see cref="P:LabApi.Loader.Features.Paths.PathManager.Dependencies"/> and supports port substitution.
            Creates the dependency directories if they don't exist.
            </summary>
        </member>
        <member name="M:LabApi.Loader.PluginLoader.LoadDependencies(System.Collections.Generic.IEnumerable{System.IO.FileInfo})">
            <summary>
            Loads dependencies from a collection of files.
            </summary>
            <param name="files">The collection of assemblies to load.</param>
        </member>
        <member name="M:LabApi.Loader.PluginLoader.LoadAllPlugins">
            <summary>
            Loads all plugins from the configured plugin paths in <see cref="P:LabApi.Loader.Features.Configuration.LabApiConfig.PluginPaths"/>.
            Each path is relative to <see cref="P:LabApi.Loader.Features.Paths.PathManager.Plugins"/> and supports port substitution.
            Creates the plugin directories if they don't exist.
            </summary>
        </member>
        <member name="M:LabApi.Loader.PluginLoader.LoadPlugins(System.Collections.Generic.IEnumerable{System.IO.FileInfo})">
            <summary>
            Loads plugins from a collection of files.
            </summary>
            <param name="files">The collection of assemblies to load.</param>
        </member>
        <member name="M:LabApi.Loader.PluginLoader.EnablePlugins(System.Collections.Generic.IEnumerable{LabApi.Loader.Features.Plugins.Plugin})">
            <summary>
            Enables a collection of <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/>s.
            </summary>
            <param name="plugins">The sorted collection of <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/>s.</param>
        </member>
        <member name="M:LabApi.Loader.PluginLoader.EnablePlugin(LabApi.Loader.Features.Plugins.Plugin)">
            <summary>
            Enables a <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/>.
            </summary>
            <param name="plugin">The <see cref="T:LabApi.Loader.Features.Plugins.Plugin"/> to enable.</param>
        </member>
        <member name="M:LabApi.Loader.PluginLoader.LoadLabApiConfig">
            <summary>
            Loads or creates the LabAPI configuration file.
            </summary>
        </member>
        <member name="M:LabApi.Loader.PluginLoader.ResolveTransparentlyModdedFlag">
            <summary>
            Resolves whether the installed plugins are marked as transparent and sets the <see cref="P:LabApi.Features.Wrappers.Server.IsTransparentlyModded"/> flag based on the result.
            </summary>
        </member>
        <member name="M:Generators.InitializeWrapper.#ctor(System.Byte)">
            <summary>
            Marks a method to be called during LabApi startup.
            </summary>
            <param name="priority">The priority of the initialization method. Lower values indicate higher priority.</param>
        </member>
    </members>
</doc>
